<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonLibrary</name>
    </assembly>
    <members>
        <member name="T:CommonLibrary.Collection.NotifyOnClearObservableCollection`1">
            <summary>
            ObservableCollection, которая правильно генерирует событие CollectionChanged при вызове метода Clear.
            </summary>
            <typeparam name="T">Тип объекта коллекции.</typeparam>
        </member>
        <member name="M:CommonLibrary.Collection.NotifyOnClearObservableCollection`1.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collection.NotifyOnClearObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Конструктор.
            </summary>
            <param name="collection">Коллекция-источник.</param>
        </member>
        <member name="T:CommonLibrary.Collection.SortedObservableCollection`1">
            <summary>
            Отслеживаемая коллекция, которая всегда поддерживается в отсортированном состоянии.
            </summary>
            <typeparam name="T">Тип элементов в коллекции.</typeparam>
        </member>
        <member name="F:CommonLibrary.Collection.SortedObservableCollection`1.LinearSearchMaxItemsCount">
            <summary>
            Верхняя граница количества элементов в списке,
            для которого можно выполнять линейный поиск места вставки нового элемента.
            </summary>
        </member>
        <member name="P:CommonLibrary.Collection.SortedObservableCollection`1.Comparer">
            <summary>
            Компаратор для сравнения элементов при сортировке.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collection.SortedObservableCollection`1.BinarySearchInsertionIndex(System.Int32,System.Int32,`0)">
            <summary>
            Выполнить бинарный поиск места вставки элемента в отсортированный список.
            </summary>
            <param name="lowIndex">Индекс нижней границы участка списка, среди которого ищем место для вставки.</param>
            <param name="highIndex">Индекс верхней границы участка списка, среди которого ищем место для вставки.</param>
            <param name="item">Элемент, место вставки которого нужно найти.</param>
            <returns>Индекс для вставки нового элемента.</returns>
        </member>
        <member name="M:CommonLibrary.Collection.SortedObservableCollection`1.LinearSearchInsertionIndex(System.Int32,System.Int32,`0)">
            <summary>
            Выполнить линейный поиск места вставки элемента в отсортированный список.
            </summary>
            <param name="lowIndex">Индекс нижней границы участка списка, среди которого ищем место для вставки.</param>
            <param name="highIndex">Индекс верхней границы участка списка, среди которого ищем место для вставки.</param>
            <param name="item">Элемент, место вставки которого нужно найти.</param>
            <returns>Индекс для вставки нового элемента.</returns>
        </member>
        <member name="M:CommonLibrary.Collection.SortedObservableCollection`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Создать пустую коллекцию.
            </summary>
            <param name="comparer">Компаратор для сравнения элементов при сортировке.</param>
        </member>
        <member name="M:CommonLibrary.Collection.SortedObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Создать первоначально заполненную коллекцию.
            </summary>
            <param name="collection">Начальное содержимое коллекции.</param>
            <param name="comparer">Компаратор для сравнения элементов при сортировке.</param>
        </member>
        <member name="T:CommonLibrary.IRangeObservableCollection`1">
            <summary>
            Интерфейс коллекции, которая поддерживает массовую работу с элементами.
            При этом CollectionChanged райзится только один раз на всю массовую операцию.
            Так же есть возможность блокировать уведомления об изменении коллекции.
            </summary>
            <typeparam name="T">Тип элемента коллекции.</typeparam>
        </member>
        <member name="M:CommonLibrary.IRangeObservableCollection`1.LockNotification">
            <summary>
            Заблокировать уведомления об изменении коллекции.
            </summary>
        </member>
        <member name="M:CommonLibrary.IRangeObservableCollection`1.UnlockNotification">
            <summary>
            Разблокировать уведомления об изменении коллекции.
            </summary>
            <remarks>
            Если коллекция, в период заблокированности уведомлений, была изменена, то при разблокировки
            сработает уведомление об изменении, с действием NotifyCollectionChangedAction.Reset.
            </remarks>
        </member>
        <member name="M:CommonLibrary.IRangeObservableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Добавить список элементов.
            </summary>
            <param name="newItems">Список новых элементов.</param>
        </member>
        <member name="M:CommonLibrary.IRangeObservableCollection`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Удалить список элементов.
            </summary>
            <param name="deletedItems">Список удаляемых элементов.</param>
        </member>
        <member name="M:CommonLibrary.IRangeObservableCollection`1.Assign(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Очистить коллекцию, и заполнить ее новыми элементами.
            </summary>
            <param name="newItems">Новые элементы.</param>
        </member>
        <member name="T:CommonLibrary.RangeObservableCollection`1">
            <summary>
            Коллекции, которая поддерживает массовую работу с элементами.
            При этом CollectionChanged райзится только один раз на всю массовую операцию.
            Так же есть возможность блокировать уведомления об изменении коллекции.
            </summary>
            <typeparam name="T">Тип элемента коллекции.</typeparam>
        </member>
        <member name="F:CommonLibrary.RangeObservableCollection`1.lockNotificationCount">
            <summary>
            Количество установленных блокировок (уровень вложенности блокировок).
            </summary>
        </member>
        <member name="P:CommonLibrary.RangeObservableCollection`1.HasSuppressedNotification">
            <summary>
            Признак того, что были подавлены уведомления.
            </summary>
        </member>
        <member name="E:CommonLibrary.RangeObservableCollection`1.CollectionChanged">
            <summary>
            Событие изменения коллекции.
            </summary>
        </member>
        <member name="M:CommonLibrary.RangeObservableCollection`1.OnCollectionChangedOverride(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Вызывается при изменении коллекции, предназначено для переопределения потомками.
            </summary>
            <param name="e">Аргументы события изменения коллекции.</param>
        </member>
        <member name="M:CommonLibrary.RangeObservableCollection`1.BeginUpdate">
            <summary>
            Эта реализация сделана для DevExpress, чтобы он мог блокировать/разблокировать уведомлялку,
            через известный ему интерфейс.
            </summary>
        </member>
        <member name="M:CommonLibrary.RangeObservableCollection`1.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:CommonLibrary.RangeObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Конструктор.
            </summary>
            <param name="source">Элементы, которыми заполнить коллекцию.</param>
        </member>
        <member name="T:CommonLibrary.CustomEqualityComparer`1">
            <summary>
            Сравнение объектов на равенство с использованием указанных делегатов.
            </summary>
            <typeparam name="T">Тип сравниваемых объектов.</typeparam>
        </member>
        <member name="F:CommonLibrary.CustomEqualityComparer`1.equalsFunc">
            <summary>
            Делегат для вычисления равенства объектов.
            </summary>
        </member>
        <member name="F:CommonLibrary.CustomEqualityComparer`1.hashCodeFunc">
            <summary>
            Делегат для вычисления хэш-кода объектов.
            </summary>
        </member>
        <member name="M:CommonLibrary.CustomEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Конструктор.
            </summary>
            <param name="equalsFunc">Делегат для вычисления равенства объектов.</param>
            <param name="hashCodeFunc">Делегат для вычисления хэш-кода объектов.</param>
        </member>
        <member name="T:CommonLibrary.MainAndAdditionalTextComparer`1">
            <summary>
            Компаратор для сравнения объектов с основным и дополнительным текстом согласно шаблону поиска.
            </summary>
            <typeparam name="T">Тип сравниваемых объектов.</typeparam>
        </member>
        <member name="F:CommonLibrary.MainAndAdditionalTextComparer`1.matchCache">
            <summary>
            Кэш соответствий: "регулярка" - ("строка", "позиции совпадений").
            </summary>
        </member>
        <member name="F:CommonLibrary.MainAndAdditionalTextComparer`1.containsMetricsCache">
            <summary>
            Кэш соответствий по "содержит": ("строка", "условие поиска") - "метрика".
            </summary>
        </member>
        <member name="F:CommonLibrary.MainAndAdditionalTextComparer`1.wordStartingWithMetricsCache">
            <summary>
            Кэш соответствий по "с началу строки": ("строка", "условие поиска") - "метрика".
            </summary>
        </member>
        <member name="P:CommonLibrary.MainAndAdditionalTextComparer`1.WordStartingWithRegularExpressions">
            <summary>
            Регулярные выражения "слово начинается" для каждой части шаблона.
            </summary>
        </member>
        <member name="P:CommonLibrary.MainAndAdditionalTextComparer`1.ContainsRegularExpressions">
            <summary>
            Регулярные выражения "содержит" для каждой части шаблона.
            </summary>
        </member>
        <member name="M:CommonLibrary.MainAndAdditionalTextComparer`1.CompareByPriority(`0,`0)">
            <summary>
            Сравнить элементы с учетом приоритетов при отсутствии фильтра.
            </summary>
            <param name="x">Первый элемент.</param>
            <param name="y">Второй элемент.</param>
            <returns>Результат сравнения.</returns>
        </member>
        <member name="M:CommonLibrary.MainAndAdditionalTextComparer`1.Reset(System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.Regex},System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.Regex})">
            <summary>
            Установить состояние компаратора согласно шаблонам поиска.
            </summary>
            <param name="wordStartingWithRegularExpressions">Регулярные выражения "слово начинается" для каждой части шаблона.</param>
            <param name="containsRegularExpressions">Регулярные выражения "содержит" для каждой части шаблона.</param>
        </member>
        <member name="M:CommonLibrary.MainAndAdditionalTextComparer`1.GetMainTextMatchMetric(`0,CommonLibrary.SearchCondition)">
            <summary>
            Получить метрику соответствия объекта с основным текстом.
            </summary>
            <param name="item">Объект сравнения.</param>
            <param name="searchCondition">Условие поиска.</param>
            <returns>Метрика соответствия шаблона и строки.</returns>
        </member>
        <member name="M:CommonLibrary.MainAndAdditionalTextComparer`1.GetMainAndAdditionalTextMatchMetric(`0,CommonLibrary.SearchCondition)">
            <summary>
            Получить метрику соответствия объекта с основным и дополнительным текстом.
            </summary>
            <param name="item">Объект сравнения.</param>
            <param name="searchCondition">Условие поиска.</param>
            <returns>Метрика соответствия шаблона и строки.</returns>
        </member>
        <member name="M:CommonLibrary.MainAndAdditionalTextComparer`1.GetMatchMetric(System.String,System.Nullable{System.Int32},CommonLibrary.SearchCondition)">
            <summary>
            Получить метрику соответствия шаблона и строки.
            </summary>
            <param name="value">Значение.</param>
            <param name="priority">Приоритет.</param>
            <param name="searchCondition">Условие поиска.</param>
            <returns>Метрика соответствия шаблона и строки.</returns>
        </member>
        <member name="M:CommonLibrary.MainAndAdditionalTextComparer`1.ComputeMatchMetric(System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.Regex})">
            <summary>
            Вычислить метрику соответствия шаблона и строки.
            </summary>
            <param name="value">Значение.</param>
            <param name="priority">Приоритет.</param>
            <param name="regularExpressions">Коллекция регулярных выражений.</param>
            <returns>Метрика соответствия шаблона и строки.</returns>
        </member>
        <member name="M:CommonLibrary.MainAndAdditionalTextComparer`1.HasUnmatchedWords(System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Признак, что есть хотя бы одно слово, не соответствующее ни одной части шаблона.
            </summary>
            <param name="value">Проверяемая строка.</param>
            <param name="matchIndexes">Набор индексов совпадений частей шаблона.</param>
            <returns>Результат проверки.</returns>
        </member>
        <member name="M:CommonLibrary.MainAndAdditionalTextComparer`1.GetMatchIndexes(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Получить индексы соответствий.
            </summary>
            <param name="regex">Регулярное выражение.</param>
            <param name="value">Значение.</param>
            <returns>Массив индексов.</returns>
        </member>
        <member name="T:CommonLibrary.MatchMetric">
            <summary>
            Метрика соответствия шаблона и строки.
            </summary>
        </member>
        <member name="P:CommonLibrary.MatchMetric.MatchStartIndexes">
            <summary>
            Позиции первых совпадений.
            </summary>
        </member>
        <member name="P:CommonLibrary.MatchMetric.OrderMetric">
            <summary>
            Метрика соответствия порядка.
            </summary>
        </member>
        <member name="P:CommonLibrary.MatchMetric.PositiveFirstMatchesCount">
            <summary>
            Количество найденных первых совпадений.
            </summary>
        </member>
        <member name="P:CommonLibrary.MatchMetric.MatchFromStart">
            <summary>
            Признак, что совпадение с начала строки.
            </summary>
        </member>
        <member name="P:CommonLibrary.MatchMetric.HasUnmatchedWords">
            <summary>
            Признак, что есть хотя бы одно слово, не соответствующее ни одной части шаблона.
            </summary>
        </member>
        <member name="P:CommonLibrary.MatchMetric.Priority">
            <summary>
            Приоритет согласно статистики.
            </summary>
        </member>
        <member name="M:CommonLibrary.MatchMetric.Compare(CommonLibrary.MatchMetric,CommonLibrary.MatchMetric,System.Boolean)">
            <summary>
            Сравнить метрики.
            </summary>
            <param name="metric1">Первая метрика.</param>
            <param name="metric2">Вторая метрика.</param>
            <param name="considerSecondarySubmetrics">Признак необходимости учета вторичных критериев.</param>
            <returns>Результат сравнения.</returns>
        </member>
        <member name="M:CommonLibrary.MatchMetric.Compare(CommonLibrary.MatchMetric,CommonLibrary.MatchMetric,CommonLibrary.MatchMetric,CommonLibrary.MatchMetric)">
            <summary>
            Сравнить метрики с учетом ведущих метрик.
            </summary>
            <param name="metric1">Первая метрика.</param>
            <param name="metric2">Вторая метрика.</param>
            <param name="masterMetric1">Первая ведущая метрика.</param>
            <param name="masterMetric2">Вторая ведущая метрика.</param>
            <returns>Результат сравнения.</returns>
        </member>
        <member name="M:CommonLibrary.MatchMetric.FilterByMaster(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Отфильтровать по ведущим метрикам.
            </summary>
            <param name="original">Изначальная коллекция индексов.</param>
            <param name="master">Коллекция ведущих индексов.</param>
            <returns>Отфильтрованная коллекция индексов.</returns>
        </member>
        <member name="M:CommonLibrary.MatchMetric.GetOrderMetric(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Получить метрику соответствия порядка.
            </summary>
            <param name="indexes">Коллекция индексов.</param>
            <returns>Метрика соответствия порядка.</returns>
        </member>
        <member name="T:CommonLibrary.ReferenceEqualityComparer`1">
            <summary>
            Сравнение ссылок объектов на равенство.
            </summary>
            <typeparam name="T">Тип сравниваемых объектов.</typeparam>
        </member>
        <member name="T:CommonLibrary.TypesByHierarchyComparer">
            <summary>
            Компаратор типов по расположению в иерархии типов при движении снизу вверх по дереву.
            </summary>
        </member>
        <member name="T:CommonLibrary.DateTimeFormat">
            <summary>
            Форматы даты-времени для отображения, редактирования и сохранения.
            </summary>
        </member>
        <member name="F:CommonLibrary.DateTimeFormat.DateTime">
            <summary>
            Дата и время с точностью до секунды.
            </summary>
        </member>
        <member name="F:CommonLibrary.DateTimeFormat.Time">
            <summary>
            Только время (без даты).
            </summary>
        </member>
        <member name="F:CommonLibrary.DateTimeFormat.Date">
            <summary>
            Только дата (без времени).
            </summary>
        </member>
        <member name="F:CommonLibrary.DateTimeFormat.MonthYear">
            <summary>
            Месяц-год.
            </summary>
        </member>
        <member name="F:CommonLibrary.DateTimeFormat.Year">
            <summary>
            Год.
            </summary>
        </member>
        <member name="F:CommonLibrary.DateTimeFormat.DateTimeWithMilliseconds">
            <summary>
            Дата и время с точностью до миллисекунды.
            </summary>
        </member>
        <member name="T:CommonLibrary.DateTimeEditorFormat">
            <summary>
            Форматы даты-времени для использования в редакторах.
            </summary>
        </member>
        <member name="P:CommonLibrary.DateTimeEditorFormat.DateTime">
            <summary>
            Формат маски для отображения даты и времени с точностью до секунды.
            </summary>
        </member>
        <member name="P:CommonLibrary.DateTimeEditorFormat.Time">
            <summary>
            Формат маски для отображения только времени (без даты).
            </summary>
        </member>
        <member name="P:CommonLibrary.DateTimeEditorFormat.Date">
            <summary>
            Формат маски для отображения только даты (без времени).
            </summary>
        </member>
        <member name="P:CommonLibrary.DateTimeEditorFormat.MonthYear">
            <summary>
            Формат маски для отображения только месяца и года (без дня).
            </summary>
        </member>
        <member name="P:CommonLibrary.DateTimeEditorFormat.Year">
            <summary>
            Формат маски для отображения только года.
            </summary>
        </member>
        <member name="F:CommonLibrary.DateTimeEditorFormat.dateTimeFormats">
            <summary>
            Соответствие форматов DateTimeFormat и DateTimeEditorFormat.
            </summary>
        </member>
        <member name="M:CommonLibrary.DateTimeEditorFormat.ConvertBackWithoutTime(CommonLibrary.DateTimeFormat)">
            <summary>
            Получить формат даты без времени.
            </summary>
            <param name="dateTimeFormat">Формат даты.</param>
            <returns>Формат даты.</returns>
        </member>
        <member name="M:CommonLibrary.DateTimeEditorFormat.Convert(System.String)">
            <summary>
            Преобразовать строковый формат даты/времени к перечислимому формату.
            </summary>
            <param name="editorFormat">Строковый формат даты/времени.</param>
            <returns>Перечислимый формат даты/времени.</returns>
        </member>
        <member name="M:CommonLibrary.DateTimeEditorFormat.ConvertBack(CommonLibrary.DateTimeFormat)">
            <summary>
            Преобразовать перечислимый формат даты/времени к строковому формату.
            </summary>
            <param name="format">Перечислимый формат даты/времени.</param>
            <returns>Строковый формат даты/времени.</returns>
        </member>
        <member name="T:CommonLibrary.CaseException">
            <summary>
            Класс для исключений библиотеки Padeg.dll.
            </summary>
        </member>
        <member name="P:CommonLibrary.CaseException.ErrorCode">
            <summary>
            Код ошибки.
            </summary>
        </member>
        <member name="T:CommonLibrary.ConversionResultValidator">
            <summary>
            Валидатор операции склонения по падежу.
            </summary>
        </member>
        <member name="M:CommonLibrary.ConversionResultValidator.Validate(System.Int32)">
            <summary>
            Проверить код выполнения операции.
            </summary>
            <param name="resultCode">Код выполнения операции.</param>
        </member>
        <member name="T:CommonLibrary.DeclensionCase">
            <summary>
            Падежи русского языка.
            </summary>
        </member>
        <member name="F:CommonLibrary.DeclensionCase.NotDefined">
            <summary>
            Падеж не определен.
            </summary>
        </member>
        <member name="F:CommonLibrary.DeclensionCase.Nominative">
            <summary>
            Именительный падеж (Кто? Что?).
            </summary>
        </member>
        <member name="F:CommonLibrary.DeclensionCase.Genitive">
            <summary>
            Родительный падеж (Кого? Чего?).
            </summary>
        </member>
        <member name="F:CommonLibrary.DeclensionCase.Dative">
            <summary>
            Дательный падеж (Кому? Чему?).
            </summary>
        </member>
        <member name="F:CommonLibrary.DeclensionCase.Accusative">
            <summary>
            Винительный падеж (Кого? Что?).
            </summary>
        </member>
        <member name="F:CommonLibrary.DeclensionCase.Ablative">
            <summary>
            Творительный падеж (Кем? Чем?).
            </summary>
        </member>
        <member name="F:CommonLibrary.DeclensionCase.Prepositional">
            <summary>
            Предложный падеж (О ком? О чём?).
            </summary>
        </member>
        <member name="T:CommonLibrary.Gender">
            <summary>
            Род.
            </summary>
        </member>
        <member name="F:CommonLibrary.Gender.NotDefined">
            <summary>
            Род неопределен.
            </summary>
        </member>
        <member name="F:CommonLibrary.Gender.Feminine">
            <summary>
            Женский род.
            </summary>
        </member>
        <member name="F:CommonLibrary.Gender.Masculine">
            <summary>
            Мужской род.
            </summary>
        </member>
        <member name="T:CommonLibrary.Declension.IPadegImpl">
            <summary>
            Реализация падежа.
            </summary>
        </member>
        <member name="P:CommonLibrary.Declension.IPadegImpl.LibraryName">
            <summary>
            Наименование внешней библиотеки для склонения.
            </summary>
        </member>
        <member name="M:CommonLibrary.Declension.IPadegImpl.GetGender(System.String)">
            <summary>
            Получить пол человека по отчеству.
            </summary>
            <param name="patronymic">Отчество.</param>
            <returns>Пол.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.IPadegImpl.GetDeclensionFio(CommonLibrary.PersonFullName,CommonLibrary.Gender,CommonLibrary.DeclensionCase)">
            <summary>
            Получить ФИО в указанном падеже.
            </summary>
            <param name="personFullName">ФИО персоны.</param>
            <param name="gender">Пол человека (Ж = 0, М = 1).</param>
            <param name="declensionCase">Падеж, в который нужно перевести ФИО.</param>
            <returns>ФИО в указанном падеже.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.IPadegImpl.GetDeclensionFullAppointment(System.String,System.String,CommonLibrary.DeclensionCase)">
            <summary>
            Получить должность с подразделением в указанном падеже.
            </summary>
            <param name="appointment">Название должности в именительном падеже.</param>
            <param name="department">Название подразделения в именительном падеже.</param>
            <param name="declensionCase">Падеж, в который нужно перевести должность с подразделением.</param>
            <returns>Должность с подразделением в указанном падеже.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.IPadegImpl.GetDeclensionAppointment(System.String,CommonLibrary.DeclensionCase)">
            <summary>
            Получить должность в указанном падеже.
            </summary>
            <param name="appointment">Название должности в именительном падеже.</param>
            <param name="declensionCase">Падеж, в который нужно перевести должность.</param>
            <returns>Наименование должности в указанном падеже.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.IPadegImpl.GetDeclensionDepartment(System.String,CommonLibrary.DeclensionCase)">
            <summary>
            Получить подразделение в указанном падеже.
            </summary>
            <param name="department">Название подразделения.</param>
            <param name="declensionCase">Падеж, в который нужно перевести подразделение.</param>
            <returns>Подразделение в указанном падеже.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.IPadegImpl.GetFioNominativeCase(CommonLibrary.PersonFullName)">
            <summary>
            Получить ФИО в именительном падеже.
            </summary>
            <param name="personFullName">ФИО персоны.</param>
            <returns>ФИО в именительном падеже.</returns>
        </member>
        <member name="T:CommonLibrary.Declension.NativeMethodsUnix">
            <summary>
            Обертка нативных методов для unix-библиотеки libPadeg.so.
            </summary>
        </member>
        <member name="M:CommonLibrary.Declension.NativeMethodsUnix.GetFioPadeg(System.String,System.String,System.String,System.Int32,System.Int32,System.IntPtr@,System.Int32@)">
            <summary>
            Просклонять фамилию, имя, отчество.
            </summary>
            <param name="surname">Фамилия в именительном падеже.</param>
            <param name="name">Имя в именительном падеже.</param>
            <param name="patronymic">Отчество в именительном падеже.</param>
            <param name="sex">Пол (1 - мужчина, 0 - женщина).</param>
            <param name="padeg">Падеж.</param>
            <param name="result">Указатель на результат склонения.</param>
            <param name="resultLength">Длина выделяемой памяти под результат склонения.</param>
            <returns>Код ошибки.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.NativeMethodsUnix.GetFioPadegFsas(System.String,System.Int32,System.IntPtr@,System.Int32@)">
            <summary>
            Просклонять фамилию, имя, отчество с автоматическим определением пола.
            </summary>
            <param name="fullName">Фамилия, имя, отчество.</param>
            <param name="padeg">Падеж.</param>
            <param name="result">Указатель на результат склонения.</param>
            <param name="resultLength">Длина выделяемой памяти под результат склонения.</param>
            <returns>Код ошибки.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.NativeMethodsUnix.GetSex(System.String)">
            <summary>
            Определить пол человека по отчеству.
            </summary>
            <param name="patronymic">Отчество.</param>
            <returns>Пол человека: 1 - мужской, 0 - женский.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.NativeMethodsUnix.SetDictionary(System.String)">
            <summary>
            Установить словарь исключений.
            </summary>
            <param name="fileName">Путь до словаря исключений.</param>
            <returns>Результат установки словаря - true, если удалось установить словарь, иначе - false.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.NativeMethodsUnix.GetOfficePadeg(System.String,System.Int32,System.IntPtr@,System.Int32@)">
            <summary>
            Просклонять подразделение.
            </summary>
            <param name="officeName">Подразделение в именительном падеже.</param>
            <param name="padeg">Падеж.</param>
            <param name="result">Указатель на результат склонения.</param>
            <param name="resultLength">Длина выделяемой памяти под результат склонения.</param>
            <returns>Код ошибки.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.NativeMethodsUnix.GetAppointmentPadeg(System.String,System.Int32,System.IntPtr@,System.Int32@)">
            <summary>
            Просклонять должность.
            </summary>
            <param name="appointment">Должность в именительном падеже.</param>
            <param name="padeg">Падеж.</param>
            <param name="result">Указатель на результат склонения.</param>
            <param name="resultLength">Длина выделяемой памяти под результат склонения.</param>
            <returns>Код ошибки.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.NativeMethodsUnix.GetFullAppointmentPadeg(System.String,System.String,System.Int32,System.IntPtr@,System.Int32@)">
            <summary>
            Просклонять должность и подразделение.
            </summary>
            <param name="appointment">Должность в именительном падеже.</param>
            <param name="department">Подразделениев именительном падеже.</param>
            <param name="padeg">Падеж.</param>
            <param name="result">Указатель на результат склонения.</param>
            <param name="resultLength">Длина выделяемой памяти под результат склонения.</param>
            <returns>Код ошибки.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.NativeMethodsUnix.GetNominativePadeg(System.String,System.IntPtr@,System.Int32@)">
            <summary>
            Восстановить именительный падеж.
            </summary>
            <param name="personFullName">Фамилия, имя, отчество в любом падеже.</param>
            <param name="result">Указатель на результат склонения.</param>
            <param name="resultLength">Длина выделяемой памяти под результат склонения.</param>
            <returns>Код ошибки.</returns>
        </member>
        <member name="T:CommonLibrary.Declension.NativeMethodsWindows">
            <summary>
            Обертка для нативных вызовов библиотеки Padeg.dll.
            </summary>
        </member>
        <member name="M:CommonLibrary.Declension.NativeMethodsWindows.GetPersonFullNameFromPadeg(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            Просклонять фамилию, имя, отчество.
            </summary>
            <param name="surname">Фамилия в именительном падеже.</param>
            <param name="name">Имя в именительном падеже.</param>
            <param name="patronymic">Отчество в именительном падеже.</param>
            <param name="sex">Пол (1 - мужчина, 0 - женщина).</param>
            <param name="padeg">Падеж.</param>
            <param name="result">Результат склонения фамилии, имени, отчества.</param>
            <param name="resultLength">Размер памяти для результата.</param>
            <returns>Фамилия, имя, отчество в заданном падеже.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.NativeMethodsWindows.GetPersonFullNameFromPadeg(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            Просклонять фамилию, имя, отчество с автоматическим определением пола.
            </summary>
            <param name="surname">Фамилия в именительном падеже.</param>
            <param name="name">Имя в именительном падеже.</param>
            <param name="patronymic">Отчество в именительном падеже.</param>
            <param name="padeg">Падеж.</param>
            <param name="result">Результат склонения фамилии, имени, отчества.</param>
            <param name="resultLength">Размер памяти для результата.</param>
            <returns>Код выполнения операции.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.NativeMethodsWindows.ConvertBackToNominativePadeg(System.IntPtr,System.IntPtr,System.Int32@)">
            <summary>
            Восстановить именительный падеж.
            </summary>
            <param name="surnameNamePatronymic">Фамилия, имя, отчество в любом падеже.</param>
            <param name="result">Результат восстановления именительного падежа.</param>
            <param name="resultLength">Размер памяти для результата.</param>
            <returns>Код выполнения операции.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.NativeMethodsWindows.GetAppointmentFromPadeg(System.IntPtr,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            Просклонять должность.
            </summary>
            <param name="appointment">Должность в именительном падеже.</param>
            <param name="padeg">Падеж.</param>
            <param name="result">Результата склонения должности. </param>
            <param name="resultLength">Размер памяти для результата.</param>
            <returns>Код выполнения операции.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.NativeMethodsWindows.GetFullJobTitleFromPadeg(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            Просклонять должность и подразделение.
            </summary>
            <param name="appointment">Должность в именительном падеже.</param>
            <param name="office">Подразделение в именительном падеже.</param>
            <param name="padeg">Падеж.</param>
            <param name="result">Результат склонения должности и подразделения.</param>
            <param name="resultLength">Размер памяти для результата.</param>
            <returns>Код выполнения операции.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.NativeMethodsWindows.GetDepartmentFromPadeg(System.IntPtr,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            Просклонять должность.
            </summary>
            <param name="office">Должность в именительном падеже.</param>
            <param name="padeg">Падеж.</param>
            <param name="result">Результат склонения должности.</param>
            <param name="resultLength">Размер памяти для результата.</param>
            <returns>Код выполнения операции.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.NativeMethodsWindows.GetSexFromPadeg(System.IntPtr)">
            <summary>
            Отпределить пол человека по отчеству.
            </summary>
            <param name="patronymic">Отчество.</param>
            <returns>Пол человека: 1 - мужской, 0 - женский.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.NativeMethodsWindows.SetDictionary(System.String)">
            <summary>
            Установить словарь исключений.
            </summary>
            <param name="fileName">Путь до словаря исключений.</param>
            <returns>Код выполнения операции: 1 - успешно, 0 - не успешно.</returns>
        </member>
        <member name="T:CommonLibrary.Declension.PadegUnixImpl">
            <summary>
            Реализация для Unix систем.
            </summary>
        </member>
        <member name="F:CommonLibrary.Declension.PadegUnixImpl.MaxResultStringBufferSize">
            <summary>
            Размер буфера данных.
            </summary>
        </member>
        <member name="F:CommonLibrary.Declension.PadegUnixImpl.log">
            <summary>
            Логгер.
            </summary>
        </member>
        <member name="M:CommonLibrary.Declension.PadegUnixImpl.IntPtrToString(System.IntPtr)">
            <summary>
            Скопировать строку из неуправляемой памяти в управляемую по указателю.
            </summary>
            <param name="value">Указатель на строку.</param>
            <returns>Значение строки из неуправляемой памяти.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.PadegUnixImpl.InitExceptionDictionary(System.String)">
            <summary>
            Проинициализировать словарь исключений.
            </summary>
            <param name="exceptionDictionaryPath">Путь до файла исключений.</param>
        </member>
        <member name="T:CommonLibrary.Declension.PadegUtils">
            <summary>
            Утилиты для работы с падежами.
            </summary>
        </member>
        <member name="M:CommonLibrary.Declension.PadegUtils.FreeIntPtr(System.IntPtr[])">
            <summary>
            Освободить неуправляемую память по заданным указателям.
            </summary>
            <param name="ptrs">Коллекция указателей на блоки памяти в неуправляемой куче.</param>
        </member>
        <member name="T:CommonLibrary.Declension.PadegWindowsImpl">
            <summary>
            Реализация для ОС Windows.
            </summary>
        </member>
        <member name="F:CommonLibrary.Declension.PadegWindowsImpl.MaxResultStringBufferSize">
            <summary>
            Размер буфера данных.
            </summary>
        </member>
        <member name="F:CommonLibrary.Declension.PadegWindowsImpl.log">
            <summary>
            Логгер.
            </summary>
        </member>
        <member name="M:CommonLibrary.Declension.PadegWindowsImpl.StringToIntPtr(System.String)">
            <summary>
            Скопировать строку из управляемой памяти в неуправляемую и получить указатель на нее.
            </summary>
            <param name="value">Значение строки.</param>
            <returns>Указатель на строку.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.PadegWindowsImpl.IntPtrToString(System.IntPtr)">
            <summary>
            Скопировать строку из неуправляемой памяти в управляемую по указателю.
            </summary>
            <param name="value">Указатель на строку.</param>
            <returns>Значение строки из неуправляемой памяти.</returns>
        </member>
        <member name="M:CommonLibrary.Declension.PadegWindowsImpl.InitExceptionDictionary(System.String)">
            <summary>
            Проинициализировать словарь исключений.
            </summary>
            <param name="path">Путь до файла исключений.</param>
        </member>
        <member name="M:CommonLibrary.Declension.PadegWindowsImpl.ProcessResult(System.Int32,System.IntPtr[])">
            <summary>
            Обработать результат вызова неуправляемого кода.
            </summary>
            <param name="resultCode">Результат вызова неуправляемого кода.</param>
            <param name="intptrs">Массив указателей на результирующие строки.</param>
            <returns>Обработанная строка.</returns>
        </member>
        <member name="T:CommonLibrary.Declension.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CommonLibrary.Declension.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CommonLibrary.Declension.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CommonLibrary.Declension.Resources.InvalidCase">
            <summary>
              Looks up a localized string similar to Invalid case value.
            </summary>
        </member>
        <member name="P:CommonLibrary.Declension.Resources.InvalidGender">
            <summary>
              Looks up a localized string similar to Invalid gender value.
            </summary>
        </member>
        <member name="P:CommonLibrary.Declension.Resources.NameBufferOverflow">
            <summary>
              Looks up a localized string similar to &quot;First name&quot; value buffer overflow.
            </summary>
        </member>
        <member name="P:CommonLibrary.Declension.Resources.PatronymicBufferOverflow">
            <summary>
              Looks up a localized string similar to &quot;Patronym&quot; value buffer overflow.
            </summary>
        </member>
        <member name="P:CommonLibrary.Declension.Resources.PersonalDataBufferOverflow">
            <summary>
              Looks up a localized string similar to &quot;Personal data&quot; buffer overflow.
            </summary>
        </member>
        <member name="P:CommonLibrary.Declension.Resources.SurnameBufferOverflow">
            <summary>
              Looks up a localized string similar to &quot;Last name&quot; value buffer overflow.
            </summary>
        </member>
        <member name="T:CommonLibrary.Padeg">
            <summary>
            Класс-обертка для API Padeg.dll.
            </summary>
        </member>
        <member name="F:CommonLibrary.Padeg.ExceptionsFileName">
            <summary>
            Имя файла с исключениями.
            </summary>
        </member>
        <member name="F:CommonLibrary.Padeg.padegIml">
            <summary>
            Имплементация IPadegImpl.
            </summary>
        </member>
        <member name="F:CommonLibrary.Padeg.log">
            <summary>
            Логгер.
            </summary>
        </member>
        <member name="F:CommonLibrary.Padeg.irregularDeclensions">
            <summary>
            Словарь исключений при склонении.
            </summary>
            <remarks>Ключом является пара (Существительное в именительном падеже, Падеж). В качестве значения - существительное в указанном падеже.</remarks>
        </member>
        <member name="M:CommonLibrary.Padeg.ConvertPersonFullNameToTargetDeclension(CommonLibrary.PersonFullName,CommonLibrary.DeclensionCase)">
            <summary>
            Просклонять персональные данные в требуемом падеже.
            </summary>
            <param name="personFullName">Персональные данные.</param>
            <param name="declensionCase">Падеж.</param>
            <returns>Результат склонения.</returns>
        </member>
        <member name="M:CommonLibrary.Padeg.ConvertPersonFullNameToTargetDeclension(CommonLibrary.PersonFullName,CommonLibrary.DeclensionCase,CommonLibrary.Gender)">
            <summary>
            Просклонять персональные данные в требуемом падеже.
            </summary>
            <param name="personFullName">Персональные данные.</param>
            <param name="declensionCase">Падеж.</param>
            <param name="gender">Пол.</param>
            <returns>Результат склонения.</returns>
        </member>
        <member name="M:CommonLibrary.Padeg.ToNominativeDeclension(CommonLibrary.PersonFullName)">
            <summary>
            Восстановить именительный падеж.
            </summary>
            <param name="personFullName">Персональные данные.</param>
            <returns>ФИО в именительном падеже.</returns>
        </member>
        <member name="M:CommonLibrary.Padeg.ConvertJobTitleToTargetDeclension(System.String,CommonLibrary.DeclensionCase)">
            <summary>
            Просклонять название должности.
            </summary>
            <param name="jobTitle">Название должности в именительном падеже.</param>
            <param name="declensionCase">Падеж.</param>
            <returns>Результат склонения.</returns>
        </member>
        <member name="M:CommonLibrary.Padeg.ConvertJobTitleToTargetDeclension(System.String,System.String,CommonLibrary.DeclensionCase)">
            <summary>
            Просклонять должность в требуемом падеже с учетом подразделения.
            </summary>
            <param name="jobTitle">Название должности.</param>
            <param name="departmentTitle">Название подразделения.</param>
            <param name="declensionCase">Падеж.</param>
            <returns>Результат склонения.</returns>
        </member>
        <member name="M:CommonLibrary.Padeg.ConvertDepartmentTitleToTargetDeclension(System.String,CommonLibrary.DeclensionCase)">
            <summary>
            Просклонять название подразделения в требуемом падеже.
            </summary>
            <param name="departmentTitle">Название подразделения.</param>
            <param name="declensionCase">Падеж.</param>
            <returns>Результат склонения.</returns>
        </member>
        <member name="M:CommonLibrary.Padeg.ConvertCurrencyNameToTargetDeclension(System.String,CommonLibrary.DeclensionCase)">
            <summary>
            Просклонять название валюты в требуемом падеже.
            </summary>
            <param name="currencyName">Название валюты.</param>
            <param name="declensionCase">Падеж.</param>
            <returns>Название валюты в указанном падеже.</returns>
        </member>
        <member name="M:CommonLibrary.Padeg.DefineGender(System.String)">
            <summary>
            Позволяет определить род ФИО. Допускается параметром передавать не только отчество, но и ФИО
            целиком. Главное, чтобы в передаваемой строке последним было отчество.
            </summary>
            <param name="patronymic">Отчество.</param>
            <returns>Род.</returns>
        </member>
        <member name="M:CommonLibrary.Padeg.DefineDeclensionCase(System.String)">
            <summary>
            Получить по известному Ф.И.О. его падеж.
            </summary>
            <param name="surnameNamePatronymic">ФИО.</param>
            <returns>Падеж.</returns>
        </member>
        <member name="M:CommonLibrary.Padeg.SplitPersonFullName(System.String)">
            <summary>
            Выделить из заданного ФИО его части.
            </summary>
            <param name="surnameNamePatronymic">ФИО.</param>
            <returns>Класс-аггрегатор персональных данных.</returns>
        </member>
        <member name="M:CommonLibrary.Padeg.CheckAvailableConversion(CommonLibrary.Gender,CommonLibrary.PersonFullName)">
            <summary>
            Проверить, можно ли просклонять указанные персональные данные.
            </summary>
            <param name="gender">Пол.</param>
            <param name="personFullName">Персональные данные.</param>
            <returns>Результат проверки, true - если конвертация возможна.</returns>
        </member>
        <member name="M:CommonLibrary.Padeg.CheckDeclensionCase(CommonLibrary.DeclensionCase)">
            <summary>
            Проверить корректность заданного падежа.
            </summary>
            <param name="declensionCase">Проверяемый падеж.</param>
        </member>
        <member name="M:CommonLibrary.Padeg.CreatePadegImpl">
            <summary>
            Создать реализацию падежа для текущей платформы.
            </summary>
            <returns>Реализация падежа.</returns>
        </member>
        <member name="M:CommonLibrary.Padeg.AddIrregular(System.String,CommonLibrary.DeclensionCase,System.String)">
            <summary>
            Добавить слово в исключения при склонении.
            </summary>
            <param name="nominativeValue">Существительное в именительном падеже.</param>
            <param name="declensionCase">Падеж.</param>
            <param name="declensedValue">Существительное в указанном падеже.</param>
        </member>
        <member name="M:CommonLibrary.Padeg.HasIrregular(System.String,CommonLibrary.DeclensionCase)">
            <summary>
            Проверить существует ли исключение для указанного значения в указанном падеже.
            </summary>
            <param name="value">Склоняемое значение.</param>
            <param name="declensionCase">Склонение.</param>
            <returns>Ключ словаря исключений если исключение есть, иначе - null.</returns>
        </member>
        <member name="M:CommonLibrary.Padeg.TryConvertInccorrectPersonFullName(CommonLibrary.PersonFullName,CommonLibrary.DeclensionCase,CommonLibrary.Gender,CommonLibrary.PersonFullName@)">
            <summary>
            Попытаться просклонять некорректные персональные данные в требуемом падеже.
            </summary>
            <param name="personFullName">Персональные данные.</param>
            <param name="declensionCase">Требуемый падеж.</param>
            <param name="gender">Пол.</param>
            <param name="result">Результат склонения.</param>
            <returns>True, если данным потребовалась спец. обработка, иначе false.</returns>
        </member>
        <member name="M:CommonLibrary.Padeg.#cctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:CommonLibrary.PersonFullNameDisplayFormat">
            <summary>
             Формат отображения персональных данных.
            </summary>
        </member>
        <member name="F:CommonLibrary.PersonFullNameDisplayFormat.Full">
            <summary>
            Фамилия, имя и отчество.
            </summary>
        </member>
        <member name="F:CommonLibrary.PersonFullNameDisplayFormat.LastNameAndInitials">
            <summary>
            Фамилия И.О.
            </summary>
        </member>
        <member name="F:CommonLibrary.PersonFullNameDisplayFormat.InitialsAndLastName">
            <summary>
            И.О. Фамилия.
            </summary>
        </member>
        <member name="F:CommonLibrary.PersonFullNameDisplayFormat.Undefined">
            <summary>
            Неопределённый формат.
            </summary>
        </member>
        <member name="T:CommonLibrary.PersonFullName">
            <summary>
            Персональные данные человека.
            </summary>
        </member>
        <member name="F:CommonLibrary.PersonFullName.InitialsPeriod">
            <summary>
            Точка в конце инициалов.
            </summary>
        </member>
        <member name="F:CommonLibrary.PersonFullName.Hyphen">
            <summary>
            Дефис (соединитель внутри одной составной части ФИО).
            </summary>
        </member>
        <member name="F:CommonLibrary.PersonFullName.AllowedNonLetterChars">
            <summary>
            Допустимые символы в имени, не являющиеся буквой.
            </summary>
        </member>
        <member name="F:CommonLibrary.PersonFullName.initialsRegex">
            <summary>
            Регулярное выражение для поиска инициалов внутри ФИО.
            </summary>
        </member>
        <member name="P:CommonLibrary.PersonFullName.LastName">
            <summary>
            Фамилия.
            </summary>
        </member>
        <member name="P:CommonLibrary.PersonFullName.FirstName">
            <summary>
            Имя.
            </summary>
        </member>
        <member name="P:CommonLibrary.PersonFullName.MiddleName">
            <summary>
            Отчество.
            </summary>
        </member>
        <member name="P:CommonLibrary.PersonFullName.DisplayFormat">
            <summary>
            Формат отображения данных.
            </summary>
        </member>
        <member name="M:CommonLibrary.PersonFullName.Create(System.String,System.String,System.String,CommonLibrary.PersonFullNameDisplayFormat)">
            <summary>
            Создать персональные данные.
            </summary>
            <param name="lastName">Фамилия.</param>
            <param name="firstName">Имя.</param>
            <param name="middleName">Отчество.</param>
            <param name="displayFormat">Формат отображения.</param>
            <returns>Персональные данные.</returns>
        </member>
        <member name="M:CommonLibrary.PersonFullName.CreateUndefined(System.String)">
            <summary>
            Создать персональные данные, который имеют неопределённый формат (возможно, не представляют собой ФИО).
            </summary>
            <param name="personalData">Строковое представление персональных данных.</param>
            <returns>Персональные данные неопределённого формата.</returns>
        </member>
        <member name="M:CommonLibrary.PersonFullName.Create(System.String,System.String,System.String)">
            <summary>
            Создать персональные данные с форматом отображения по-умолчанию.
            </summary>
            <param name="lastName">Фамилия.</param>
            <param name="firstName">Имя.</param>
            <param name="middleName">Отчество.</param>
            <returns>Персональные данные.</returns>
        </member>
        <member name="M:CommonLibrary.PersonFullName.TryParse(System.String,CommonLibrary.PersonFullName@)">
            <summary>
            Попытаться распарсить персональные данные из строки.
            Предполагается, что они записаны в формате "Фамилия Имя Отчество".
            </summary>
            <param name="value">Строка с ФИО.</param>
            <param name="personFullName">Персональные данные.</param>
            <returns>True - если удалось распарсить, false - если не удалось.</returns>
        </member>
        <member name="M:CommonLibrary.PersonFullName.IsAllowedPersonalDataCharacter(System.Char)">
            <summary>
            Проверить, что символ является допустимым для записи в ФИО.
            </summary>
            <param name="character">Символ.</param>
            <returns>True - если символ может использоваться в записи ФИО.</returns>
        </member>
        <member name="M:CommonLibrary.PersonFullName.MiddleNameIsInitial">
            <summary>
            Проверить, что отчетсво указано в виде инициала с точкой или без.
            </summary>
            <returns>True, если отчество указано инициалом, иначе - false.</returns>
        </member>
        <member name="M:CommonLibrary.PersonFullName.GetInitials">
            <summary>
            Получить инициалы человека.
            </summary>
            <returns>Инициалы.</returns>
        </member>
        <member name="M:CommonLibrary.PersonFullName.IsInitialsAvailable">
            <summary>
            Проверить, можеть ли текущий набор персональных данных использовать для получения инициалов.
            </summary>
            <returns>Возможность взятия инициалов.</returns>
        </member>
        <member name="M:CommonLibrary.PersonFullName.ToString(CommonLibrary.PersonFullNameDisplayFormat)">
            <summary>
            Получить строковое представление с учетом формата отображения.
            </summary>
            <param name="displayFormat">Формат отображения персональных данных.</param>
            <returns>Строковое представление с учетом формата отображения.</returns>
        </member>
        <member name="M:CommonLibrary.PersonFullName.ConvertFirstCharsToUpper">
            <summary>
            Привести первые символы ФИО к верхнему регистру.
            </summary>
        </member>
        <member name="M:CommonLibrary.PersonFullName.GetFullName">
            <summary>
            Получить полное имя.
            </summary>
            <returns>Полное имя в формате "Фамилия Имя Отчество" одной строкой.</returns>
        </member>
        <member name="M:CommonLibrary.PersonFullName.IsAmbiguouslyPersonalDataPart(System.String)">
            <summary>
            Проверить является ли часть персональной информации неоднозначной для получения инициалов.
            </summary>
            <param name="personalDataPart">Персональные данные.</param>
            <returns>Результат, true - если часть персональной информации является неоднозначной.</returns>
            <remarks>Прим.: Двойные фамилии, двойные отчества или имена (араб.).</remarks>
        </member>
        <member name="M:CommonLibrary.PersonFullName.#ctor">
            <summary>
            Приватный конструктор.
            Напрямую экземпляры создавать нельзя.
            </summary>
        </member>
        <member name="T:CommonLibrary.Dependencies.Dependency">
            <summary>
            Класс для реализации паттерна Service Locator для уменьшения зависимостей модулей.
            </summary>
        </member>
        <member name="F:CommonLibrary.Dependencies.Dependency.DefaultUnitySectionName">
            <summary>
            Название секции, в файле конфигурации, с конфигурацией unity по умолчанию.
            </summary>
        </member>
        <member name="F:CommonLibrary.Dependencies.Dependency.DefaultContainerName">
            <summary>
            Название используемого контейнера для регистрации зависимостей по умолчанию.
            </summary>
        </member>
        <member name="P:CommonLibrary.Dependencies.Dependency.Container">
            <summary>
            Контейнер.
            </summary>
        </member>
        <member name="M:CommonLibrary.Dependencies.Dependency.ConfigureContainer">
            <summary>
            Использовать конфигурацию контейнера.
            </summary>
            <returns>Контейнер.</returns>
        </member>
        <member name="M:CommonLibrary.Dependencies.Dependency.Resolve(System.Type)">
            <summary>
            Создать экземпляр типа или подходящего для него наследника/имплементора.
            </summary>
            <param name="type">Тип параметра.</param>
            <returns>Объект требуемого типа.</returns>
        </member>
        <member name="M:CommonLibrary.Dependencies.Dependency.Resolve``1">
            <summary>
            Создать экземпляр типа или подходящего для него наследника/имплементора, заданного
            в конфигурационном файле.
            </summary>
            <typeparam name="T">Инстанцируемый тип.</typeparam>
        </member>
        <member name="M:CommonLibrary.Dependencies.Dependency.CanResolve``1">
            <summary>
            Проверить возможность разрешения типа.
            </summary>
            <typeparam name="T">Инстанциируемый тип.</typeparam>
            <returns>True - если разрешение возможно.</returns>
        </member>
        <member name="M:CommonLibrary.Dependencies.Dependency.TryResolve``1(``0@)">
            <summary>
            Попробовать разрешить тип.
            </summary>
            <param name="result">Экземпляр инстанциируемого типа либо null, если разрешить тип не удалось.</param>
            <typeparam name="T">Инстанциируемый тип.</typeparam>
            <returns>True - если разрешение типа возможно.</returns>
        </member>
        <member name="M:CommonLibrary.Dependencies.Dependency.Resolve``1(System.String)">
            <summary>
            Создать экземпляр типа или подходящего для него наследника/имплементора, заданного
            в конфигурационном файле.
            </summary>
            <typeparam name="T">Инстанцируемый тип.</typeparam>
            <param name="name">Имя инстанцируемого объекта.</param>
        </member>
        <member name="M:CommonLibrary.Dependencies.Dependency.ResolveAll(System.Type)">
            <summary>
            Создать выборку экземпляров типа или подходящего для него наследника/имплементора, заданного
            в конфигурационном файле.
            </summary>
            <param name="type">Инстацируемый тип.</param>
        </member>
        <member name="M:CommonLibrary.Dependencies.Dependency.ResolveAll``1">
            <summary>
            Создать выборку экземпляров типа или подходящего для него наследника/имплементора, заданного
            в конфигурационном файле.
            </summary>
            <typeparam name="T">Инстанцируемый тип.</typeparam>
        </member>
        <member name="M:CommonLibrary.Dependencies.Dependency.RegisterType``2">
            <summary>
            Зарегистрировать тип.
            </summary>
            <typeparam name="TFrom">Базовый тип.</typeparam>
            <typeparam name="TTo">Реализация.</typeparam>
        </member>
        <member name="M:CommonLibrary.Dependencies.Dependency.RegisterType``2(System.String)">
            <summary>
            Зарегистрировать тип.
            </summary>
            <param name="name">Имя зависимости.</param>
            <typeparam name="TFrom">Базовый тип.</typeparam>
            <typeparam name="TTo">Реализация.</typeparam>
        </member>
        <member name="M:CommonLibrary.Dependencies.Dependency.RegisterInstance``1(``0)">
            <summary>
            Зарегистрировать синглтон.
            </summary>
            <param name="instance">Экземпляр объекта.</param>
            <typeparam name="T">Тип объекта.</typeparam>
        </member>
        <member name="T:CommonLibrary.Dependencies.DependencyMap">
            <summary>
            Карта инъекции зависимостей.
            </summary>
        </member>
        <member name="P:CommonLibrary.Dependencies.DependencyMap.SourceType">
            <summary>
            Тип.
            </summary>
        </member>
        <member name="P:CommonLibrary.Dependencies.DependencyMap.MapTo">
            <summary>
            Маппинг типа.
            </summary>
        </member>
        <member name="T:CommonLibrary.Dependencies.UnityExtension">
            <summary>
            Расширения для Unity.
            </summary>
            <remarks>По мотивам http://unity.codeplex.com/discussions/24543 .</remarks>
        </member>
        <member name="F:CommonLibrary.Dependencies.UnityExtension.UnityExtensionWithTypeTracking.RegisteredTypes">
            <summary>
            Зарегестрированные типы.
            </summary>
        </member>
        <member name="M:CommonLibrary.Dependencies.UnityExtension.CanResolve``1(Unity.IUnityContainer)">
            <summary>
            Проверить возможность разрешения типа.
            </summary>
            <param name="container">Контейнер.</param>
            <typeparam name="T">Инстанциируемый тип.</typeparam>
            <returns>True - если разрешение возможно.</returns>
        </member>
        <member name="M:CommonLibrary.Dependencies.UnityExtension.TryResolve``1(Unity.IUnityContainer,``0@)">
            <summary>
            Попробовать разрешить тип.
            </summary>
            <param name="container">Контейнер.</param>
            <param name="result">Экземпляр инстанциируемого типа либо null, если разрешить тип не удалось.</param>
            <typeparam name="T">Инстанциируемый тип.</typeparam>
            <returns>True - если разрешение типа возможно.</returns>
        </member>
        <member name="T:CommonLibrary.DependencyImporter">
            <summary>
            Класс для импорта объектов.
            </summary>
        </member>
        <member name="M:CommonLibrary.DependencyImporter.Import``1(System.String,System.String,System.Boolean,System.Func{System.Exception,System.Boolean})">
            <summary>
            Импортировать экземпляры указанного типа из сборок указанной директории.
            </summary>
            <typeparam name="T">Базовый тип импортируемых объектов.</typeparam>
            <param name="directoryPath">Путь к директории.</param>
            <param name="fileMask">Маска для требуемых имен файлов.</param>
            <param name="recursive">Признак необходимости рекурсивного поиска в поддиректориях.</param>
            <param name="handleLoadError">Обработчик ошибки загрузки сборки.</param>
            <returns>Созданные импортированные экземпляры.</returns>
        </member>
        <member name="M:CommonLibrary.DependencyImporter.LoadAssembly(System.String)">
            <summary>
            Загрузить сборку.
            </summary>
            <param name="assemblyPath">Путь к сборке.</param>
            <returns>Загруженная сборка.</returns>
            <remarks>Реализация позаимствована из MEF: метод System.ComponentModel.Composition.Hosting.AssemblyCatalog.LoadAssembly.</remarks>
        </member>
        <member name="T:CommonLibrary.BaseInputDialogEventArgs">
            <summary>
            Базовый класс параметров события диалога ввода.
            </summary>
        </member>
        <member name="P:CommonLibrary.BaseInputDialogEventArgs.IsValid">
            <summary>
            Признак, что значения в диалоге валидны.
            </summary>
        </member>
        <member name="F:CommonLibrary.BaseInputDialogEventArgs.validationResult">
            <summary>
            Результат валидации.
            </summary>
        </member>
        <member name="M:CommonLibrary.BaseInputDialogEventArgs.AddError(System.String)">
            <summary>
            Добавить сообщение об ошибке валидации.
            </summary>
            <param name="message">Текст сообщения.</param>
        </member>
        <member name="M:CommonLibrary.BaseInputDialogEventArgs.AddError(System.String,CommonLibrary.IDialogControl[])">
            <summary>
            Добавить сообщение об ошибке валидации значения контрола.
            </summary>
            <param name="message">Текст сообщения.</param>
            <param name="control">Контрол диалога.</param>
        </member>
        <member name="M:CommonLibrary.BaseInputDialogEventArgs.AddWarning(System.String)">
            <summary>
            Добавить предупреждение.
            </summary>
            <param name="message">Текст предупреждения.</param>
        </member>
        <member name="M:CommonLibrary.BaseInputDialogEventArgs.AddInformation(System.String)">
            <summary>
            Добавить информацию.
            </summary>
            <param name="message">Текст информации.</param>
        </member>
        <member name="M:CommonLibrary.BaseInputDialogEventArgs.#ctor(CommonLibrary.InputDialogValidationResult)">
            <summary>
            Конструктор.
            </summary>
            <param name="validationResult">Результат валидации.</param>
        </member>
        <member name="T:CommonLibrary.BaseSearchDialogEventArgs">
            <summary>
            Базовый класс параметров события диалога поиска.
            </summary>
        </member>
        <member name="P:CommonLibrary.BaseSearchDialogEventArgs.IsValid">
            <summary>
            Признак, что значения в диалоге валидны.
            </summary>
        </member>
        <member name="F:CommonLibrary.BaseSearchDialogEventArgs.validationResult">
            <summary>
            Результат валидации.
            </summary>
        </member>
        <member name="M:CommonLibrary.BaseSearchDialogEventArgs.AddError(System.String)">
            <summary>
            Добавить сообщение об ошибке валидации.
            </summary>
            <param name="message">Текст сообщения.</param>
        </member>
        <member name="M:CommonLibrary.BaseSearchDialogEventArgs.AddWarning(System.String)">
            <summary>
            Добавить предупреждение.
            </summary>
            <param name="message">Текст предупреждения.</param>
        </member>
        <member name="M:CommonLibrary.BaseSearchDialogEventArgs.AddInformation(System.String)">
            <summary>
            Добавить информацию.
            </summary>
            <param name="message">Текст информации.</param>
        </member>
        <member name="M:CommonLibrary.BaseSearchDialogEventArgs.#ctor(CommonLibrary.InputDialogValidationResult)">
            <summary>
            Конструктор.
            </summary>
            <param name="validationResult">Результат валидации.</param>
        </member>
        <member name="T:CommonLibrary.CustomDialogButton">
            <summary>
            Кастомизируемая кнопка диалога.
            </summary>
        </member>
        <member name="P:CommonLibrary.CustomDialogButton.Name">
            <summary>
            Имя кнопки.
            </summary>
        </member>
        <member name="P:CommonLibrary.CustomDialogButton.IsVisible">
            <summary>
            Признак видимости кнопки.
            </summary>
        </member>
        <member name="P:CommonLibrary.CustomDialogButton.IsEnabled">
            <summary>
            Признак доступности кнопки.
            </summary>
        </member>
        <member name="P:CommonLibrary.CustomDialogButton.ValidateOnClick">
            <summary>
            Признак необходимости валидировать диалог при нажатии на кнопку.
            </summary>
        </member>
        <member name="M:CommonLibrary.CustomDialogButton.#ctor(CommonLibrary.LocalizedString)">
            <summary>
            Конструктор.
            </summary>
            <param name="name">Имя кнопки.</param>
        </member>
        <member name="M:CommonLibrary.CustomDialogButton.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
            <param name="name">Имя кнопки.</param>
        </member>
        <member name="T:CommonLibrary.DateRangeEditorMode">
            <summary>
            Режимы работы контрола задания диапазона дат.
            </summary>
        </member>
        <member name="F:CommonLibrary.DateRangeEditorMode.Range">
            <summary>
            Режим диапазона.
            </summary>
        </member>
        <member name="F:CommonLibrary.DateRangeEditorMode.SingleDate">
            <summary>
            Режим конкретной даты.
            </summary>
        </member>
        <member name="T:CommonLibrary.DateRangeValue">
            <summary>
            Класс, представляет диапазон дат.
            </summary>
        </member>
        <member name="P:CommonLibrary.DateRangeValue.StartDate">
            <summary>
            Начальная дата диапазона.
            </summary>
        </member>
        <member name="P:CommonLibrary.DateRangeValue.EndDate">
            <summary>
            Конечная дата диапазона.
            </summary>
        </member>
        <member name="P:CommonLibrary.DateRangeValue.Mode">
            <summary>
            Режим работы контрола.
            </summary>
        </member>
        <member name="T:CommonLibrary.DialogButton">
            <summary>
            Кнопка диалога.
            </summary>
        </member>
        <member name="P:CommonLibrary.DialogButton.Name">
            <summary>
            Имя кнопки.
            </summary>
        </member>
        <member name="M:CommonLibrary.DialogButton.#ctor(CommonLibrary.LocalizedString)">
            <summary>
            Конструктор.
            </summary>
            <param name="name">Текст кнопки.</param>
        </member>
        <member name="M:CommonLibrary.DialogButton.#ctor(System.String)">
            <summary>
            Конструктор кнопки.
            </summary>
            <param name="name">Текст кнопки.</param>
        </member>
        <member name="T:CommonLibrary.Dialogs.DialogButtons">
            <summary>
            Все кнопки, которые можно отобразить в диалоге.
            </summary>
        </member>
        <member name="P:CommonLibrary.Dialogs.DialogButtons.Ignore">
            <summary>
            Кнопка Ignore.
            </summary>
        </member>
        <member name="P:CommonLibrary.Dialogs.DialogButtons.Abort">
            <summary>
            Кнопка Abort.
            </summary>
        </member>
        <member name="P:CommonLibrary.Dialogs.DialogButtons.Retry">
            <summary>
            Кнопка Retry.
            </summary>
        </member>
        <member name="P:CommonLibrary.Dialogs.DialogButtons.Yes">
            <summary>
            Кнопка Yes.
            </summary>
        </member>
        <member name="P:CommonLibrary.Dialogs.DialogButtons.YesToAll">
            <summary>
            Кнопка YesToAll.
            </summary>
        </member>
        <member name="P:CommonLibrary.Dialogs.DialogButtons.No">
            <summary>
            Кнопка No.
            </summary>
        </member>
        <member name="P:CommonLibrary.Dialogs.DialogButtons.Cancel">
            <summary>
            Кнопка Cancel.
            </summary>
        </member>
        <member name="P:CommonLibrary.Dialogs.DialogButtons.Ok">
            <summary>
            Кнопка Ok.
            </summary>
        </member>
        <member name="T:CommonLibrary.Dialogs.IValidationInputDialog">
            <summary>
            Интерфейс валидации диалога ввода.
            </summary>
        </member>
        <member name="P:CommonLibrary.Dialogs.IValidationInputDialog.ValidationResult">
            <summary>
            Результат валидации.
            </summary>
        </member>
        <member name="T:CommonLibrary.IBooleanDialogValue">
            <summary>
            Интерфейс контроля диалога ввода для флажков.
            </summary>
        </member>
        <member name="T:CommonLibrary.IConfirmDialog">
            <summary>
            Интерфейс диалога подтверждения.
            </summary>
        </member>
        <member name="M:CommonLibrary.IConfirmDialog.WithDontAskAgain(System.String)">
            <summary>
            Добавить галочку "Больше не спрашивать".
            </summary>
            <param name="dialogId">
            Прикладной идентификатор диалога для сохранения ответа с галочкой "Больше не спрашивать".
            Если идентификатор пустой, то галочка "Больше не спрашивать" не отображается.
            </param>
            <returns>Диалог подтверждения.</returns>
        </member>
        <member name="M:CommonLibrary.IConfirmDialog.Show">
            <summary>
            Показать диалог.
            </summary>
            <returns>Результат диалога подтверждения.</returns>
        </member>
        <member name="T:CommonLibrary.IDateDialogValue">
            <summary>
            Интерфейс контроля диалога ввода для дат.
            </summary>
        </member>
        <member name="M:CommonLibrary.IDateDialogValue.AsMonthYear">
            <summary>
            Установить формат для отображения месяца и года.
            </summary>
            <returns>Контрол ввода для дат.</returns>
        </member>
        <member name="M:CommonLibrary.IDateDialogValue.AsDateTime">
            <summary>
            Установить формат для отображения только даты.
            </summary>
            <returns>Контрол ввода для дат.</returns>
        </member>
        <member name="M:CommonLibrary.IDateDialogValue.AsYear">
            <summary>
            Установить формат для отображения только года.
            </summary>
            <returns>Контрол ввода для дат.</returns>
        </member>
        <member name="M:CommonLibrary.IDateDialogValue.WithLabel(System.String)">
            <summary>
            Текстовая метка контрола.
            </summary>
            <param name="label">Текст метки.</param>
            <returns>Контрол ввода для дат.</returns>
        </member>
        <member name="T:CommonLibrary.IDateRangeDialogValue">
            <summary>
            Интерфейс контроля диалога ввода для диапазона дат.
            </summary>
        </member>
        <member name="M:CommonLibrary.IDateRangeDialogValue.AsMonthYear">
            <summary>
            Установить формат для отображения месяца и года.
            </summary>
            <returns>Контрол ввода для дат.</returns>
        </member>
        <member name="M:CommonLibrary.IDateRangeDialogValue.AsDateTime">
            <summary>
            Установить формат для отображения даты со временем.
            </summary>
            <returns>Контрол ввода для дат.</returns>
        </member>
        <member name="M:CommonLibrary.IDateRangeDialogValue.AsYear">
            <summary>
            Установить формат для отображения только года.
            </summary>
            <returns>Контрол ввода для дат.</returns>
        </member>
        <member name="T:CommonLibrary.IDialogButtonsCollection">
            <summary>
            Кнопки диалога.
            </summary>
        </member>
        <member name="P:CommonLibrary.IDialogButtonsCollection.Default">
            <summary>
            Кнопка по умолчанию.
            </summary>
        </member>
        <member name="M:CommonLibrary.IDialogButtonsCollection.AddYes">
            <summary>
            Добавить кнопку Yes.
            </summary>
            <returns>Добавленная кнопка Yes.</returns>
        </member>
        <member name="M:CommonLibrary.IDialogButtonsCollection.AddYesToAll">
            <summary>
            Добавить кнопку YesToAll.
            </summary>
            <returns>Добавленная кнопка Yes.</returns>
        </member>
        <member name="M:CommonLibrary.IDialogButtonsCollection.AddNo">
            <summary>
            Добавить кнопку No.
            </summary>
            <returns>Добавленная кнопка No.</returns>
        </member>
        <member name="M:CommonLibrary.IDialogButtonsCollection.AddYesNo">
            <summary>
            Добавить набор кнопок Yes и No.
            </summary>
        </member>
        <member name="M:CommonLibrary.IDialogButtonsCollection.AddCustom(System.String)">
            <summary>
            Добавить кнопку.
            </summary>
            <param name="name">Текст кнопки.</param>
            <returns>Добавленная кнопка.</returns>
        </member>
        <member name="M:CommonLibrary.IDialogButtonsCollection.AddOk">
            <summary>
            Добавить кнопку Ok.
            </summary>
            <returns>Добавленная кнопка Ok.</returns>
        </member>
        <member name="M:CommonLibrary.IDialogButtonsCollection.AddCancel">
            <summary>
            Добавить кнопку Cancel.
            </summary>
            <returns>Добавленная кнопка Cancel.</returns>
        </member>
        <member name="M:CommonLibrary.IDialogButtonsCollection.AddRetry">
            <summary>
            Добавить кнопку Retry.
            </summary>
            <returns>Добавленная кнопка Retry.</returns>
        </member>
        <member name="M:CommonLibrary.IDialogButtonsCollection.AddAbort">
            <summary>
            Добавить кнопку Abort.
            </summary>
            <returns>Добавленная кнопка Abort.</returns>
        </member>
        <member name="M:CommonLibrary.IDialogButtonsCollection.AddIgnore">
            <summary>
            Добавить кнопку Ignore.
            </summary>
            <returns>Добавленная кнопка Ignore.</returns>
        </member>
        <member name="M:CommonLibrary.IDialogButtonsCollection.AddOkCancel">
            <summary>
            Добавить набор кнопок Ok и Cancel.
            </summary>
        </member>
        <member name="M:CommonLibrary.IDialogButtonsCollection.AddRetryAbortIgnore">
            <summary>
            Добавить набор кнопок Retry Abort Ignore.
            </summary>
        </member>
        <member name="T:CommonLibrary.IDialogControl">
            <summary>
            Базовый интерфейс контрола для диалога ввода.
            </summary>
        </member>
        <member name="P:CommonLibrary.IDialogControl.IsEnabled">
            <summary>
            Признак доступности контрола.
            </summary>
        </member>
        <member name="P:CommonLibrary.IDialogControl.IsVisible">
            <summary>
            Признак видимости контрола.
            </summary>
        </member>
        <member name="P:CommonLibrary.IDialogControl.IsRequired">
            <summary>
            Признак обязательности.
            </summary>
        </member>
        <member name="T:CommonLibrary.IDialogControl`1">
            <summary>
            Обобщенный интерфейс контрола для диалога ввода.
            </summary>
            <typeparam name="T">Тип значения контрола.</typeparam>
        </member>
        <member name="P:CommonLibrary.IDialogControl`1.Value">
            <summary>
            Значение.
            </summary>
        </member>
        <member name="M:CommonLibrary.IDialogControl`1.SetOnValueChanged(System.Action{CommonLibrary.InputDialogValueChangedEventArgs{`0}})">
            <summary>
            Добавить обработчик на изменение значения контрола.
            </summary>
            <param name="handler">Метод-обработчик.</param>
        </member>
        <member name="T:CommonLibrary.IDialogControlLabelVisible">
            <summary>
            Интерфейс видимости текстовой метки.
            </summary>
        </member>
        <member name="P:CommonLibrary.IDialogControlLabelVisible.IsLabelVisible">
            <summary>
            Признак видимости текстовой метки.
            </summary>
        </member>
        <member name="T:CommonLibrary.IDoubleDialogValue">
            <summary>
            Интерфейс контроля диалога ввода для вещественных чисел.
            </summary>
        </member>
        <member name="M:CommonLibrary.IDoubleDialogValue.WithLabel(System.String)">
            <summary>
            Текстовая метка контрола.
            </summary>
            <param name="label">Текст метки.</param>
            <returns>Контрол ввода для вещественных чисел.</returns>
        </member>
        <member name="T:CommonLibrary.IDropDownDialogValue">
            <summary>
            Интерфейс контроля диалога ввода для выбора из нескольких строковых значений.
            </summary>
        </member>
        <member name="P:CommonLibrary.IDropDownDialogValue.ValueIndex">
            <summary>
            Индекс выбранного значения.
            </summary>
        </member>
        <member name="M:CommonLibrary.IDropDownDialogValue.From(System.String[])">
            <summary>
            Означить список допустимых значений.
            </summary>
            <param name="values">Список допустимых значений.</param>
            <returns>Контрол выбора строкового значения.</returns>
        </member>
        <member name="M:CommonLibrary.IDropDownDialogValue.WithLabel(System.String)">
            <summary>
            Текстовая метка контрола.
            </summary>
            <param name="label">Текст метки.</param>
            <returns>Контрол ввода для выбора из нескольких строковых значений.</returns>
        </member>
        <member name="T:CommonLibrary.IFileSelectDialogValue">
            <summary>
            Интферфейс контрола выбора файла.
            </summary>
        </member>
        <member name="M:CommonLibrary.IFileSelectDialogValue.MaxFileSize(System.Int32)">
            <summary>
            Максимальный размер файла.
            </summary>
            <param name="fileSize">Размер файла.</param>
            <returns>Диалог.</returns>
        </member>
        <member name="M:CommonLibrary.IFileSelectDialogValue.WithFilter(System.String,System.String,System.String[])">
            <summary>
            Фильтр по расширению файлов, доступных для выбора.
            </summary>
            <param name="description">Описание расширений.</param>
            <param name="extension">Основое расширение для фильтрации.</param>
            <param name="extensions">Список расширений, которые необходимо фильтровать.</param>
            <returns>Диалог.</returns>
        </member>
        <member name="M:CommonLibrary.IFileSelectDialogValue.WithLabel(System.String)">
            <summary>
            Текстовая метка контрола.
            </summary>
            <param name="label">Текст метки.</param>
            <returns>Контрол выбора файла.</returns>
        </member>
        <member name="T:CommonLibrary.IHyperlinkDialogValue">
            <summary>
            Интерфейс контрола-гиперссылки для диалога ввода.
            </summary>
        </member>
        <member name="P:CommonLibrary.IHyperlinkDialogValue.Title">
            <summary>
            Текст гиперссылки.
            </summary>
        </member>
        <member name="M:CommonLibrary.IHyperlinkDialogValue.SetOnExecute(System.Action)">
            <summary>
            Добавить обработчик на нажатие гиперссылки.
            </summary>
            <param name="handler">Метод-обработчик.</param>
        </member>
        <member name="M:CommonLibrary.IHyperlinkDialogValue.WithLabel(System.String)">
            <summary>
            Текстовая метка контрола.
            </summary>
            <param name="label">Текст метки.</param>
            <returns>Контрол-гиперссылка.</returns>
        </member>
        <member name="T:CommonLibrary.IInputDialog">
            <summary>
            Интерфейс упрощенного диалога ввода.
            </summary>
        </member>
        <member name="P:CommonLibrary.IInputDialog.Text">
            <summary>
            Текст сообщения.
            </summary>
        </member>
        <member name="P:CommonLibrary.IInputDialog.Height">
            <summary>
            Высота диалога.
            </summary>
        </member>
        <member name="P:CommonLibrary.IInputDialog.Width">
            <summary>
            Ширина диалога.
            </summary>
        </member>
        <member name="P:CommonLibrary.IInputDialog.Buttons">
            <summary>
            Список кнопок диалога.
            </summary>
        </member>
        <member name="M:CommonLibrary.IInputDialog.AddBoolean(System.String)">
            <summary>
            Добавить контрол-флажок.
            </summary>
            <param name="title">Заголовок.</param>
            <returns>Контрол-флажок.</returns>
        </member>
        <member name="M:CommonLibrary.IInputDialog.AddBoolean(System.String,System.Boolean)">
            <summary>
            Добавить контрол-флажок.
            </summary>
            <param name="title">Заголовок.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Контрол-флажок.</returns>
        </member>
        <member name="M:CommonLibrary.IInputDialog.AddDate(System.String,System.Boolean)">
            <summary>
            Добавить контрол для даты.
            </summary>
            <param name="title">Заголовок.</param>
            <param name="isRequired">Признак обязательности.</param>
            <returns>Контрол для даты.</returns>
        </member>
        <member name="M:CommonLibrary.IInputDialog.AddDate(System.String,System.Boolean,System.Nullable{System.DateTime})">
            <summary>
            Добавить контрол для даты.
            </summary>
            <param name="title">Заголовок.</param>
            <param name="isRequired">Признак обязательности.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Контрол для даты.</returns>
        </member>
        <member name="M:CommonLibrary.IInputDialog.AddDouble(System.String,System.Boolean)">
            <summary>
            Добавить контрол для вещественного числа.
            </summary>
            <param name="title">Заголовок контрола.</param>
            <param name="isRequired">Признак обязательности заполнения.</param>
            <returns>Контрол для вещественного числа.</returns>
        </member>
        <member name="M:CommonLibrary.IInputDialog.AddDouble(System.String,System.Boolean,System.Nullable{System.Double})">
            <summary>
            Добавить контрол для вещественного числа.
            </summary>
            <param name="title">Заголовок контрола.</param>
            <param name="isRequired">Признак обязательности заполнения.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Контрол для вещественного числа.</returns>
        </member>
        <member name="M:CommonLibrary.IInputDialog.AddInteger(System.String,System.Boolean)">
            <summary>
            Добавить контрол для целого числа.
            </summary>
            <param name="title">Заголовок контрола.</param>
            <param name="isRequired">Признак обязательности заполнения контрола.</param>
            <returns>Контрол для целого числа.</returns>
        </member>
        <member name="M:CommonLibrary.IInputDialog.AddInteger(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Добавить контрол для целого числа.
            </summary>
            <param name="title">Заголовок контрола.</param>
            <param name="isRequired">Признак обязательности заполнения контрола.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Контрол для целого числа.</returns>
        </member>
        <member name="M:CommonLibrary.IInputDialog.AddMultilineString(System.String,System.Boolean)">
            <summary>
            Добавить многострочный контрол.
            </summary>
            <param name="title">Заголовок контрола.</param>
            <param name="isRequired">Признак обязательности заполнения контрола.</param>
            <returns>Многострочный контрол.</returns>
        </member>
        <member name="M:CommonLibrary.IInputDialog.AddMultilineString(System.String,System.Boolean,System.String)">
            <summary>
            Добавить многострочный контрол.
            </summary>
            <param name="title">Заголовок контрола.</param>
            <param name="isRequired">Признак обязательности заполнения контрола.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Многострочный контрол.</returns>
        </member>
        <member name="M:CommonLibrary.IInputDialog.AddSelect(System.String,System.Boolean)">
            <summary>
            Добавить контрол выбора строки.
            </summary>
            <param name="title">Заголовок.</param>
            <param name="isRequired">Признак обязательности.</param>
            <returns>Контрол выбора строки.</returns>
        </member>
        <member name="M:CommonLibrary.IInputDialog.AddSelect(System.String,System.Boolean,System.Int32)">
            <summary>
            Добавить контрол выбора строки.
            </summary>
            <param name="title">Заголовок.</param>
            <param name="isRequired">Признак обязательности.</param>
            <param name="defaultIndex">Индекс значения по умолчанию.</param>
            <returns>Контрол выбора строки.</returns>
        </member>
        <member name="M:CommonLibrary.IInputDialog.AddSelect(System.String,System.Boolean,System.String)">
            <summary>
            Добавить контрол выбора строки.
            </summary>
            <param name="title">Заголовок.</param>
            <param name="isRequired">Признак обязательности.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Контрол выбора строки.</returns>
        </member>
        <member name="M:CommonLibrary.IInputDialog.AddFileSelect(System.String,System.Boolean)">
            <summary>
            Добавить контрол выбора файла.
            </summary>
            <param name="title">Заголовок.</param>
            <param name="isRequired">Признак обязательности.</param>
            <returns>Контрол выбора файла.</returns>
        </member>
        <member name="M:CommonLibrary.IInputDialog.AddString(System.String,System.Boolean)">
            <summary>
            Добавить контрол для строки.
            </summary>
            <param name="title">Заголовок контрола.</param>
            <param name="isRequired">Признак обязательности заполнения контрола.</param>
            <returns>Контрол для строки.</returns>
        </member>
        <member name="M:CommonLibrary.IInputDialog.AddString(System.String,System.Boolean,System.String)">
            <summary>
            Добавить контрол для строки.
            </summary>
            <param name="title">Заголовок контрола.</param>
            <param name="isRequired">Признак обязательности заполнения контрола.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Контрол для строки.</returns>
        </member>
        <member name="M:CommonLibrary.IInputDialog.AddPasswordString(System.String,System.Boolean)">
            <summary>
            Добавить контрол для строки с паролем.
            </summary>
            <param name="title">Заголовок контрола.</param>
            <param name="isRequired">Признак обязательности заполнения контрола.</param>
            <returns>Контрол для строки.</returns>
        </member>
        <member name="M:CommonLibrary.IInputDialog.AddPasswordString(System.String,System.Boolean,System.String)">
            <summary>
            Добавить контрол для строки с паролем.
            </summary>
            <param name="title">Заголовок контрола.</param>
            <param name="isRequired">Признак обязательности заполнения контрола.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Контрол для строки.</returns>
        </member>
        <member name="M:CommonLibrary.IInputDialog.AddHyperlink(System.String)">
            <summary>
            Добавить контрол-гиперссылку.
            </summary>
            <param name="title">Текст гиперссылки.</param>
            <returns>Контрол-гиперссылка.</returns>
        </member>
        <member name="M:CommonLibrary.IInputDialog.SetOnRefresh(System.Action{CommonLibrary.InputDialogRefreshEventArgs})">
            <summary>
            Задать обработчик на событие обновления диалога.
            </summary>
            <param name="handler">Метод-обработчик.</param>
        </member>
        <member name="M:CommonLibrary.IInputDialog.SetOnButtonClick(System.Action{CommonLibrary.InputDialogButtonClickEventArgs})">
            <summary>
            Задать обработчик на событие нажатия кнопки диалога.
            </summary>
            <param name="handler">Метод-обработчик.</param>
        </member>
        <member name="P:CommonLibrary.IInputDialog.HelpCode">
            <summary>
            Код справки.
            </summary>
        </member>
        <member name="M:CommonLibrary.IInputDialog.Show">
            <summary>
            Показать диалог.
            </summary>
        </member>
        <member name="T:CommonLibrary.IIntegerDialogValue">
            <summary>
            Интерфейс контроля диалога ввода для целых чисел.
            </summary>
        </member>
        <member name="M:CommonLibrary.IIntegerDialogValue.WithLabel(System.String)">
            <summary>
            Текстовая метка контрола.
            </summary>
            <param name="label">Текст метки.</param>
            <returns>Контрол ввода для целых чисел.</returns>
        </member>
        <member name="T:CommonLibrary.IMultilineStringDialogValue">
            <summary>
            Интерфейс контроля диалога ввода для текста.
            </summary>
        </member>
        <member name="M:CommonLibrary.IMultilineStringDialogValue.MaxLength(System.Int32)">
            <summary>
            Задать максимально разрешенную длину строки.
            </summary>
            <param name="length">Длина строки.</param>
            <returns>Контрол ввода для текста.</returns>
        </member>
        <member name="M:CommonLibrary.IMultilineStringDialogValue.WithLabel(System.String)">
            <summary>
            Текстовая метка контрола.
            </summary>
            <param name="label">Текст метки.</param>
            <returns>Контрол ввода для текста.</returns>
        </member>
        <member name="M:CommonLibrary.IMultilineStringDialogValue.RowsCount(System.Int32)">
            <summary>
            Задать высоту контрола в количестве строк.
            </summary>
            <param name="count">Высота контрола в строках.</param>
            <returns>Контрол ввода для текста.</returns>
        </member>
        <member name="T:CommonLibrary.InputDialogButtonClickEventArgs">
            <summary>
            Параметры события на нажатие кнопки диалога ввода.
            </summary>
        </member>
        <member name="P:CommonLibrary.InputDialogButtonClickEventArgs.Button">
            <summary>
            Кнопка на которую нажали.
            </summary>
        </member>
        <member name="P:CommonLibrary.InputDialogButtonClickEventArgs.CloseAfterExecute">
            <summary>
            Признак закрытия диалога после выполнения обработчика.
            </summary>
        </member>
        <member name="F:CommonLibrary.InputDialogButtonClickEventArgs.notAllRequiredControlsFilled">
            <summary>
            Признак того, что не все обязательные контроли диалога ввода заполнены.
            </summary>
        </member>
        <member name="M:CommonLibrary.InputDialogButtonClickEventArgs.#ctor(CommonLibrary.InputDialogValidationResult,CommonLibrary.DialogButton,System.Boolean)">
            <summary>
            Конструктор.
            </summary>
            <param name="validationResult">Результат валидации.</param>
            <param name="button">Кнопка на которую нажали.</param>
            <param name="notAllRequiredControlsFilled">Признак того, что не все обязательные контроли диалога ввода заполнены.</param>
        </member>
        <member name="T:CommonLibrary.InputDialogRefreshEventArgs">
            <summary>
            Параметры события на обновление диалога ввода.
            </summary>
        </member>
        <member name="M:CommonLibrary.InputDialogRefreshEventArgs.#ctor(CommonLibrary.InputDialogValidationResult)">
            <summary>
            Конструктор.
            </summary>
            <param name="validationResult">Результат валидации.</param>
        </member>
        <member name="T:CommonLibrary.InputDialogValidationMessage">
            <summary>
            Сообщение об ошибке валидации контрола в диалоге ввода.
            </summary>
        </member>
        <member name="P:CommonLibrary.InputDialogValidationMessage.Control">
            <summary>
            Контрол.
            </summary>
        </member>
        <member name="M:CommonLibrary.InputDialogValidationMessage.#ctor(System.String,CommonLibrary.IDialogControl,CommonLibrary.ValidationMessageType)">
            <summary>
            Конструктор.
            </summary>
            <param name="message">Текст сообщения.</param>
            <param name="control">Контрол.</param>
            <param name="messageType">Тип сообщения.</param>
        </member>
        <member name="T:CommonLibrary.InputDialogValidationResult">
            <summary>
            Результат валидации диалога ввода.
            </summary>
        </member>
        <member name="P:CommonLibrary.InputDialogValidationResult.IsValid">
            <summary>
            Признак, что валидация прошла успешно.
            </summary>
        </member>
        <member name="P:CommonLibrary.InputDialogValidationResult.Messages">
            <summary>
            Сообщения об ошибках валидации.
            </summary>
        </member>
        <member name="M:CommonLibrary.InputDialogValidationResult.Clear">
            <summary>
            Очистить сообщения об ошибках валидации.
            </summary>
        </member>
        <member name="M:CommonLibrary.InputDialogValidationResult.AddError(System.String,CommonLibrary.IDialogControl[])">
            <summary>
            Добавить сообщение об ошибке валидации для контрола.
            </summary>
            <param name="message">Текст ошибки.</param>
            <param name="controls">Список контролов, к которым будет привязано сообщение об ошибке.</param>
        </member>
        <member name="M:CommonLibrary.InputDialogValidationResult.AddWarning(System.String)">
            <summary>
            Добавить предупреждение.
            </summary>
            <param name="message">Текст предупреждения.</param>
        </member>
        <member name="M:CommonLibrary.InputDialogValidationResult.AddInformation(System.String)">
            <summary>
            Добавить информацию.
            </summary>
            <param name="message">Текст информации.</param>
        </member>
        <member name="M:CommonLibrary.InputDialogValidationResult.AddMessageIfNotExist(System.String,CommonLibrary.IDialogControl,CommonLibrary.ValidationMessageType)">
            <summary>
            Добавить сообщение, если такое сообщение не добавлено.
            </summary>
            <param name="message">Текст сообщения.</param>
            <param name="control">Контрол.</param>
            <param name="messageType">Тип сообщения.</param>
        </member>
        <member name="T:CommonLibrary.InputDialogValueChangedEventArgs`1">
            <summary>
            Параметры события изменения значения в контроле диалога ввода.
            </summary>
            <typeparam name="T">Тип значения.</typeparam>
        </member>
        <member name="P:CommonLibrary.InputDialogValueChangedEventArgs`1.NewValue">
            <summary>
            Новое значение.
            </summary>
        </member>
        <member name="P:CommonLibrary.InputDialogValueChangedEventArgs`1.OldValue">
            <summary>
            Предыдущее значение.
            </summary>
        </member>
        <member name="M:CommonLibrary.InputDialogValueChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Конструктор.
            </summary>
            <param name="oldValue">Предыдущее значение.</param>
            <param name="newValue">Новое значение.</param>
        </member>
        <member name="T:CommonLibrary.IPasswordStringDialogValue">
            <summary>
            Интерфейс контроля диалога ввода для строк.
            </summary>
        </member>
        <member name="M:CommonLibrary.IPasswordStringDialogValue.MaxLength(System.Int32)">
            <summary>
            Задать максимально разрешенную длину строки.
            </summary>
            <param name="length">Длина строки.</param>
            <returns>Контрол ввода для строк.</returns>
        </member>
        <member name="M:CommonLibrary.IPasswordStringDialogValue.WithLabel(System.String)">
            <summary>
            Текстовая метка контрола.
            </summary>
            <param name="label">Текст метки.</param>
            <returns>Контрол ввода для строк.</returns>
        </member>
        <member name="T:CommonLibrary.IStringDialogValue">
            <summary>
            Интерфейс контроля диалога ввода для строк.
            </summary>
        </member>
        <member name="M:CommonLibrary.IStringDialogValue.MaxLength(System.Int32)">
            <summary>
            Задать максимально разрешенную длину строки.
            </summary>
            <param name="length">Длина строки.</param>
            <returns>Контрол ввода для строк.</returns>
        </member>
        <member name="M:CommonLibrary.IStringDialogValue.WithLabel(System.String)">
            <summary>
            Текстовая метка контрола.
            </summary>
            <param name="label">Текст метки.</param>
            <returns>Контрол ввода для строк.</returns>
        </member>
        <member name="T:CommonLibrary.ITaskDialog">
            <summary>
            Интерфейс диалога с пользователем.
            </summary>
        </member>
        <member name="P:CommonLibrary.ITaskDialog.Buttons">
            <summary>
            Список кнопок диалога.
            </summary>
        </member>
        <member name="M:CommonLibrary.ITaskDialog.Show">
            <summary>
            Показать диалог.
            </summary>
        </member>
        <member name="T:CommonLibrary.NumericRangeValue`1">
            <summary>
            Диапазон чисел.
            </summary>
            <typeparam name="T">Числовой тип границ диапазона.</typeparam>
        </member>
        <member name="P:CommonLibrary.NumericRangeValue`1.Start">
            <summary>
            Начало диапазона.
            </summary>
        </member>
        <member name="P:CommonLibrary.NumericRangeValue`1.End">
            <summary>
            Конец диапазона.
            </summary>
        </member>
        <member name="T:CommonLibrary.DisposableObject">
            <summary>
            Объект, при вызове Dispose которого, срабатывает заданный Action.
            </summary>
        </member>
        <member name="T:CommonLibrary.Events.DomainEventHandlers">
            <summary>
            Контейнер для обработчиков событий.
            </summary>
        </member>
        <member name="F:CommonLibrary.Events.DomainEventHandlers.registeredHandlers">
            <summary>
            Зарегистрированные обработчики событий.
            </summary>
        </member>
        <member name="F:CommonLibrary.Events.DomainEventHandlers.registeredWeakHandlers">
            <summary>
            Зарегистрированные обработчики слабых событий.
            </summary>
        </member>
        <member name="P:CommonLibrary.Events.DomainEventHandlers.Handlers">
            <summary>
            Все зарегистрированные обработчики событий (обычные + слабые).
            </summary>
        </member>
        <member name="F:CommonLibrary.Events.DomainEventHandlers.locker">
            <summary>
            Объект блокировки.
            </summary>
        </member>
        <member name="M:CommonLibrary.Events.DomainEventHandlers.AddHandler``1(System.Action{``0})">
            <summary>
            Зарегистрировать обработчик события.
            </summary>
            <typeparam name="T">Тип события.</typeparam>
            <param name="handler">Обработчик события.</param>
        </member>
        <member name="M:CommonLibrary.Events.DomainEventHandlers.AddWeakHandler``1(System.Action{``0})">
            <summary>
            Зарегистрировать обработчик слабого события.
            </summary>
            <typeparam name="T">Тип события.</typeparam>
            <param name="handler">Обработчик события.</param>
        </member>
        <member name="M:CommonLibrary.Events.DomainEventHandlers.RemoveHandler``1(System.Action{``0})">
            <summary>
            Удалить обработчик события.
            </summary>
            <typeparam name="T">Тип события.</typeparam>
            <param name="handler">Обработчик события.</param>
        </member>
        <member name="M:CommonLibrary.Events.DomainEventHandlers.GetHandlers``1">
            <summary>
            Получить обработчики события.
            </summary>
            <typeparam name="T">Тип события.</typeparam>
            <returns>Обработчики.</returns>
        </member>
        <member name="M:CommonLibrary.Events.DomainEventHandlers.GetHandlers(System.Object)">
            <summary>
            Получить обработчики события.
            </summary>
            <param name="event">Событие.</param>
            <returns>Обработчики.</returns>
        </member>
        <member name="T:CommonLibrary.Events.DomainEvents">
            <summary>
            Предметные события.
            </summary>
        </member>
        <member name="M:CommonLibrary.Events.DomainEvents.Raise``1(``0)">
            <summary>
            Генерация события.
            </summary>
            <typeparam name="T">Тип события.</typeparam>
            <param name="event">Событие.</param>
        </member>
        <member name="M:CommonLibrary.Events.DomainEvents.Raise(System.Object)">
            <summary>
            Генерация события.
            </summary>
            <param name="event">Событие.</param>
        </member>
        <member name="T:CommonLibrary.Events.WeakDelegate">
            <summary>
            Слабый делегат.
            </summary>
            <remarks>
            Держит на контекст вызова только слабую ссылку.
            По мотивам http://www.albahari.com/nutshell/cs4ch12.aspx.
            </remarks>
        </member>
        <member name="T:CommonLibrary.Events.WeakDelegate.WeakTargetedMethod">
            <summary>
            Инфошка метода со слабой ссылкой на контекст вызова.
            </summary>
        </member>
        <member name="P:CommonLibrary.Events.WeakDelegate.WeakTargetedMethod.InvocationContext">
            <summary>
            Ссылка на контекст вызова.
            </summary>
        </member>
        <member name="P:CommonLibrary.Events.WeakDelegate.WeakTargetedMethod.Method">
            <summary>
            Инфошка метода.
            </summary>
        </member>
        <member name="M:CommonLibrary.Events.WeakDelegate.WeakTargetedMethod.Equals(System.Delegate)">
            <summary>
            Проверить на эквивалентность делегату.
            </summary>
            <param name="obj">Делегат.</param>
        </member>
        <member name="M:CommonLibrary.Events.WeakDelegate.WeakTargetedMethod.#ctor(System.Delegate)">
            <summary>
            Конструктор.
            </summary>
            <param name="delegate">Делегат.</param>
        </member>
        <member name="P:CommonLibrary.Events.WeakDelegate.Invocation">
            <summary>
            Результирующий делегат (с учётом того, что слабые ссылки на делегаты уже могут быть уничтожены).
            </summary>
        </member>
        <member name="P:CommonLibrary.Events.WeakDelegate.IsAlive">
            <summary>
            Признак того, что ссылка на контекст вызова еще "живая".
            </summary>
        </member>
        <member name="F:CommonLibrary.Events.WeakDelegate.invocationList">
            <summary>
            Внутренний список вызова делегатов.
            </summary>
        </member>
        <member name="M:CommonLibrary.Events.WeakDelegate.Combine(System.Delegate)">
            <summary>
            Добавить делегат в список вызова.
            </summary>
            <param name="delegate">Делегат.</param>
        </member>
        <member name="M:CommonLibrary.Events.WeakDelegate.Remove(System.Delegate)">
            <summary>
            Удалить делегат из списка вызова.
            </summary>
            <param name="delegate">Делегат.</param>
        </member>
        <member name="M:CommonLibrary.Events.WeakDelegate.CreateDelegate(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Создать делегат на основе инфошки метода.
            </summary>
            <param name="method">Инфошка метода.</param>
            <param name="target">Контекст вызова.</param>
        </member>
        <member name="T:CommonLibrary.Exceptions.BaseExceptionPolicy">
            <summary>
            Базовая политика обработки исключений.
            </summary>
        </member>
        <member name="F:CommonLibrary.Exceptions.BaseExceptionPolicy.log">
            <summary>
            Логер.
            </summary>
        </member>
        <member name="F:CommonLibrary.Exceptions.BaseExceptionPolicy.languageManager">
            <summary>
            Менеджер языков.
            </summary>
        </member>
        <member name="P:CommonLibrary.Exceptions.BaseExceptionPolicy.LoggingPolicy">
            <summary>
            Признак, является ли политика политикой логирования.
            Политики логирования обрабатываются после остальных политик.
            </summary>
        </member>
        <member name="P:CommonLibrary.Exceptions.BaseExceptionPolicy.InnerPolicy">
            <summary>
            Признак, является ли политика применимой ко внутрениим исключениям.
            </summary>
        </member>
        <member name="P:CommonLibrary.Exceptions.BaseExceptionPolicy.LogCulture">
            <summary>
            Культура для записей в лог.
            </summary>
        </member>
        <member name="M:CommonLibrary.Exceptions.BaseExceptionPolicy.#ctor(System.Boolean)">
            <summary>
            Конструктор.
            </summary>
            <param name="loggingPolicy">Признак, является ли политика политикой логирования.</param>
        </member>
        <member name="M:CommonLibrary.Exceptions.BaseExceptionPolicy.ProcessException(System.Exception,CommonLibrary.LocalizedString,CommonLibrary.LocalizedString)">
            <summary>
            Обработать исключение.
            </summary>
            <param name="ex">Исключение.</param>
            <param name="message">Локализованное сообщение.</param>
            <param name="description">Локализованное описание ошибки.</param>
        </member>
        <member name="M:CommonLibrary.Exceptions.BaseExceptionPolicy.IsMemoryInfoNeeded(CommonLibrary.LocalizedString,System.Exception)">
            <summary>
            Получить признак необходимости добавления информации об использовании памяти.
            </summary>
            <param name="exceptionMessage">Сообщение исключения.</param>
            <param name="exception">Исключение.</param>
            <returns>true, если нужно добавить информацию об использовании памяти.</returns>
        </member>
        <member name="M:CommonLibrary.Exceptions.BaseExceptionPolicy.WriteException(CommonLibrary.LocalizedString,System.Exception)">
            <summary>
            Записать информацию об исключении.
            </summary>
            <param name="message">Локализованное сообщение.</param>
            <param name="exception">Исключение.</param>
        </member>
        <member name="M:CommonLibrary.Exceptions.BaseExceptionPolicy.WriteException(CommonLibrary.LocalizedString,System.Exception,System.Boolean,Sungero.Logging.LogLevel)">
            <summary>
            Записать информацию об исключении.
            </summary>
            <param name="message">Локализованное сообщение.</param>
            <param name="exception">Исключение.</param>
            <param name="needLogException">Необходимо ли выводить exception в лог.</param>
            <param name="logLevel">Уровень ошибки.</param>
        </member>
        <member name="T:CommonLibrary.Exceptions.ClientExceptionUtils">
            <summary>
            Класс вспомогательных методов для формирования текстов исключений на клиенте.
            </summary>
        </member>
        <member name="M:CommonLibrary.Exceptions.ClientExceptionUtils.GetMessage(System.Exception)">
            <summary>
            Получить сообщение исключения.
            </summary>
            <param name="exception">Исключение.</param>
            <returns>Сообщение исключения.</returns>
        </member>
        <member name="M:CommonLibrary.Exceptions.ClientExceptionUtils.GetDescription(System.Exception)">
            <summary>
            Получить описание исключения.
            </summary>
            <param name="exception">Исключение.</param>
            <returns>Описание исключения.</returns>
        </member>
        <member name="M:CommonLibrary.Exceptions.ClientExceptionUtils.GetMessageWithDescription(System.Exception)">
            <summary>
            Получить сообщение исключения с описанием.
            </summary>
            <param name="exception">Исключение.</param>
            <returns>Сообщение исключения с описанием.</returns>
        </member>
        <member name="M:CommonLibrary.Exceptions.ClientExceptionUtils.GetDetailedMessage(System.Exception,System.Globalization.CultureInfo)">
            <summary>
            Получить детальное сообщение.
            </summary>
            <param name="exception">Исключение.</param>
            <param name="cultureInfo">Культура в которой необходимо получить сообщение.</param>
            <returns>Более детальное сообщение об ошибке с StackTrace.</returns>
        </member>
        <member name="T:CommonLibrary.Exceptions.CommonException">
            <summary>
            Обёртка над базовым Exception, с некоторыми улучшениями.
            </summary>
        </member>
        <member name="F:CommonLibrary.Exceptions.CommonException.exception">
            <summary>
            Реальное исключение.
            </summary>
        </member>
        <member name="M:CommonLibrary.Exceptions.CommonException.SetStackTrace(System.Diagnostics.StackTrace)">
            <summary>
            Означить StackTrace исключения, дополнив его StackTrace-ом метода, в котором оно произошло.
            </summary>
            <param name="methodStackTrace">StackTrace метода, в котором произошло исключение.</param>
        </member>
        <member name="T:CommonLibrary.Exceptions.OnShowExceptionEventArgs">
            <summary>
            Параметры события на показ сообщения.
            </summary>
        </member>
        <member name="P:CommonLibrary.Exceptions.OnShowExceptionEventArgs.Exception">
            <summary>
            Экземпляр исключения.
            </summary>
        </member>
        <member name="M:CommonLibrary.Exceptions.OnShowExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Конструктор.
            </summary>
            <param name="exception">Экземпляр исключения.</param>
        </member>
        <member name="T:CommonLibrary.Exceptions.ExceptionHandler">
            <summary>
            Обработчик исключений.
            </summary>
        </member>
        <member name="F:CommonLibrary.Exceptions.ExceptionHandler.UserNameExceptionDataItem">
            <summary>
             Имя элемента в словаре данных исключения, в котором хранится имя текущего пользователя.
            </summary>
        </member>
        <member name="F:CommonLibrary.Exceptions.ExceptionHandler.TenantExceptionDataItem">
            <summary>
            Имя элемента в словаре данных исключения, в котором хранится идентификатор тенанта.
            </summary>
        </member>
        <member name="F:CommonLibrary.Exceptions.ExceptionHandler.InnerExceptionSeparator">
            <summary>
            Разделитель между стеками трейса вложенных исключений.
            </summary>
        </member>
        <member name="F:CommonLibrary.Exceptions.ExceptionHandler.NewLineSubstitution">
            <summary>
            Заменитель символа переноса строки для использования в однострочном логе.
            </summary>
        </member>
        <member name="E:CommonLibrary.Exceptions.ExceptionHandler.OnShowException">
            <summary>
            Событие на показ сообщения об ошибке.
            </summary>
        </member>
        <member name="M:CommonLibrary.Exceptions.ExceptionHandler.ShowException(System.Exception)">
            <summary>
            Генерировать событие на показ сообщения об ошибке.
            </summary>
            <param name="ex">Исключение.</param>
        </member>
        <member name="M:CommonLibrary.Exceptions.ExceptionHandler.HandleException(System.Exception,System.Boolean)">
            <summary>
            Обработать исключение.
            </summary>
            <param name="exception">Исключение.</param>
            <param name="showException">True, если отоброжать исключение.</param>
        </member>
        <member name="M:CommonLibrary.Exceptions.ExceptionHandler.GetExceptionMessageAndStack(System.Exception,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Cформировать сообщение об ошибке и стек трейса.
            </summary>
            <param name="exception">Исключение.</param>
            <param name="cultureInfo">Культура.</param>
            <param name="formatInSingleLine">Форматировать в одну строку.</param>
            <returns>Текст исключения и стек.</returns>
        </member>
        <member name="M:CommonLibrary.Exceptions.ExceptionHandler.GetExceptionMessageAndStack(System.Exception,System.Globalization.CultureInfo)">
            <summary>
            Cформировать сообщение об ошибке и стек трейса.
            </summary>
            <param name="exception">Исключение.</param>
            <param name="cultureInfo">Культура.</param>
            <returns>Текст исключения и стек.</returns>
        </member>
        <member name="M:CommonLibrary.Exceptions.ExceptionHandler.GetLocalizedStringOfException(System.Exception,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Получить сообщение из исключения.
            </summary>
            <param name="exception">Исключение.</param>
            <param name="cultureInfo">Культура для записей в лог.</param>
            <param name="formatInSingleLine">Форматировать в одну строку.</param>
            <returns>Строка сообщения.</returns>
        </member>
        <member name="M:CommonLibrary.Exceptions.ExceptionHandler.ConvertExceptionTreeToEnumerable(System.Exception)">
            <summary>
            Собираем исключение и все InnerException в список.
            </summary>
            <param name="exception">Исключение.</param>
            <returns>Список исключений.</returns>
        </member>
        <member name="M:CommonLibrary.Exceptions.ExceptionHandler.NormalizeString(System.String)">
            <summary>
            Убрать из строки все служебные символы.
            </summary>
            <param name="message">Исходная строка.</param>
            <returns>Нормальизованная строка.</returns>
        </member>
        <member name="T:CommonLibrary.Exceptions.WriteToDefaultLogAsWarningExceptionPolicy">
            <summary>
            Политика обработки исключения - записать ошибку как Warning.
            </summary>
        </member>
        <member name="T:CommonLibrary.Exceptions.WriteToDefaultLogExceptionPolicy">
            <summary>
            Политика обработки исключения - записать исключение в лог по умолчанию.
            </summary>
        </member>
        <member name="M:CommonLibrary.Exceptions.WriteToDefaultLogExceptionPolicy.GetMemoryInfoIfNeed(CommonLibrary.LocalizedString,System.Exception)">
            <summary>
            Получить информацию об использовании памяти при необходимости.
            </summary>
            <param name="exceptionMessage">Сообщение исключения.</param>
            <param name="exception">Исключение.</param>
            <returns>Информация об использовании памяти.</returns>
        </member>
        <member name="M:CommonLibrary.Exceptions.WriteToDefaultLogExceptionPolicy.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:CommonLibrary.Exceptions.WriteToAlternativeLogExceptionPolicy">
            <summary>
            Политика обработки исключения - записать исключение в лог по умолчанию.
            </summary>
        </member>
        <member name="M:CommonLibrary.Exceptions.WriteToAlternativeLogExceptionPolicy.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:CommonLibrary.Exceptions.CallAdministratorMessageExceptionPolicy">
            <summary>
            Политика обработки исключения - дописать к исключению "Обратитесь к администратору системы".
            </summary>
        </member>
        <member name="M:CommonLibrary.Exceptions.CallAdministratorMessageExceptionPolicy.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:CommonLibrary.Exceptions.TryAgainOrCallAdministratorMessageExceptionPolicy">
            <summary>
            Политика обработки исключений - дописать к исключению "Повторите попытку или обратитесь к администратору системы".
            </summary>
        </member>
        <member name="M:CommonLibrary.Exceptions.TryAgainOrCallAdministratorMessageExceptionPolicy.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:CommonLibrary.Exceptions.IAdditionalExceptionInfo">
            <summary>
            Интерфейс дополнительной инофрмация об исключении.
            </summary>
        </member>
        <member name="P:CommonLibrary.Exceptions.IAdditionalExceptionInfo.AdditionalExceptionInfo">
            <summary>
            Дополнительная инофрмация об исключении.
            </summary>
        </member>
        <member name="T:CommonLibrary.Exceptions.InputValueCoercedException">
            <summary>
            Внутреннее исключение, которое возникает когда вводимое значение изменено внутри биндинга.
            </summary>
        </member>
        <member name="M:CommonLibrary.Exceptions.InputValueCoercedException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:CommonLibrary.Exceptions.InternalServerException">
            <summary>
            Класс внутреннего исключения сервера.
            </summary>
        </member>
        <member name="M:CommonLibrary.Exceptions.InternalServerException.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:CommonLibrary.Exceptions.InternalServerException.#ctor(CommonLibrary.LocalizedString)">
            <summary>
            Конструктор.
            </summary>
            <param name="message">Сообщение.</param>
        </member>
        <member name="M:CommonLibrary.Exceptions.InternalServerException.#ctor(CommonLibrary.LocalizedString,CommonLibrary.LocalizedString,System.Exception)">
            <summary>
            Конструктор.
            </summary>
            <param name="message">Сообщение.</param>
            <param name="description">Описание.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:CommonLibrary.Exceptions.InternalServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор.
            </summary>
            <param name="info">Сериализованные данные об исключении.</param>
            <param name="context">Информация о контексте.</param>
        </member>
        <member name="T:CommonLibrary.Exceptions.InvalidSecurityException">
            <summary>
            Исключение о неправильных параметрах безопасности при доступе к сервису.
            </summary>
        </member>
        <member name="M:CommonLibrary.Exceptions.InvalidSecurityException.#ctor(System.Boolean)">
            <summary>
            Конструктор.
            </summary>
            <param name="isInternal">Признак, что исключение является внутренним.</param>
        </member>
        <member name="M:CommonLibrary.Exceptions.InvalidSecurityException.#ctor(System.Boolean,CommonLibrary.LocalizedString)">
            <summary>
            Конструктор.
            </summary>
            <param name="isInternal">Признак, что исключение является внутренним.</param>
            <param name="message">Сообщение.</param>
        </member>
        <member name="M:CommonLibrary.Exceptions.InvalidSecurityException.#ctor(System.Boolean,CommonLibrary.LocalizedString,System.Exception)">
            <summary>
            Конструктор.
            </summary>
            <param name="isInternal">Признак, что исключение является внутренним.</param>
            <param name="message">Сообщение.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:CommonLibrary.Exceptions.InvalidSecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор.
            </summary>
            <param name="info">Сериализованные данные об исключении.</param>
            <param name="context">Информация о контексте.</param>
        </member>
        <member name="T:CommonLibrary.Exceptions.PlatformException">
            <summary>
            Базовое исключение с инфраструктурой политик.
            </summary>
        </member>
        <member name="F:CommonLibrary.Exceptions.PlatformException.LocalizedMessagePropertyName">
            <summary>
            Имя сериализуемого свойства LocalizedMessage.
            </summary>
        </member>
        <member name="F:CommonLibrary.Exceptions.PlatformException.DescriptionPropertyName">
            <summary>
            Имя сериализуемого свойства Description.
            </summary>
        </member>
        <member name="F:CommonLibrary.Exceptions.PlatformException.IsInternalPropertyName">
            <summary>
            Имя сериализуемого свойства IsInternal.
            </summary>
        </member>
        <member name="P:CommonLibrary.Exceptions.PlatformException.LocalizedMessage">
            <summary>
            Локализованное сообщение исключения.
            </summary>
        </member>
        <member name="P:CommonLibrary.Exceptions.PlatformException.Description">
            <summary>
            Локализованное сообщение с подробным описанием ошибки.
            </summary>
        </member>
        <member name="F:CommonLibrary.Exceptions.PlatformException.policies">
            <summary>
            Список политик.
            </summary>
        </member>
        <member name="P:CommonLibrary.Exceptions.PlatformException.IsInternal">
            <summary>
            Признак того, что исключение является внутренним и не отображается пользователю.
            </summary>
        </member>
        <member name="F:CommonLibrary.Exceptions.PlatformException.policiesInit">
            <summary>
            Признак того, что политики проинициализированы.
            </summary>
        </member>
        <member name="P:CommonLibrary.Exceptions.PlatformException.Policies">
            <summary>
            Политики обработки исключения.
            </summary>
        </member>
        <member name="M:CommonLibrary.Exceptions.PlatformException.InternalApplyPolicies(System.Boolean,System.Boolean)">
            <summary>
            Применить политики к исключению.
            </summary>
            <param name="loggingPolicies">Признак, применять политики логгирования, или прочие политики.</param>
            <param name="innerHandler">Признак обработки внутренних исключений.</param>
        </member>
        <member name="M:CommonLibrary.Exceptions.PlatformException.InitPolicies">
            <summary>
            Инициализировать политики.
            </summary>
        </member>
        <member name="M:CommonLibrary.Exceptions.PlatformException.ApplyPolicies">
            <summary>
            Применить политики к исключению.
            </summary>
        </member>
        <member name="M:CommonLibrary.Exceptions.PlatformException.ApplyPolicies(System.Boolean)">
            <summary>
            Применить политики к исключению.
            </summary>
            <param name="innerHandler">Признак обработки внутренних исключений.</param>
        </member>
        <member name="M:CommonLibrary.Exceptions.PlatformException.TryGetAdditionalInfo(System.Exception)">
            <summary>
            Попробовать получить дополнительную информацию об исключении.
            </summary>
            <param name="ex">Исключение.</param>
            <returns>Дополнительная информация об исключении.</returns>
        </member>
        <member name="M:CommonLibrary.Exceptions.PlatformException.#ctor(System.Boolean)">
            <summary>
            Конструктор.
            </summary>
            <param name="isInternal">Признак, что исключение является внутренним.</param>
        </member>
        <member name="M:CommonLibrary.Exceptions.PlatformException.#ctor(System.Boolean,CommonLibrary.LocalizedString)">
            <summary>
            Конструктор.
            </summary>
            <param name="isInternal">Признак, что исключение является внутренним.</param>
            <param name="message">Сообщение.</param>
        </member>
        <member name="M:CommonLibrary.Exceptions.PlatformException.#ctor(System.Boolean,CommonLibrary.LocalizedString,System.Exception)">
            <summary>
            Конструктор.
            </summary>
            <param name="isInternal">Признак, что исключение является внутренним.</param>
            <param name="message">Сообщение.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:CommonLibrary.Exceptions.PlatformException.#ctor(System.Boolean,CommonLibrary.LocalizedString,CommonLibrary.LocalizedString,System.Exception)">
            <summary>
            Конструктор.
            </summary>
            <param name="isInternal">Признак, что исключение является внутренним.</param>
            <param name="message">Сообщение.</param>
            <param name="description">Сообщение с подробным описанием исключения.</param>
            <param name="innerException">Внутреннее исключение.</param>
        </member>
        <member name="M:CommonLibrary.Exceptions.PlatformException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор.
            </summary>
            <param name="info">Сериализованные данные об исключении.</param>
            <param name="context">Информация о контексте.</param>
        </member>
        <member name="T:CommonLibrary.ArrayExtensions">
            <summary>
            Методы расширения для работы с массивами.
            </summary>
        </member>
        <member name="M:CommonLibrary.ArrayExtensions.Compress(System.Byte[],System.IO.Compression.CompressionLevel)">
            <summary>
            Получить сжатый массив байт.
            </summary>
            <param name="source">Несжатый массив.</param>
            <param name="compressionLevel">Уровень сжатия.</param>
            <returns>Сжатый массив байт.</returns>
        </member>
        <member name="M:CommonLibrary.ArrayExtensions.Compress(System.Byte[],System.Int32,System.Int32,System.IO.Compression.CompressionLevel)">
            <summary>
            Получить сжатый массив байт.
            </summary>
            <param name="source">Несжатый массив.</param>
            <param name="index">Позиция в массиве, с которой нужно сжимать.</param>
            <param name="count">Количество элементов массива, которые нужно сжимать.</param>
            <param name="compressionLevel">Уровень сжатия.</param>
            <returns>Сжатый массив байт.</returns>
        </member>
        <member name="M:CommonLibrary.ArrayExtensions.Compress(System.Byte[])">
            <summary>
            Получить сжатый массив байт.
            </summary>
            <param name="source">Несжатый массив.</param>
            <returns>Сжатый массив байт.</returns>
        </member>
        <member name="M:CommonLibrary.ArrayExtensions.Compress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Получить сжатый массив байт.
            </summary>
            <param name="source">Несжатый массив.</param>
            <param name="index">Позиция в массиве, с которой нужно сжимать.</param>
            <param name="count">Количество элементов массива, которые нужно сжимать.</param>
            <returns>Сжатый массив байт.</returns>
        </member>
        <member name="M:CommonLibrary.ArrayExtensions.Decompress(System.Byte[])">
            <summary>
            Распаковать сжатый массив байт.
            </summary>
            <param name="source">Сжатый массив байт.</param>
            <returns>Распакованный массив байт.</returns>
        </member>
        <member name="M:CommonLibrary.ArrayExtensions.CombineByteArrays(System.Byte[][])">
            <summary>
            Объединить массивы байт.
            </summary>
            <param name="arrays">Массивы байт.</param>
            <returns>Объединенный массив.</returns>
        </member>
        <member name="M:CommonLibrary.ArrayExtensions.Compress(System.IO.Stream,System.IO.Compression.CompressionLevel)">
            <summary>
            Сжать поток в массив байт.
            </summary>
            <param name="sourceStream">Поток с несжатыми данными.</param>
            <param name="compressionLevel">Уровень сжатия.</param>
            <returns>Сжатый массив байт.</returns>
        </member>
        <member name="T:CommonLibrary.CultureInfoExtensions">
            <summary>
            Расширения для работы с культурой.
            </summary>
        </member>
        <member name="M:CommonLibrary.CultureInfoExtensions.SwitchTo(System.Globalization.CultureInfo)">
            <summary>
            Переключиться на работу с данной культурой.
            </summary>
            <param name="cultureInfo">Культура.</param>
            <returns>Объект, при вызове Dispose которого будет вызвано переключение обратно.</returns>
        </member>
        <member name="T:CommonLibrary.DateTimeExtensions">
            <summary>
            Расширения для работы с датой и временем.
            </summary>
        </member>
        <member name="M:CommonLibrary.DateTimeExtensions.ToLowBound(System.DateTime,CommonLibrary.DateTimeFormat)">
            <summary>
            Получить начало временного интервала, к которому относится дата.
            </summary>
            <param name="dateTime">Дата.</param>
            <param name="dateTimeFormat">Тип временного интервала.</param>
            <returns>Начало временного интервала.</returns>
        </member>
        <member name="M:CommonLibrary.DateTimeExtensions.ToLowBound(System.Nullable{System.DateTime},CommonLibrary.DateTimeFormat)">
            <summary>
            Получить начало временного интервала, к которому относится дата.
            </summary>
            <param name="dateTime">Дата.</param>
            <param name="dateTimeFormat">Тип временного интервала.</param>
            <returns>Начало временного интервала.</returns>
        </member>
        <member name="M:CommonLibrary.DateTimeExtensions.ToHighBound(System.DateTime,CommonLibrary.DateTimeFormat)">
            <summary>
            Получить конец временного интервала, к которому относится дата.
            </summary>
            <param name="dateTime">Дата.</param>
            <param name="dateTimeFormat">Тип временного интервала.</param>
            <returns>Конец временного интервала.</returns>
        </member>
        <member name="M:CommonLibrary.DateTimeExtensions.ToHighBound(System.Nullable{System.DateTime},CommonLibrary.DateTimeFormat)">
            <summary>
            Получить конец временного интервала, к которому относится дата.
            </summary>
            <param name="dateTime">Дата.</param>
            <param name="dateTimeFormat">Тип временного интервала.</param>
            <returns>Конец временного интервала.</returns>
        </member>
        <member name="M:CommonLibrary.DateTimeExtensions.ToHighBound(System.Nullable{System.DateTime})">
            <summary>
            Получить конец временного интервала, к которому относится дата.
            Если дата содержит время, то преобразование выполняться не будет.
            </summary>
            <param name="dateTime">Дата.</param>
            <returns>Конец временного интервала.</returns>
        </member>
        <member name="M:CommonLibrary.DateTimeExtensions.TrimSeconds(System.DateTime)">
            <summary>
            Обрезать секунды у даты-времени.
            </summary>
            <param name="dateTime">Дата со временем.</param>
            <returns>Дата со временем, у которой обнулены секунды.</returns>
        </member>
        <member name="M:CommonLibrary.DateTimeExtensions.TrimSeconds(System.Nullable{System.DateTime})">
            <summary>
            Обрезать секунды у даты-времени.
            </summary>
            <param name="dateTime">Дата со временем.</param>
            <returns>Дата со временем, у которой обнулены секунды.</returns>
        </member>
        <member name="M:CommonLibrary.DateTimeExtensions.GetFirstDateOfWeek(System.DateTime)">
            <summary>
            Получить первый день недели.
            </summary>
            <param name="dayInWeek">День недели.</param>
            <returns>Возвращает первый день недели.</returns>
        </member>
        <member name="M:CommonLibrary.DateTimeExtensions.GetLastDateOfWeek(System.DateTime)">
            <summary>
            Возвращает последний день недели.
            </summary>
            <param name="dayInWeek">День недели.</param>
            <returns>Возвращает последний день недели.</returns>
        </member>
        <member name="M:CommonLibrary.DateTimeExtensions.GetFirstDayOfNextQuarter(System.DateTime)">
            <summary>
            Получить первый день следующего квартала относительно даты.
            </summary>
            <param name="dateTime">Дата.</param>
            <returns>Первый день следующего квартала.</returns>
        </member>
        <member name="M:CommonLibrary.DateTimeExtensions.GetQuarter(System.DateTime)">
            <summary>
            Получить номер текущего квартала.
            </summary>
            <param name="date">Дата.</param>
            <returns>Текущий квартал.</returns>
        </member>
        <member name="T:CommonLibrary.DateTimeFormatInfoExtensions">
            <summary>
            Класс расширений DateTimeFormatInfo.
            </summary>
        </member>
        <member name="F:CommonLibrary.DateTimeFormatInfoExtensions.getRealFormatMethod">
            <summary>
            Ссылка на метод.
            </summary>
        </member>
        <member name="T:CommonLibrary.DateTimeFormatInfoExtensions.GetRealFormatDelegate">
            <summary>
            Делегат, определяюший метод "System.DateTimeFormat.GetRealFormat".
            </summary>
            <param name="standardFormat">Строка со стандартным сокращенным форматом.</param>
            <param name="format">Формат даты-времени.</param>
            <returns>Строка с развернутым форматом.</returns>
        </member>
        <member name="F:CommonLibrary.DateTimeFormatInfoExtensions.getRealFormat">
            <summary>
            Метод для получения полной строки формата.
            </summary>
        </member>
        <member name="M:CommonLibrary.DateTimeFormatInfoExtensions.GetRealFormatString(System.Globalization.DateTimeFormatInfo,System.String)">
            <summary>
            Получить полную строку формата.
            </summary>
            <param name="format">Формат даты-времени.</param>
            <param name="standardFormat">Строка со стандартным сокращенным форматом.</param>
            <returns>Строка с развернутым форматом.</returns>
        </member>
        <member name="T:CommonLibrary.DelegateExtensions">
            <summary>
            Расширения для работы с делегатами.
            </summary>
        </member>
        <member name="F:CommonLibrary.DelegateExtensions.AllBindings">
            <summary>
            Все привязки для поиска полей с событиями в типах.
            </summary>
        </member>
        <member name="F:CommonLibrary.DelegateExtensions.eventFieldsCache">
            <summary>
            Кэш полей с событиями в типах.
            </summary>
        </member>
        <member name="M:CommonLibrary.DelegateExtensions.WithoutTarget(System.Delegate,System.Object)">
            <summary>
            Вернуть делегат с удаленными обработчиками, относящимися к указанному объекту.
            </summary>
            <param name="originalDelegate">Оригинальный делегат.</param>
            <param name="target">Объект, обработчики которого нужно удалить из делегата.</param>
            <returns>Делегат с удаленными обработчиками.</returns>
        </member>
        <member name="M:CommonLibrary.DelegateExtensions.RemoveAllEventHandlers``1(``0)">
            <summary>
            Удалить у объекта все обработчики событий.
            </summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="obj">Экземпляр объекта.</param>
            <returns>Множество делегатов содержащих удалённые обработчики.</returns>
        </member>
        <member name="M:CommonLibrary.DelegateExtensions.RemoveEventHandlers``1(``0,System.String)">
            <summary>
            Удалить у объекта все обработчики заданного события.
            </summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="obj">Экземпляр объекта.</param>
            <param name="eventName">Имя события, обработчики которого нужно удалить.</param>
            <returns>Множество делегатов содержащих удалённые обработчики.</returns>
        </member>
        <member name="M:CommonLibrary.DelegateExtensions.AddEventHandler``1(``0,System.String,System.Delegate)">
            <summary>
            Добавить к объекту обработчик события в виде делегата.
            </summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="obj">Экземпляр объекта.</param>
            <param name="eventName">Имя события.</param>
            <param name="eventHandler">Делегат с обработчиком события.</param>
        </member>
        <member name="M:CommonLibrary.DelegateExtensions.RemoveEventsHandlers``1(``0,System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo})">
            <summary>
            Удалить у объекта все обработчики заданных событий.
            </summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="obj">Экземпляр объекта.</param>
            <param name="eventFields">Множество полей событий.</param>
            <returns>Множество делегатов содержащих удалённые обработчики.</returns>
        </member>
        <member name="M:CommonLibrary.DelegateExtensions.GetEventFields(System.Type)">
            <summary>
            Получить у типа поля, содержащие события.
            </summary>
            <param name="type">Тип.</param>
            <returns>Список полей с событиями.</returns>
        </member>
        <member name="M:CommonLibrary.DelegateExtensions.GetStaticEventHandlers``1(``0)">
            <summary>
            Получить через экземпляра объекта обработчики статических событий.
            </summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="obj">Экземпляр объекта.</param>
            <returns>Обработчики статических событий.</returns>
        </member>
        <member name="M:CommonLibrary.DelegateExtensions.GetException(CommonLibrary.MethodThatThrows)">
            <summary>
            Получить исключение.
            </summary>
            <param name="method">Метод.</param>
            <returns>Исключение.</returns>
        </member>
        <member name="T:CommonLibrary.MethodThatThrows">
            <summary>
            Метод, который бросает исключение.
            </summary>
        </member>
        <member name="T:CommonLibrary.DictionaryExtensions">
            <summary>
            Расширения для работы со словарем.
            </summary>
        </member>
        <member name="M:CommonLibrary.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Получить значение по ключу.
            </summary>
            <typeparam name="TKey">Тип ключа.</typeparam>
            <typeparam name="TValue">Тип значения.</typeparam>
            <param name="dictionary">Словарь.</param>
            <param name="key">Ключ.</param>
            <returns>Найденное по ключу значение или "пустое" значение для данного типа, если по ключу ничего не найдено.</returns>
        </member>
        <member name="M:CommonLibrary.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Получить значение по ключу.
            </summary>
            <typeparam name="TKey">Тип ключа.</typeparam>
            <typeparam name="TValue">Тип значения.</typeparam>
            <param name="dictionary">Словарь.</param>
            <param name="key">Ключ.</param>
            <param name="defaultValue">Значение по-умолчанию, если по ключу значения не нашлось.</param>
            <returns>Найденное по ключу значение или значение по-умолчанию, если по ключу ничего не найдено.</returns>
        </member>
        <member name="T:CommonLibrary.ExceptionUtils">
            <summary>
            Вспомогательные методы для работы с исключениями.
            </summary>
        </member>
        <member name="M:CommonLibrary.ExceptionUtils.CaptureStackTrace(System.Exception)">
            <summary>
            Захватить стек-трейс метода, в котором сгенерировано исключение.
            </summary>
            <param name="ex">Исключение.</param>
            <remarks>Использовать, если в самом исключении стек-трейс по каким-либо причинам неполный.</remarks>
        </member>
        <member name="M:CommonLibrary.ExceptionUtils.UnpackSingleAggregateException(System.Exception)">
            <summary>
            Вытащить вложенный эксепшен из AggregateException, если вложен только один.
            </summary>
            <param name="ex">Эксепшен. Если это AggregateException и в него вложен только один эксепшен, то произойдет распаковка.</param>
            <returns>Если передан не AggregateException или в AggregateException вложено несколько эксепшенов, то вернется переданное значение,
            в противном случае - единственное вложенное в AggregateException.</returns>
        </member>
        <member name="T:CommonLibrary.GuidExtensions">
            <summary>
            Расширения для Guid.
            </summary>
        </member>
        <member name="M:CommonLibrary.GuidExtensions.ToShortString(System.Guid)">
            <summary>
            Получить первые 8 символов у идентификатора.
            </summary>
            <param name="id">Идентификатор.</param>
            <returns>Первые 8 символов.</returns>
        </member>
        <member name="T:CommonLibrary.Inflector">
            <summary>
            Инфлектор.
            </summary>
        </member>
        <member name="T:CommonLibrary.LinqExtensions">
            <summary>
            Расширения для Linq.
            </summary>
        </member>
        <member name="M:CommonLibrary.LinqExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Добавить в коллекцию перечень элементов.
            </summary>
            <typeparam name="T">Тип элементов коллекции.</typeparam>
            <param name="collection">Коллекция.</param>
            <param name="source">Перечень элементов, которые необходимо добавить.</param>
        </member>
        <member name="M:CommonLibrary.LinqExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Добавить в словарь несколько элементов.
            </summary>
            <typeparam name="TKey">Тип ключей словаря.</typeparam>
            <typeparam name="TValue">Тип значений словаря.</typeparam>
            <param name="dictionary">Словарь.</param>
            <param name="source">Коллекция пар, которые нужно добавить в словарь.</param>
        </member>
        <member name="M:CommonLibrary.LinqExtensions.SafeSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Проверить два перечисления на эквивалентность содержимого с учетом того, что коллекции могут быть Null.
            </summary>
            <typeparam name="T">Тип элементов коллекции.</typeparam>
            <param name="first">Первая коллекция.</param>
            <param name="second">Вторя коллекция.</param>
            <returns>True, если содержимое коллекций эквивалетно или они обе null. Иначе - false.</returns>
        </member>
        <member name="M:CommonLibrary.LinqExtensions.SafeSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Проверить два перечисления на эквивалентность содержимого с учетом того, что коллекции могут быть Null.
            </summary>
            <typeparam name="T">Тип элементов коллекции.</typeparam>
            <param name="first">Первая коллекция.</param>
            <param name="second">Вторя коллекция.</param>
            <param name="comparer">Сравнивальщик элементов.</param>
            <returns>True, если содержимое коллекций эквивалетно или они обе null. Иначе - false.</returns>
        </member>
        <member name="M:CommonLibrary.LinqExtensions.SequencePositionallyEquals``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Проверить два перечисления на эквивалентность содержимого с учетом того, что коллекции могут быть Null.
            </summary>
            <typeparam name="T">Тип элементов коллекции.</typeparam>
            <param name="first">Первая коллекция.</param>
            <param name="second">Вторя коллекция.</param>
            <returns>True, если содержимое коллекций эквивалетно или они обе null. Иначе - false.</returns>
        </member>
        <member name="M:CommonLibrary.LinqExtensions.SequenceEqualsWithExactOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Проверить два перечисления на эквивалентность с точным соблюдением одинакового порядка элемента в перечислениях.
            </summary>
            <typeparam name="T">Тип элемента коллекции.</typeparam>
            <param name="first">Первая коллекция.</param>
            <param name="second">Вторая коллекция.</param>
            <param name="comparer">Функция для сравнения элементов, например, object.Equals или object.ReferenceEquals.</param>
            <returns>True, если содержимое коллекций эквивалетно или они обе null. Иначе - false.</returns>
        </member>
        <member name="M:CommonLibrary.LinqExtensions.SafeSequenceEqual``1(``0[],``0[])">
            <summary>
            Проверить два массива на эквивалентность содержимого с учетом того, что коллекции могут быть Null.
            </summary>
            <typeparam name="T">Тип элементов массива.</typeparam>
            <param name="first">Первая массив.</param>
            <param name="second">Вторая массив.</param>
            <returns>True, если содержимое массивов эквивалетно или они оба null. Иначе - false.</returns>
        </member>
        <member name="M:CommonLibrary.LinqExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Выполнить действие для каждого элемента перечня.
            </summary>
            <typeparam name="T">Тип элементов перечня.</typeparam>
            <param name="collection">Перечень элементов.</param>
            <param name="action">Действие.</param>
        </member>
        <member name="M:CommonLibrary.LinqExtensions.ByParts``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Получить перечислитель объектов из источника, используя порционное чтение.
            </summary>
            <typeparam name="T">Тип объектов в источнике.</typeparam>
            <typeparam name="TValue">Тип коллекции ключей, по которым будет выполняться выборка объектов.</typeparam>
            <param name="source">Источник данных.</param>
            <param name="selector">Селектор - лямбда выражение, которое определяет ключ, по которому будет выполняться поиск объектов в источнике.</param>
            <param name="blockSize">Размер блока данных. Если получение данных выполняется с SQL сервера, то значение не должно превышать 2100.</param>
            <param name="values">Список всех ключей объектов, которые надо поблочно получить из источника данных.</param>
            <returns>Перечислитель объектов.</returns>
            <remarks>Если в списке ключей есть дубли, то в итоговом результате могут также присутствовать дубли.</remarks>
        </member>
        <member name="M:CommonLibrary.LinqExtensions.SplitPages``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Разбить последовательность на страницы.
            </summary>
            <typeparam name="T">Тип элементов последовательности.</typeparam>
            <param name="source">Последовательность.</param>
            <param name="pageSize">Размер страницы.</param>
            <returns>Набор страниц.</returns>
        </member>
        <member name="M:CommonLibrary.LinqExtensions.GetPropertyTypeProperties``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Получить свойства заданного типа, из типов других свойств.
            </summary>
            <typeparam name="TProperty">Тип получаемых свойств.</typeparam>
            <param name="properties">Свойства, из которых взять типы.</param>
            <returns>Пары - свойство переданное, свойство полученное из переданного типа.</returns>
        </member>
        <member name="M:CommonLibrary.LinqExtensions.HasAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Проверить наличия атрибута у члена класса.
            </summary>
            <typeparam name="T">Тип атрибута.</typeparam>
            <param name="memberInfo">Член класса.</param>
            <returns>true - атрибут задан.</returns>
        </member>
        <member name="M:CommonLibrary.LinqExtensions.SkipNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Отбросить null значения из коллекции.
            </summary>
            <typeparam name="T">Тип элементов коллекции.</typeparam>
            <param name="collection">Коллекция.</param>
            <returns>Коллекция без null значений.</returns>
        </member>
        <member name="M:CommonLibrary.LinqExtensions.SkipNullOrEmpty(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Отбросить null и пустые строки из коллекции.
            </summary>
            <param name="collection">Коллекция.</param>
            <returns>Коллекция без null и пустых строк.</returns>
        </member>
        <member name="M:CommonLibrary.LinqExtensions.SkipNullOrWhiteSpace(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Отбросить null и пустые строки с пробелами из коллекции.
            </summary>
            <param name="collection">Коллекция.</param>
            <returns>Коллекция без null и пустых строк с пробелами.</returns>
        </member>
        <member name="M:CommonLibrary.LinqExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Создать множество из коллекции элементов.
            </summary>
            <typeparam name="T">Тип элементов коллекции.</typeparam>
            <param name="collection">Коллекция.</param>
            <returns>Множество.</returns>
        </member>
        <member name="M:CommonLibrary.LinqExtensions.OfType``1(System.Collections.Generic.IEnumerable{``0},System.Type)">
            <summary>
            Получить из коллекции все объекты заданного типа.
            </summary>
            <typeparam name="TSource">Тип элементов коллекции.</typeparam>
            <param name="source">Коллекция.</param>
            <param name="type">Тип элементов, которые нужно получить.</param>
        </member>
        <member name="M:CommonLibrary.LinqExtensions.Cast(System.Linq.IQueryable,System.Type)">
            <summary>
            Привести все объекты запроса к заданному типу.
            </summary>
            <param name="query">Запрос.</param>
            <param name="type">Тип элементов, к которому нужно привести все объекты.</param>
        </member>
        <member name="M:CommonLibrary.LinqExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Получить индекс первого вхождения экземпляра, удовлетворяющего заданному условию.
            </summary>
            <typeparam name="T">Тип элементов коллекции.</typeparam>
            <param name="source">Коллекция.</param>
            <param name="condition">Условие.</param>
            <remarks>
            По мотивам http://stackoverflow.com/questions/4075340/finding-first-index-of-element-that-matches-a-condition-using-linq.
            </remarks>
        </member>
        <member name="T:CommonLibrary.NotifyCollectionChangedEventArgsExtensions">
            <summary>
            Расширения для работы с NotifyCollectionChangedEventArgs.
            </summary>
        </member>
        <member name="M:CommonLibrary.NotifyCollectionChangedEventArgsExtensions.GetAddedItems``1(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Получить список элементов добавленных в коллекцию.
            </summary>
            <typeparam name="T">Тип элемента.</typeparam>
            <param name="e">Параметр события изменения коллекции.</param>
            <returns>Список добавленных элементов в коллекцию.</returns>
        </member>
        <member name="M:CommonLibrary.NotifyCollectionChangedEventArgsExtensions.GetRemovedItems``1(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Получить список элементов удаленных из коллекции.
            </summary>
            <typeparam name="T">Тип элемента.</typeparam>
            <param name="e">Параметр события изменения коллекции.</param>
            <returns>Список удаленных элементов из коллекции.</returns>
        </member>
        <member name="M:CommonLibrary.NotifyCollectionChangedEventArgsExtensions.GetModifiedItems``1(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Получить список измененных элементов коллекции.
            </summary>
            <typeparam name="T">Тип элемента.</typeparam>
            <param name="e">Параметр события изменения коллекции.</param>
            <returns>Список измененных элементов коллекции.</returns>
        </member>
        <member name="T:CommonLibrary.ReflectionExtensions">
            <summary>
            Расширения для работы с Reflection.
            </summary>
        </member>
        <member name="F:CommonLibrary.ReflectionExtensions.log">
            <summary>
            Логгер.
            </summary>
        </member>
        <member name="F:CommonLibrary.ReflectionExtensions.exceptionInternalPreserveStackTrace">
            <summary>
            Информация о методе для сохранения оригинального стека исключений.
            </summary>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.TryGetCompositePropertyValue``1(System.Object,System.String,``0@)">
            <summary>
            Получить значение составного (вложенного) свойства.
            </summary>
            <typeparam name="T">Тип значения составного (вложенного) свойства.</typeparam>
            <param name="source">Исходный объект.</param>
            <param name="compositePropertyName">Имя составного свойства (части разделены точкой).</param>
            <param name="compositePropertyValue">Значение составного (вложенного) свойства.</param>
            <returns>Признак того, что значение удалось получить.</returns>
            <remarks>Если что-то не так (в середине получился null или не нашлось свойство), возвращается false.</remarks>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.GetMostSpecificProperty(System.Type,System.String)">
            <summary>
            Получить наиболее конкретное публичное свойство с заданным именем (при использовании в потомках одноименного свойства с new).
            </summary>
            <param name="objectType">Тип объекта.</param>
            <param name="propertyName">Имя свойства.</param>
            <returns>Свойство.</returns>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.GetReflectionPropertyValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Получить значение свойства через Reflection с сохранением оригинального стека исключения.
            </summary>
            <param name="propertyInfo">Информация о свойстве.</param>
            <param name="target">Объект, для которого получаем значение свойства или null, если свойство статическое.</param>
            <returns>Значение свойства.</returns>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.GetReflectionPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object[])">
            <summary>
            Получить значение свойства через Reflection с сохранением оригинального стека исключения.
            </summary>
            <param name="propertyInfo">Информация о свойстве.</param>
            <param name="target">Объект, для которого получаем значение свойства или null, если свойство статическое.</param>
            <param name="index">Значение индекса для свойства-индексатора.</param>
            <returns>Значение свойства.</returns>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.GetReflectionFieldValue(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Получить значение поля через Reflection с сохранением оригинального стека исключения.
            </summary>
            <param name="fieldInfo">Информация о поле.</param>
            <param name="target">Объект, для которого получаем значение поля или null, если поле статическое.</param>
            <returns>Значение поля.</returns>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.SetReflectionPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Задать значение свойства через Reflection с сохранением оригинального стека исключения.
            </summary>
            <param name="propertyInfo">Информация о свойстве.</param>
            <param name="target">Объект, для свойства которого задается значение или null, если свойство статическое.</param>
            <param name="value">Значение свойства.</param>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.SetReflectionPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Object[])">
            <summary>
            Задать значение свойства через Reflection с сохранением оригинального стека исключения.
            </summary>
            <param name="propertyInfo">Информация о свойстве.</param>
            <param name="target">Объект, для свойства которого задается значение или null, если свойство статическое.</param>
            <param name="value">Значение свойства.</param>
            <param name="index">Значение индекса для свойства-индексатора.</param>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.SetReflectionFieldValue(System.Reflection.FieldInfo,System.Object,System.Object)">
            <summary>
            Задать значение поля через Reflection с сохранением оригинального стека исключения.
            </summary>
            <param name="fieldInfo">Информация о поле.</param>
            <param name="target">Объект, для поля которого задается значение или null, если поле статическое.</param>
            <param name="value">Значение поля.</param>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.ReflectionInvoke(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            Вызвать метод через Reflection с сохранением оригинального стека исключения.
            </summary>
            <param name="methodInfo">Информация о методе.</param>
            <param name="target">Объект, метод которого вызывается или null, если метод статический.</param>
            <param name="args">Параметры метода.</param>
            <returns>Результат выполнения метода.</returns>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.ReflectionInvoke(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Вызвать конструктор через reflection с получением оригинального стека исключения.
            </summary>
            <param name="constructorInfo">Информация о конструкторе.</param>
            <param name="args">Параметры конструктора.</param>
            <returns>Созданный конструктором объект.</returns>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.ExecuteWithPreservedStackTrace``1(``0,System.Func{``0,System.Object})">
            <summary>
            Выполнить функцию с сохранением оригинального стека исключения.
            </summary>
            <param name="arg">Аргумент.</param>
            <param name="func">Функция.</param>
            <typeparam name="T">Тип аругмента.</typeparam>
            <returns>Значение функции.</returns>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.ExecuteWithPreservedStackTrace(System.Func{System.Object})">
            <summary>
            Выполнить функцию с сохранением оригинального стека исключения.
            </summary>
            <param name="func">Функция.</param>
            <returns>Значение функции.</returns>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.ExecuteWithPreservedStackTrace``2(``0,``1,System.Func{``0,``1,System.Object})">
            <summary>
            Выполнить метод с сохранением оригинального стека исключения.
            </summary>
            <param name="arg1">Аргумент 1.</param>
            <param name="arg2">Аргумент 2.</param>
            <param name="func">Метод.</param>
            <typeparam name="T1">Тип аргумента 1.</typeparam>
            <typeparam name="T2">Тип аргумента 2.</typeparam>
            <returns>Значение функции.</returns>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.ExecuteWithPreservedStackTrace``3(``0,``1,``2,System.Func{``0,``1,``2,System.Object})">
            <summary>
            Выполнить метод с сохранением оригинального стека исключения.
            </summary>
            <param name="arg1">Аргумент 1.</param>
            <param name="arg2">Аргумент 2.</param>
            <param name="arg3">Аргумент 3.</param>
            <param name="func">Метод.</param>
            <typeparam name="T1">Тип аргумента 1.</typeparam>
            <typeparam name="T2">Тип аргумента 2.</typeparam>
            <typeparam name="T3">Тип аргумента 3.</typeparam>
            <returns>Значение функции.</returns>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.ExecuteWithPreservedStackTrace``1(``0,System.Action{``0})">
            <summary>
            Выполнить метод с сохранением оригинального стека исключения.
            </summary>
            <param name="arg">Аргумент.</param>
            <param name="action">Метод.</param>
            <typeparam name="T">Тип аргумента.</typeparam>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.ExecuteWithPreservedStackTrace``2(``0,``1,System.Action{``0,``1})">
            <summary>
            Выполнить метод с сохранением оригинального стека исключения.
            </summary>
            <param name="arg1">Аргумент 1.</param>
            <param name="arg2">Аргумент 2.</param>
            <param name="action">Метод.</param>
            <typeparam name="T1">Тип аргумента 1.</typeparam>
            <typeparam name="T2">Тип аргумента 2.</typeparam>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.ExecuteWithPreservedStackTrace``3(``0,``1,``2,System.Action{``0,``1,``2})">
            <summary>
            Выполнить метод с сохранением оригинального стека исключения.
            </summary>
            <param name="arg1">Аргумент 1.</param>
            <param name="arg2">Аргумент 2.</param>
            <param name="arg3">Аргумент 3.</param>
            <param name="action">Метод.</param>
            <typeparam name="T1">Тип аргумента 1.</typeparam>
            <typeparam name="T2">Тип аргумента 2.</typeparam>
            <typeparam name="T3">Тип аргумента 3.</typeparam>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.ExecuteWithPreservedStackTrace``4(``0,``1,``2,``3,System.Action{``0,``1,``2,``3})">
            <summary>
            Выполнить метод с сохранением оригинального стека исключения.
            </summary>
            <param name="arg1">Аргумент 1.</param>
            <param name="arg2">Аргумент 2.</param>
            <param name="arg3">Аргумент 3.</param>
            <param name="arg4">Аргумент 4.</param>
            <param name="action">Метод.</param>
            <typeparam name="T1">Тип аргумента 1.</typeparam>
            <typeparam name="T2">Тип аргумента 2.</typeparam>
            <typeparam name="T3">Тип аргумента 3.</typeparam>
            <typeparam name="T4">Тип аргумента 4.</typeparam>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.GetExecutingAssemblyPath">
            <summary>
            Получить путь до сборки, которая содержит выполняемый в текущий момент код.
            </summary>
            <returns>Путь до сборки.</returns>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.GetInnerException(System.Reflection.TargetInvocationException)">
            <summary>
            Получить реальное внутреннее исключение при вызове методов через reflection.
            </summary>
            <param name="exception">Ошибка вызова метода через reflection.</param>
            <returns>Реальное внутреннее исключение.</returns>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.PreserveStackTrace(System.Exception)">
            <summary>
            Сохранить оригинальный стек исключения.
            </summary>
            <param name="exception">Исключение.</param>
        </member>
        <member name="M:CommonLibrary.ReflectionExtensions.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Object[])">
            <summary>
            Установить значение свойства.
            </summary>
            <param name="propertyInfo">Метаинформация о свойстве.</param>
            <param name="target">Целевой объект.</param>
            <param name="value">Значение.</param>
            <param name="index">Значения индекса для индексированных свойств.</param>
        </member>
        <member name="T:CommonLibrary.RsaExtensions">
            <summary>
            Расширения для сериализации RSAParameters.
            </summary>
        </member>
        <member name="M:CommonLibrary.RsaExtensions.ToXmlString(System.Security.Cryptography.RSAParameters)">
            <summary>
            Преобразовать ключ в xml-строку.
            </summary>
            <param name="clientKey">Ключ.</param>
            <returns>Xml-строка.</returns>
        </member>
        <member name="M:CommonLibrary.RsaExtensions.FromXmlString(System.String)">
            <summary>
            Преобразовать в ключ из xml-строки.
            </summary>
            <param name="clientKey">Xml-строка с ключом.</param>
            <returns>Ключ.</returns>
        </member>
        <member name="T:CommonLibrary.StreamExtensions">
            <summary>
            Методы расширения для работы с потоковыми данными.
            </summary>
        </member>
        <member name="M:CommonLibrary.StreamExtensions.Compress(System.IO.Stream,System.IO.Compression.CompressionLevel)">
            <summary>
            Получить сжатый поток.
            </summary>
            <param name="originalStream">Несжатый оригинальный поток.</param>
            <param name="compressionLevel">Уровень сжатия.</param>
            <returns>Сжатый поток.</returns>
            <remarks>Оригинальный поток может быть закрыт после выполнения метода, т.к. уже полностью прочитан в процессе сжатия.</remarks>
        </member>
        <member name="M:CommonLibrary.StreamExtensions.Compress(System.IO.Stream)">
            <summary>
            Получить сжатый поток.
            </summary>
            <param name="originalStream">Несжатый оригинальный поток.</param>
            <returns>Сжатый поток.</returns>
        </member>
        <member name="M:CommonLibrary.StreamExtensions.Decompress(System.IO.Stream)">
            <summary>
            Распаковать сжатый поток.
            </summary>
            <param name="compressedStream">Сжатый поток.</param>
            <returns>Поток, предоставляющий доступ к распакованным данным.</returns>
            <remarks>Возвращается обертка, сжатый поток сразу после выполнения метода закрывать нельзя.</remarks>
        </member>
        <member name="T:CommonLibrary.TypeExtensions">
            <summary>
            Расширения для работы с Type.
            </summary>
        </member>
        <member name="F:CommonLibrary.TypeExtensions.TypeOrInterfacePropertiesCache">
            <summary>
            Кэш свойств типа/интерфейса.
            </summary>
            <remarks>
            Получить свойства интерфейса включая унаследованные интерфейсы не просто, поэтому кешируем.
            </remarks>
        </member>
        <member name="F:CommonLibrary.TypeExtensions.TypedPropertiesCache">
            <summary>
            Кэш типизированных свойств типа/интерфейса (ключ - пара "тип/интерфейс; тип свойства").
            </summary>
        </member>
        <member name="F:CommonLibrary.TypeExtensions.convertibleTypes">
            <summary>
            Соответствие, отображающее факт возможности неявного конвертирования типов.
            </summary>
            <remarks>Таблица взята с http://msdn.microsoft.com/en-us/library/y5b434w4(v=vs.110).aspx. </remarks>
        </member>
        <member name="M:CommonLibrary.TypeExtensions.GetMostDerivedAttribute``1(System.Type,System.Func{``0,System.Boolean})">
            <summary>
            Получить атрибут, который объявлен на переданном классе или на предках этого класса
            (выбирается атрибут с самого близкого предка).
            </summary>
            <typeparam name="T">Тип атрибуты.</typeparam>
            <param name="type">Класс, на котором надо искать атрибут.</param>
            <param name="filter">Дополнительный фильтр на атрибут.</param>
            <returns>Найденный атрибут. Null, если нигде в иерархии нет походящих атрибутов.</returns>
        </member>
        <member name="M:CommonLibrary.TypeExtensions.GetFullNameWithAssemblyName(System.Type)">
            <summary>
            Возвращает полное имя типа сущности, включая имя сборки, но без указания версии, культуры и токена ключа.
            </summary>
            <param name="type">Тип.</param>
            <returns>Имя типа сущности, включая имя сборки, но без указания версии, культуры и токена ключа.</returns>
        </member>
        <member name="M:CommonLibrary.TypeExtensions.GetTypeOrInterfaceProperty(System.Type,System.String)">
            <summary>
            Получить информацию о свойстве типа (в том числе, если тип является интерфейсом).
            </summary>
            <param name="type">Тип.</param>
            <param name="propertyName">Имя свойства.</param>
            <returns>Объект с информацией о свойстве.</returns>
        </member>
        <member name="M:CommonLibrary.TypeExtensions.GetTypeOrInterfaceProperties(System.Type)">
            <summary>
            Получить информацию о свойствах типа (в том числе, если тип является интерфейсом).
            </summary>
            <param name="type">Тип.</param>
            <returns>Массив объектов с информацией о свойствах.</returns>
        </member>
        <member name="M:CommonLibrary.TypeExtensions.GetTypeOrInterfaceProperties(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Получить информацию о свойствах типа (в том числе, если тип является интерфейсом).
            </summary>
            <param name="type">Тип.</param>
            <param name="bindingAttributes">Атрибуты области видимости свойств.</param>
            <returns>Массив объектов с информацией о свойствах.</returns>
        </member>
        <member name="M:CommonLibrary.TypeExtensions.GetTypeProperties``1(System.Type)">
            <summary>
            Получить свойства заданного типа.
            </summary>
            <typeparam name="TProperty">Тип получаемых свойств.</typeparam>
            <param name="type">Тип, у которого достаются свойства.</param>
            <returns>Свойства.</returns>
        </member>
        <member name="M:CommonLibrary.TypeExtensions.IsInheritanceHierarchy(System.Type,System.Type)">
            <summary>
            Проверить, представляют ли два типа иерархию наследования.
            </summary>
            <param name="firstType">Первый тип.</param>
            <param name="secondType">Второй тип.</param>
            <returns>True - если один из типов является субклассом другого, false - если классы из разных иерархии.</returns>
            <remarks>Не справедлива обратная проверка при передаче объектов с числовым типом.</remarks>
        </member>
        <member name="T:CommonLibrary.FileLocationResolver">
            <summary>
            Класс для определения физического размещения файлов. Используется, когда физическое размещение файла не известно на момент компиляции.
            </summary>
        </member>
        <member name="P:CommonLibrary.FileLocationResolver.Instance">
            <summary>
            Экземпляр объекта.
            </summary>
        </member>
        <member name="E:CommonLibrary.FileLocationResolver.Resolve">
            <summary>
            Событие для определения места размещения файла.
            </summary>
        </member>
        <member name="M:CommonLibrary.FileLocationResolver.ResolveFileLocation(System.String)">
            <summary>
            Определить место размещения указанного файла.
            </summary>
            <param name="fileName">Имя файла без пути.</param>
            <returns>Путь до файла, без имени файла, либо null, если файл не найден.</returns>
        </member>
        <member name="M:CommonLibrary.FileLocationResolver.ResolveDll(System.String)">
            <summary>
            Найти и загрузить Dll.
            </summary>
            <param name="dllName">Имя dll.</param>
            <returns>Директория, откуда была загружена dll или null, если загрузка не удалась.</returns>
        </member>
        <member name="M:CommonLibrary.FileLocationResolver.ResolveFileExecutingLocation(System.String)">
            <summary>
            Определить локальное место размещения указанного файла, рядом с исполняемой сборкой.
            </summary>
            <param name="fileName">Имя файла без пути.</param>
            <returns>Путь до файла, без имени файла, либо null, если файл не найден.</returns>
        </member>
        <member name="M:CommonLibrary.FileLocationResolver.ResolveFileExternalLocation(System.String)">
            <summary>
            Определить внешнее место размещения указанного файла.
            </summary>
            <param name="fileName">Имя файла без пути.</param>
            <returns>Путь до файла, без имени файла, либо null, если файл не найден.</returns>
        </member>
        <member name="M:CommonLibrary.FileLocationResolver.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:CommonLibrary.ResolveFileLocationEventArgs">
            <summary>
            Аргументы события ResolveFileLocation.
            </summary>
        </member>
        <member name="P:CommonLibrary.ResolveFileLocationEventArgs.Name">
            <summary>
            Имя файла файла без пути.
            </summary>
        </member>
        <member name="P:CommonLibrary.ResolveFileLocationEventArgs.Location">
            <summary>
            Полный путь к директории, в которой размещается файл.
            </summary>
        </member>
        <member name="M:CommonLibrary.ResolveFileLocationEventArgs.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
            <param name="name">Имя файла без пути.</param>
        </member>
        <member name="T:CommonLibrary.FileName">
            <summary>
            Структурированное имя файла.
            </summary>
        </member>
        <member name="F:CommonLibrary.FileName.FileExtensionDelimiter">
            <summary>
            Разделитель имени и расширения.
            </summary>
        </member>
        <member name="P:CommonLibrary.FileName.Name">
            <summary>
            Имя файла.
            </summary>
        </member>
        <member name="P:CommonLibrary.FileName.Extension">
            <summary>
            Расширение.
            </summary>
        </member>
        <member name="M:CommonLibrary.FileName.Parse(System.String)">
            <summary>
            Распарсить имя файла.
            </summary>
            <param name="fileName">Строковое имя файла.</param>
        </member>
        <member name="M:CommonLibrary.FileName.Split(System.String)">
            <summary>
            Разделить имя файла на две части.
            </summary>
            <param name="fileName">Строковое имя файла.</param>
        </member>
        <member name="T:CommonLibrary.Graph.Flowchart">
            <summary>
            Граф типа "блок-схема".
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.Flowchart.Start">
            <summary>
            Блок "Начало".
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.Flowchart.End">
            <summary>
            Блок "Конец".
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.Flowchart.IsValid">
            <summary>
            Признак того, что модель графа валидная.
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.Flowchart.FlowSteps">
            <summary>
            Вершины, которые соответствуют реальным блокам в блок-схеме.
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.Flowchart.VertexAddContext">
            <summary>
            Контекст добавления новой вершины.
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.Flowchart.SelectedItems">
            <summary>
            Выделенные элементы блок-схемы.
            </summary>
        </member>
        <member name="F:CommonLibrary.Graph.Flowchart.selectedItemsCache">
            <summary>
            Временное хранилище выделенных элементов.
            </summary>
        </member>
        <member name="E:CommonLibrary.Graph.Flowchart.Refreshed">
            <summary>
            Событие обновления модели.
            </summary>
        </member>
        <member name="M:CommonLibrary.Graph.Flowchart.AddEdge(CommonLibrary.Graph.FlowchartVertexBase,CommonLibrary.Graph.FlowchartVertexBase)">
            <summary>
            Добавить ребро графа.
            </summary>
            <param name="source">Источник.</param>
            <param name="target">Приемник.</param>
        </member>
        <member name="M:CommonLibrary.Graph.Flowchart.AddEdge(CommonLibrary.Graph.FlowchartVertexBase,CommonLibrary.Graph.FlowchartVertexBase,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Добавить ребро графа.
            </summary>
            <param name="source">Источник.</param>
            <param name="target">Приемник.</param>
            <param name="sourceConnectionPointId">Идентификатор точки соединения для источника.</param>
            <param name="targetConnectionPointId">Идентификатор точки соединения для приемника.</param>
        </member>
        <member name="M:CommonLibrary.Graph.Flowchart.AddEdge(CommonLibrary.Graph.FlowchartVertexBase,CommonLibrary.Graph.FlowchartVertexBase,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Добавить ребро графа.
            </summary>
            <param name="source">Источник.</param>
            <param name="target">Приемник.</param>
            <param name="sourceConnectionPointId">Идентификатор точки соединения для источника.</param>
            <param name="targetConnectionPointId">Идентификатор точки соединения для приемника.</param>
            <param name="label">Метка.</param>
        </member>
        <member name="M:CommonLibrary.Graph.Flowchart.SplitEdgeByVertex(CommonLibrary.Graph.FlowchartEdge,CommonLibrary.Graph.FlowchartVertexBase)">
            <summary>
            Вставить вершину в ребро, разделив его на две части.
            </summary>
            <param name="edge">Ребро.</param>
            <param name="vertex">Вершина.</param>
        </member>
        <member name="M:CommonLibrary.Graph.Flowchart.JoinInOutEdgeOfVertex(CommonLibrary.Graph.FlowchartVertexBase)">
            <summary>
            Объединить входящее и исходящее ребра вершины (извлечь вершину из графа).
            </summary>
            <param name="vertex">Вершина.</param>
        </member>
        <member name="M:CommonLibrary.Graph.Flowchart.MoveVertex(CommonLibrary.Graph.FlowchartVertexBase,CommonLibrary.Graph.FlowchartEdge)">
            <summary>
            Перенести вершину из текущего местоположения на другое ребро.
            </summary>
            <param name="vertex">Вершина, которую нужно перенести.</param>
            <param name="edge">Ребро, на которое перенести вершину.</param>
        </member>
        <member name="M:CommonLibrary.Graph.Flowchart.CanMoveVertex(CommonLibrary.Graph.FlowchartVertexBase,CommonLibrary.Graph.FlowchartEdge)">
            <summary>
            Проверить, можно ли перенести вершину на новое место.
            </summary>
            <param name="vertex">Вершина.</param>
            <param name="edge">Ребро, на которое нужно перенести вершину.</param>
            <returns>True - если вершину можно перенести, False - иначе.</returns>
        </member>
        <member name="M:CommonLibrary.Graph.Flowchart.Reset">
            <summary>
            Сбросить состояние блок-схемы в начальное, когда есть только блоки Начало и Конец.
            </summary>
        </member>
        <member name="M:CommonLibrary.Graph.Flowchart.AddConditionalEdge(CommonLibrary.Graph.ConditionVertex,CommonLibrary.Graph.FlowchartVertexBase,System.Boolean)">
            <summary>
            Добавить условное ребро.
            </summary>
            <param name="conditionVertex">Блок "Условие".</param>
            <param name="targetVertex">Целевая вершина.</param>
            <param name="conditionValue">Значение условия для перехода.</param>
        </member>
        <member name="M:CommonLibrary.Graph.Flowchart.AssignSelectionCache(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Означить кэш выделенных элементов.
            </summary>
            <param name="selectedItems">Выделенные элементы.</param>
        </member>
        <member name="M:CommonLibrary.Graph.Flowchart.RestoreSelection">
            <summary>
            Восстановить выделение из кэша.
            </summary>
        </member>
        <member name="M:CommonLibrary.Graph.Flowchart.AddConditionEndVertex(CommonLibrary.Graph.ConditionVertex)">
            <summary>
            Добавить соединитель для блока "Условие".
            </summary>
            <param name="conditionVertex">Блок "Условие".</param>
            <returns>Соединитель блока "Условие".</returns>
        </member>
        <member name="M:CommonLibrary.Graph.Flowchart.SplitEdgeByVertex(CommonLibrary.Graph.FlowchartEdge,CommonLibrary.Graph.FlowchartVertexBase,System.Boolean)">
            <summary>
            Вставить вершину в ребро, разделив его на две части.
            </summary>
            <param name="edge">Ребро.</param>
            <param name="vertex">Вершина.</param>
            <param name="splitBySubGraph">Нужно вставлять вершину вместе с подграфом, который идёт от неё.</param>
        </member>
        <member name="M:CommonLibrary.Graph.Flowchart.NormalizeGraph(System.Collections.Generic.IList{CommonLibrary.Graph.FlowchartVertexBase},System.Collections.Generic.IList{CommonLibrary.Graph.FlowchartEdge})">
            <summary>
            Нормализовать граф, удалив промежуточные связывающие элементы между блоками.
            </summary>
            <param name="vertices">Вершины графа.</param>
            <param name="edges">Рёбра графа.</param>
        </member>
        <member name="M:CommonLibrary.Graph.Flowchart.GetSubgraph(CommonLibrary.Graph.FlowchartVertexBase)">
            <summary>
            Получить подграф, который начинается с заданной вершины.
            </summary>
            <param name="startVertex">Начальная вершина подграфа.</param>
            <returns>Коллекция вершин подграфа.</returns>
        </member>
        <member name="M:CommonLibrary.Graph.Flowchart.IsEdgeInsideConditionSubgraph(CommonLibrary.Graph.ConditionVertex,CommonLibrary.Graph.FlowchartEdge)">
            <summary>
            Проверка, что ребро лежит внутри условия.
            </summary>
            <param name="condition">Вершина с условием.</param>
            <param name="edge">Проверяемое ребро.</param>
            <returns>True - если ребро лежит внутри условия. Иначе - false.</returns>
        </member>
        <member name="E:CommonLibrary.Graph.Flowchart.PropertyChanged">
            <summary>
            Raised when a property on this object has a new value.
            </summary>
        </member>
        <member name="T:CommonLibrary.Graph.FlowchartEdge">
            <summary>
            Ребро графа.
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.FlowchartEdge.Text">
            <summary>
            Метка.
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.FlowchartEdge.ConditionValue">
            <summary>
            Значение условия для условного перехода.
            Если переход является безусловным, то null.
            </summary>
        </member>
        <member name="M:CommonLibrary.Graph.FlowchartEdge.#ctor(CommonLibrary.Graph.FlowchartVertexBase,CommonLibrary.Graph.FlowchartVertexBase)">
            <summary>
            Конструктор.
            </summary>
            <param name="source">Вершина-источник.</param>
            <param name="target">Вершина-приемник.</param>
        </member>
        <member name="T:CommonLibrary.Graph.FlowchartEdgeEqualityComparer">
            <summary>
            Компаратор для проверки на равенство в блок-схеме двух рёбер.
            </summary>
        </member>
        <member name="T:CommonLibrary.Graph.FlowStepVertex">
            <summary>
            Вершина, которая является реальным этапом в блок-схеме.
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.FlowStepVertex.Icon">
            <summary>
            Иконка.
            </summary>
        </member>
        <member name="T:CommonLibrary.Graph.ProcessVertex">
            <summary>
            Блок типа "процесс".
            </summary>
        </member>
        <member name="T:CommonLibrary.Graph.StartVertex">
            <summary>
            Блок начала схемы.
            </summary>
        </member>
        <member name="T:CommonLibrary.Graph.EndVertex">
            <summary>
            Блок завершения схемы.
            </summary>
        </member>
        <member name="T:CommonLibrary.Graph.ConditionVertex">
            <summary>
            Блок типа "условие".
            </summary>
        </member>
        <member name="T:CommonLibrary.Graph.ConditionEndVertex">
            <summary>
            Блок, соединяющий ветки условия.
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.ConditionEndVertex.ConditionVertex">
            <summary>
            Условие, соответствующее данному блоку.
            </summary>
        </member>
        <member name="T:CommonLibrary.Graph.FlowchartVertexAddContext">
            <summary>
            Контекст добавления новой вершины в блок-схеме.
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.FlowchartVertexAddContext.Edge">
            <summary>
            Ребро, на которое будет добавлена новая вершина.
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.FlowchartVertexAddContext.EmptyText">
            <summary>
            Текст в пустой новой вершине.
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.FlowchartVertexAddContext.AddedVertexIds">
            <summary>
            ИД-шники добавленных вершин.
            </summary>
        </member>
        <member name="M:CommonLibrary.Graph.FlowchartVertexAddContext.AddVertex(CommonLibrary.Graph.FlowchartVertexBase)">
            <summary>
            Добавить вершину.
            </summary>
            <param name="vertex">Вершина.</param>
        </member>
        <member name="M:CommonLibrary.Graph.FlowchartVertexAddContext.#ctor(CommonLibrary.Graph.FlowchartEdge,System.String)">
            <summary>
            Конструктор.
            </summary>
            <param name="edge">Ребро для вставки в него вершины.</param>
            <param name="emptyText">Текст в пустой новой вершине.</param>
        </member>
        <member name="T:CommonLibrary.Graph.FlowchartVertexBase">
            <summary>
            Базовый класс для вершин графа типа "блок-схема".
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.FlowchartVertexBase.Data">
            <summary>
            Данные вершины.
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.FlowchartVertexBase.Text">
            <summary>
            Текст вершины.
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.FlowchartVertexBase.EmptyText">
            <summary>
            Текст пустой вершины.
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.FlowchartVertexBase.DisplayValuePropertyName">
            <summary>
            Имя свойства, в котором хранится отображаемое значение данных.
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.FlowchartVertexBase.IsSelectable">
            <summary>
            Признак того, что вершину можно выделять в блок-схеме.
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.FlowchartVertexBase.IsSelected">
            <summary>
            Признак того, что вершина является выделенной в графе.
            </summary>
        </member>
        <member name="P:CommonLibrary.Graph.FlowchartVertexBase.Shape">
            <summary>
            Форма для отображения вершины.
            </summary>
        </member>
        <member name="M:CommonLibrary.Graph.FlowchartVertexBase.UpdateText">
            <summary>
            Обновить текст.
            </summary>
        </member>
        <member name="M:CommonLibrary.Graph.FlowchartVertexBase.UnsubscribeFromDisplayValue">
            <summary>
            Отписаться от события изменения отображаемого значения данных.
            </summary>
        </member>
        <member name="M:CommonLibrary.Graph.FlowchartVertexBase.SubscribeToDisplayValue">
            <summary>
            Подписаться на событие изменения отображаемого значения данных.
            </summary>
        </member>
        <member name="T:CommonLibrary.Hashing.IPasswordHashManager">
            <summary>
            Интерфейс менеджера тестирования.
            </summary>
        </member>
        <member name="M:CommonLibrary.Hashing.IPasswordHashManager.GenerateHash(System.String)">
            <summary>
            Генерация хэша пароля.
            </summary>
            <param name="password">Пароль.</param>
            <returns>Хэш пароля.</returns>
        </member>
        <member name="M:CommonLibrary.Hashing.IPasswordHashManager.GenerateSalt">
            <summary>
            Генерация соли.
            </summary>
            <returns>Массив символов для соли.</returns>
        </member>
        <member name="M:CommonLibrary.Hashing.IPasswordHashManager.GenerateHash(System.Security.SecureString)">
            <summary>
            Генерация хэша пароля.
            </summary>
            <param name="password">Хэш пароля.</param>
            <returns>Хэш пароля.</returns>
        </member>
        <member name="M:CommonLibrary.Hashing.IPasswordHashManager.AddSaltToHash(System.Byte[],System.Byte[])">
            <summary>
            Генерация хэша пароля c солью.
            </summary>
            <param name="passwordHash">Хэш пароля.</param>
            <param name="salt">Соль.</param>
            <returns>Хэш пароля.</returns>
        </member>
        <member name="M:CommonLibrary.Hashing.IPasswordHashManager.CheckHash(System.Security.SecureString,System.Byte[],System.Byte[])">
            <summary>
            Проверка хеша пароля.
            </summary>
            <param name="passwordHash">Проверяемый хеш пароля, закодированный в base64.</param>
            <param name="sourceHash">Исходный хеш.</param>
            <param name="salt">Соль, подмешаная к исходному хешу.</param>
            <returns>True, если хеш совпадает.</returns>
        </member>
        <member name="T:CommonLibrary.Hashing.PasswordHashExtensions">
            <summary>
            Методы расширения для работы с паролем.
            </summary>
        </member>
        <member name="M:CommonLibrary.Hashing.PasswordHashExtensions.GetPasswordHash(System.Security.SecureString)">
            <summary>
            Получить хеш пароля пользователя.
            </summary>
            <param name="password">Пароль пользователя.</param>
            <returns>Хеш пароля пользователя.</returns>
        </member>
        <member name="T:CommonLibrary.Hashing.PasswordHashManager">
            <summary>
            Менеджер хэширования.
            http://rsdn.ru/article/files/Classes/passwd.xml.
            </summary>
        </member>
        <member name="P:CommonLibrary.Hashing.PasswordHashManager.Instance">
            <summary>
            Экземпляр менеджера хэширования.
            </summary>
        </member>
        <member name="M:CommonLibrary.Hashing.PasswordHashManager.#ctor">
            <summary>
            Закрытый конструктор.
            </summary>
        </member>
        <member name="T:CommonLibrary.HyperlinkDefaultProtocols">
            <summary>
            Возвращает заданный по умолчанию список протоколов.
            </summary>
        </member>
        <member name="F:CommonLibrary.HyperlinkDefaultProtocols.DefaultUriProtocols">
            <summary>
            Список Uri протоколов в системе, заданный по умолчанию.
            </summary>
        </member>
        <member name="T:CommonLibrary.HyperlinkInfo">
            <summary>
            Информация о гиперссылке.
            </summary>
        </member>
        <member name="F:CommonLibrary.HyperlinkInfo.log">
            <summary>
            Логгер.
            </summary>
        </member>
        <member name="F:CommonLibrary.HyperlinkInfo.noValidHyperlinksCache">
            <summary>
            Кеш гиперссылок, которые были обнаружены как не валидные. Кеш нужен, чтобы не засорять лог. Метод IsValid может вызываться множество раз.
            </summary>
        </member>
        <member name="F:CommonLibrary.HyperlinkInfo.parameters">
            <summary>
            Параметры запроса в гиперссылке.
            </summary>
        </member>
        <member name="P:CommonLibrary.HyperlinkInfo.HttpUri">
            <summary>
            Получить гиперссылку со схемой HTTP.
            </summary>
        </member>
        <member name="P:CommonLibrary.HyperlinkInfo.HyperlinkServer">
            <summary>
            Получить адрес сервера гиперссылок.
            </summary>
        </member>
        <member name="P:CommonLibrary.HyperlinkInfo.ParametersCount">
            <summary>
            Получить количество параметров запроса в гиперссылке.
            </summary>
        </member>
        <member name="P:CommonLibrary.HyperlinkInfo.Item(System.String)">
            <summary>
            Получить значение параметра по ключу, указанному в гиперссылке.
            </summary>
            <param name="index">Имя ключа параметра.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:CommonLibrary.HyperlinkInfo.HasParameter(System.String)">
            <summary>
            Проверить, имеется ли параметр в запросе в гиперссылке.
            </summary>
            <param name="key">Ключ.</param>
            <returns>True, если указанный параметр существует, иначе - false.</returns>
        </member>
        <member name="M:CommonLibrary.HyperlinkInfo.IsValid(System.String)">
            <summary>
            Проверить валидность гиперссылки.
            </summary>
            <param name="hyperlink">Ссылка на объект системы.</param>
            <returns>True, если гиперссылка валидна, иначе - false.</returns>
        </member>
        <member name="M:CommonLibrary.HyperlinkInfo.Decode(System.String)">
            <summary>
            Преобразует строку, преобразованную в кодировку HTML для передачи по протоколу HTTP, в декодированную строку.
            </summary>
            <param name="hyperlink">Строка, которую необходимо преобразовать.</param>
            <returns>Декодированная строка.</returns>
        </member>
        <member name="M:CommonLibrary.HyperlinkInfo.ParseQueryString(System.String)">
            <summary>
            Распарсить строку параметров запроса.
            </summary>
            <param name="query">Строка параметров запроса.</param>
            <returns>Коллекция "имя параметра - значение", полученный из переданной строки запроса.</returns>
            <remarks>
            Сделано по мотивам https://referencesource.microsoft.com/#System.Web/httpserverutility.cs,a711aeeae301c09c и
            https://referencesource.microsoft.com/#System.Web/HttpValueCollection.cs,eed5ba1b259e3b7e
            Основное отличие - нам не нужны параметры, имена которых могут быть не заданы, поэтому их мы не будем добавлять в свой список.
            </remarks>
        </member>
        <member name="M:CommonLibrary.HyperlinkInfo.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
            <param name="hyperlink">Гиперссылка.</param>
        </member>
        <member name="T:CommonLibrary.HyperlinkParser">
            <summary>
            Парсер гиперссылок.
            </summary>
        </member>
        <member name="F:CommonLibrary.HyperlinkParser.LinkRegexFormat">
            <summary>
            Формат регулярки для гиперссылки.
            </summary>
        </member>
        <member name="P:CommonLibrary.HyperlinkParser.Validator">
            <summary>
            Валидатор гиперссылок.
            </summary>
        </member>
        <member name="M:CommonLibrary.HyperlinkParser.StartsWithHyperlink(System.String)">
            <summary>
            Проверить, начинает ли текст с гиперссылки.
            </summary>
            <param name="text">Текст.</param>
            <returns>true - текст начинается с гиперссылки.</returns>
        </member>
        <member name="M:CommonLibrary.HyperlinkParser.EndsWithHyperlink(System.String)">
            <summary>
            Проверить, заканчивается ли текст гиперссылкой.
            </summary>
            <param name="text">Текст.</param>
            <returns>true - текст заканчивается гиперссылкой.</returns>
        </member>
        <member name="M:CommonLibrary.HyperlinkParser.GetHyperlink(System.String,System.Int32,System.Int32,System.String@)">
            <summary>
            Искать гиперссылку в тексте.
            </summary>
            <param name="text">Текст.</param>
            <param name="beginning">Позиция в тексте, с которой искать.</param>
            <param name="length">Длина текста, в которм искать.</param>
            <param name="hyperlink">Найденная гиперссылка.</param>
            <returns>Позиция найденной гиперссылки.</returns>
        </member>
        <member name="M:CommonLibrary.HyperlinkParser.Parse(System.String)">
            <summary>
            Парсинг текста на куски.
            </summary>
            <param name="text">Текст.</param>
            <returns>Список кусков.</returns>
        </member>
        <member name="M:CommonLibrary.HyperlinkParser.ParseLine(System.String)">
            <summary>
            Парсинг линии текста на куски.
            </summary>
            <param name="line">Линия текста.</param>
            <returns>Коллекция кусков текста.</returns>
        </member>
        <member name="M:CommonLibrary.HyperlinkParser.DropUnwantedParentheses(System.String)">
            <summary>
            Убрать лишние скобки (подсчёт и порядок закрытия).
            </summary>
            <param name="inputLink">Исходная гиперссылка.</param>
            <returns>Результирующая гиперссылка.</returns>
        </member>
        <member name="T:CommonLibrary.HyperlinkRegistryProtocols">
            <summary>
            Возвращает список протоколов из реестра.
            </summary>
        </member>
        <member name="M:CommonLibrary.HyperlinkRegistryProtocols.LoadFromRegistry">
            <summary>
            Загрузка списка протоколов из реестра.
            </summary>
            <returns>Список протоколов.</returns>
        </member>
        <member name="M:CommonLibrary.HyperlinkRegistryProtocols.LoadFromRegistry(Microsoft.Win32.RegistryKey)">
            <summary>
            Загрузка списка протоколов из реестра.
            </summary>
            <returns>Список протоколов.</returns>
        </member>
        <member name="T:CommonLibrary.HttpProtocols">
            <summary>
            Список протоколов основанных на http.
            </summary>
        </member>
        <member name="M:CommonLibrary.HttpProtocols.IsHttpBasedProtocol(System.Uri)">
            <summary>
            Проверить, что протокол указанный в адресе основан на http.
            </summary>
            <param name="hyperlink">Ссылка.</param>
            <returns>True - если протокол, указанный в адресе, основан на http.</returns>
        </member>
        <member name="T:CommonLibrary.Hyperlinks.HyperlinkUtils">
            <summary>
            Класс для обработки гиперссылок.
            </summary>
        </member>
        <member name="M:CommonLibrary.Hyperlinks.HyperlinkUtils.RemoveHttpProtocolStandardPort(System.String)">
            <summary>
            Удалить стандартные порты для http протокола.
            </summary>
            <param name="hyperlinkServer">Исходный адрес.</param>
            <returns>Адрес без порта.</returns>
        </member>
        <member name="M:CommonLibrary.Hyperlinks.HyperlinkUtils.ChangeUriScheme(System.Uri,System.String)">
            <summary>
            Заменить схему в Uri.
            </summary>
            <param name="uri">Uri исходный.</param>
            <param name="scheme">Схема, на которую заменяется схема в исходном Uri.</param>
            <return>Uri с новой схемой.</return>
        </member>
        <member name="M:CommonLibrary.Hyperlinks.HyperlinkUtils.IsUriEquals(System.Uri,System.Uri)">
            <summary>
            Проверить идентичны ли Uri.
            </summary>
            <param name="uri1">Первый Uri.</param>
            <param name="uri2">Второй Uri.</param>
            <remarks>Схемы Uri основанные на http (http/https) считаются идентичными.</remarks>
            <returns>True, если Uri идентичны.</returns>
        </member>
        <member name="T:CommonLibrary.HyperlinkValidator">
            <summary>
            Валидатор гиперссылок.
            </summary>
        </member>
        <member name="P:CommonLibrary.HyperlinkValidator.Protocols">
            <summary>
            Список протоколов.
            </summary>
        </member>
        <member name="M:CommonLibrary.HyperlinkValidator.IsValidUriString(System.String)">
            <summary>
            Проверка URI на корректность. Базируется на IsWellFormedUriString.
            </summary>
            <param name="token">Текст ссылки.</param>
            <returns>True, если ссылка корректная.</returns>
        </member>
        <member name="T:CommonLibrary.IHyperlinkProtocols">
            <summary>
            Протоколы гиперссылок.
            </summary>
        </member>
        <member name="P:CommonLibrary.IHyperlinkProtocols.Protocols">
            <summary>
            Cписок протоколов.
            </summary>
        </member>
        <member name="T:CommonLibrary.TextChunk">
            <summary>
            Кусок текста.
            </summary>
        </member>
        <member name="P:CommonLibrary.TextChunk.IsHyperlink">
            <summary>
            Кусок текста является гиперссылкой.
            </summary>
        </member>
        <member name="P:CommonLibrary.TextChunk.IsNewLine">
            <summary>
            Кусок текста является символом перевода строки.
            </summary>
        </member>
        <member name="P:CommonLibrary.TextChunk.Text">
            <summary>
            Текст.
            </summary>
        </member>
        <member name="P:CommonLibrary.TextChunk.HasDisplayValue">
            <summary>
            Признак, что задан DisplayValue.
            </summary>
        </member>
        <member name="P:CommonLibrary.TextChunk.DisplayValue">
            <summary>
            Отображаемое значение.
            </summary>
        </member>
        <member name="M:CommonLibrary.TextChunk.CreateNewLine">
            <summary>
            Создать перенос строки.
            </summary>
            <returns>Перенос строки.</returns>
        </member>
        <member name="M:CommonLibrary.TextChunk.CreateText(System.String)">
            <summary>
            Создать кусок текста.
            </summary>
            <param name="text">Текст.</param>
            <returns>Кусок текста.</returns>
        </member>
        <member name="M:CommonLibrary.TextChunk.CreateHyperlink(System.String,System.String)">
            <summary>
            Создать гиперссылку.
            </summary>
            <param name="hyperlink">Гиперссылка.</param>
            <param name="displayValue">Отображаемое имя.</param>
            <returns>Гиперссылка.</returns>
        </member>
        <member name="T:CommonLibrary.TextToHtmlConverter">
            <summary>
            Конвертер текста в HTML формат.
            </summary>
        </member>
        <member name="F:CommonLibrary.TextToHtmlConverter.HtmlHrefFormat">
            <summary>
            Код HTMP для гиперссылки.
            </summary>
        </member>
        <member name="M:CommonLibrary.TextToHtmlConverter.ConvertToClipboardFormat(System.Collections.Generic.IEnumerable{CommonLibrary.TextChunk})">
            <summary>
            Конвертировать текст в HTML (в формате для буфера обмена).
            </summary>
            <param name="chunks">Текстовые блоки.</param>
            <returns>HTML.</returns>
        </member>
        <member name="M:CommonLibrary.TextToHtmlConverter.Convert(System.Collections.Generic.IEnumerable{CommonLibrary.TextChunk})">
            <summary>
            Конвертировать текст в HTML.
            </summary>
            <param name="chunks">Текстовые блоки.</param>
            <returns>HTML.</returns>
        </member>
        <member name="M:CommonLibrary.TextToHtmlConverter.CreateClipboardHtml(System.String)">
            <summary>
            Создать HTML в формате для буфера обмена.
            </summary>
            <param name="htmlFragment">Вставляемый фрагмент HTML.</param>
            <returns>HTML для буфера обмена.</returns>
        </member>
        <member name="M:CommonLibrary.TextToHtmlConverter.BuildHeader(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Сформировать заголовок HTML для вставки в буфер обмена.
            </summary>
            <param name="startHTML">Начало HTML.</param>
            <param name="endHTML">Конец HTML.</param>
            <param name="startFragment">Начало вставляемого фрагмента HTML.</param>
            <param name="endFragment">Конец вставляемого фрагмента HTML.</param>
            <returns>Заголовок.</returns>
        </member>
        <member name="T:CommonLibrary.TextToRtfConverter">
            <summary>
            Конвертер текста в Rtf формат.
            </summary>
        </member>
        <member name="F:CommonLibrary.TextToRtfConverter.RtfDocumentFormat">
            <summary>
            Формат документа RTF.
            </summary>
        </member>
        <member name="F:CommonLibrary.TextToRtfConverter.RtfHyperlinkFormat">
            <summary>
            Формат гиперссылки в RTF.
            </summary>
        </member>
        <member name="F:CommonLibrary.TextToRtfConverter.RtfNewLine">
            <summary>
            Новая строка.
            </summary>
        </member>
        <member name="F:CommonLibrary.TextToRtfConverter.RtfTextFormat">
            <summary>
            Текст в RTF.
            </summary>
        </member>
        <member name="M:CommonLibrary.TextToRtfConverter.ConvertToClipboardFormat(System.Collections.Generic.IEnumerable{CommonLibrary.TextChunk})">
            <summary>
            Конвертировать текст в RTF (в формате для буфера обмена).
            </summary>
            <param name="chunks">Текстовые блоки.</param>
            <returns>RTF.</returns>
        </member>
        <member name="M:CommonLibrary.TextToRtfConverter.Normalize(System.String)">
            <summary>
            Заменить спец символы RTF на обычное представление, что бы исключить проблемы с форматированнием RTF.
            </summary>
            <param name="value">Текст.</param>
            <returns>Нормальзованный текст.</returns>
        </member>
        <member name="M:CommonLibrary.TextToRtfConverter.ToRtfString(System.String)">
            <summary>
            Конвертировать строку в RTF (в формате для буфера обмена).
            </summary>
            <param name="value">Строка.</param>
            <returns>RTF.</returns>
        </member>
        <member name="T:CommonLibrary.IBinaryObject">
            <summary>
            Бинарный объект.
            </summary>
        </member>
        <member name="P:CommonLibrary.IBinaryObject.Content">
            <summary>
            Содержимое объекта.
            </summary>
        </member>
        <member name="P:CommonLibrary.IBinaryObject.Name">
            <summary>
            Название содержимого.
            </summary>
        </member>
        <member name="T:CommonLibrary.IInternalBinaryObject">
            <summary>
            Внутренний интерфейс бинарного файла.
            </summary>
        </member>
        <member name="M:CommonLibrary.IInternalBinaryObject.GetContentAsStream">
            <summary>
             Получить содержимое бинарного объекта как поток.
            </summary>
            <returns>Поток.</returns>
        </member>
        <member name="T:CommonLibrary.Linq.PredicateBuilder">
            <summary>
            Построитель специфичных выражений для Linq запросов.
            </summary>
        </member>
        <member name="M:CommonLibrary.Linq.PredicateBuilder.New``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Создать выражение из текущего.
            </summary>
            <typeparam name="T">Тип выражения.</typeparam>
            <param name="expression">Выражение, из которого создается другое выражение.</param>
            <returns>Исходное выражение.</returns>
            <remarks>Можно использовать вместо конструктора класса Expression.</remarks>
        </member>
        <member name="M:CommonLibrary.Linq.PredicateBuilder.True``1">
            <summary>
            Создать выражение, которое всегда истинно.
            </summary>
            <typeparam name="T">Тип выражения.</typeparam>
            <returns>Выражение, которое всегда возвращает true.</returns>
        </member>
        <member name="M:CommonLibrary.Linq.PredicateBuilder.False``1">
            <summary>
            Создать выражение, которое всегда ложно.
            </summary>
            <typeparam name="T">Тип выражения.</typeparam>
            <returns>Выражение, которое всегда возвращает false.</returns>
        </member>
        <member name="M:CommonLibrary.Linq.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Объединение выражений через логически оператор ||.
            </summary>
            <typeparam name="T">Тип выражения.</typeparam>
            <param name="left">Первый операнд.</param>
            <param name="right">Второй операнд.</param>
            <returns>Выражение, которое является объединением выражений, переданных в параметрах через OrElse.</returns>
        </member>
        <member name="M:CommonLibrary.Linq.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Объединение выражений через логически оператор And.
            </summary>
            <typeparam name="T">Тип выражения.</typeparam>
            <param name="left">Первый операнд.</param>
            <param name="right">Второй операнд.</param>
            <returns>Выражение, которое является объединением выражений, переданных в параметрах через AndAlso.</returns>
        </member>
        <member name="M:CommonLibrary.Linq.PredicateBuilder.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Выражение, которое отрицает текущее выражение.
            </summary>
            <typeparam name="T">Тип выражения.</typeparam>
            <param name="expression">Первый операнд.</param>
            <returns>Выражение, которое отрицает текущее выражение.</returns>
        </member>
        <member name="M:CommonLibrary.Linq.PredicateBuilder.Between``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``0,``0)">
            <summary>
            Выражение, которое определяет, находится ли элемент между двумя значениями.
            </summary>
            <typeparam name="T">Тип исходного параметра.</typeparam>
            <typeparam name="TKey">Тип проверяемого значения.</typeparam>
            <param name="keySelector">Выражение на выбор значения из исходного типа.</param>
            <param name="left">Нижняя граница значений.</param>
            <param name="right">Верхняя граница значений.</param>
            <returns>Выражение, которое проверяет, находится ли значение в заданном промежутке значений.</returns>
        </member>
        <member name="T:CommonLibrary.TypeHelper">
            <summary>
            Хелпер по работе с типами.
            </summary>
        </member>
        <member name="M:CommonLibrary.TypeHelper.GetElementType(System.Type)">
            <summary>
            Получить тип элемента из дженерик типа-перечисления.
            </summary>
            <param name="seqType">Тип перечисления.</param>
            <returns>Тип элемента из дженерик типа-перечисления.</returns>
        </member>
        <member name="M:CommonLibrary.TypeHelper.IsAnonymousType(System.Type)">
            <summary>
            Получить признак того, что тип является анонимным.
            </summary>
            <param name="type">Проверяемый тип.</param>
            <returns>True, если тип анонимный, иначе - false.</returns>
        </member>
        <member name="M:CommonLibrary.TypeHelper.IsAnonymousType(System.String)">
            <summary>
            Получить признак того, что тип является анонимным.
            </summary>
            <param name="typeName">Имя проверяемого типа.</param>
            <returns>True, если тип анонимный, иначе - false.</returns>
        </member>
        <member name="M:CommonLibrary.TypeHelper.FindIEnumerable(System.Type)">
            <summary>
            Найти в типе реализацию IEnumerable[].
            </summary>
            <param name="seqType">Тип, в котором ищем.</param>
            <returns>Найденный тип IEnumerable[].</returns>
        </member>
        <member name="T:CommonLibrary.ConfigLanguagesProvider">
            <summary>
            Провайдер доступных языков из конфига.
            </summary>
        </member>
        <member name="P:CommonLibrary.ConfigLanguagesProvider.AllowedLanguages">
            <summary>
            Список доступных языков.
            </summary>
        </member>
        <member name="M:CommonLibrary.ConfigLanguagesProvider.#ctor(CommonLibrary.Settings.LanguageManager)">
            <summary>
            Конструктор.
            </summary>
            <param name="languageManager">Настройки текущего языка.</param>
        </member>
        <member name="T:CommonLibrary.ILanguagesProvider">
            <summary>
            Провайдер доступных языков.
            </summary>
        </member>
        <member name="P:CommonLibrary.ILanguagesProvider.AllowedLanguages">
            <summary>
            Список доступных языков.
            </summary>
        </member>
        <member name="T:CommonLibrary.LocalizationManager">
            <summary>
            Менеджер локализации.
            </summary>
        </member>
        <member name="P:CommonLibrary.LocalizationManager.Instance">
            <summary>
            Экземпляр менеджера локализации.
            </summary>
        </member>
        <member name="P:CommonLibrary.LocalizationManager.AllowUICultures">
            <summary>
            Список всех доступных культур системы.
            </summary>
        </member>
        <member name="P:CommonLibrary.LocalizationManager.LanguageManager">
            <summary>
            Настройки текущего языка.
            </summary>
        </member>
        <member name="P:CommonLibrary.LocalizationManager.ClientUICulture">
            <summary>
            Текущая культура клиента.
            </summary>
        </member>
        <member name="P:CommonLibrary.LocalizationManager.ClientLogCulture">
            <summary>
            Текущая культура клиента для логирования.
            </summary>
        </member>
        <member name="F:CommonLibrary.LocalizationManager.systemLanguage">
            <summary>
            Системный язык.
            </summary>
        </member>
        <member name="M:CommonLibrary.LocalizationManager.GetNativeCultureInfoDisplayName(System.Globalization.CultureInfo)">
            <summary>
            Получить имя культуры на родном языке.
            </summary>
            <param name="cultureInfo">Культура.</param>
            <returns>Имя культуры на родном языке.</returns>
        </member>
        <member name="M:CommonLibrary.LocalizationManager.GetCultureInfo(System.String)">
            <summary>
            Получить культуру по имени.
            </summary>
            <param name="name">Имя культуры.</param>
            <returns>Культура.</returns>
        </member>
        <member name="M:CommonLibrary.LocalizationManager.GetAllowedUICultures">
            <summary>
            Получить список всех доступных культур системы.
            </summary>
            <returns>Список всех доступных культур системы.</returns>
        </member>
        <member name="M:CommonLibrary.LocalizationManager.AssignCurrentCulture">
            <summary>
            Означить текущую культуру, значениями из настроек.
            </summary>
        </member>
        <member name="M:CommonLibrary.LocalizationManager.AssignCulture(System.Globalization.CultureInfo)">
            <summary>
            Означить текущую культуру указанным значением.
            </summary>
            <param name="cultureInfo">Культура.</param>
        </member>
        <member name="M:CommonLibrary.LocalizationManager.SwitchCulture(System.Globalization.CultureInfo)">
            <summary>
            Поменять текущую культуру на новую.
            </summary>
            <param name="cultureInfo">Новая культура.</param>
            <returns>Объект, при вызове Dispose которого будет вызвано переключение обратно.</returns>
        </member>
        <member name="M:CommonLibrary.LocalizationManager.SetSystemLanguage(System.String)">
            <summary>
            Установить язык системы.
            </summary>
            <param name="language">Язык.</param>
        </member>
        <member name="M:CommonLibrary.LocalizationManager.SetLanguageProvider(CommonLibrary.ILanguagesProvider)">
            <summary>
            Задать новый провайдер языков.
            </summary>
            <param name="provider">Провайдер.</param>
        </member>
        <member name="M:CommonLibrary.LocalizationManager.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:CommonLibrary.LocalizedString">
            <summary>
            Локализованная строка.
            </summary>
        </member>
        <member name="P:CommonLibrary.LocalizedString.Culture">
            <summary>
            Получить культуру, которая будет использоваться при локализации строки.
            </summary>
        </member>
        <member name="P:CommonLibrary.LocalizedString.ResourceManager">
            <summary>
            Менеджер ресурсов.
            </summary>
        </member>
        <member name="P:CommonLibrary.LocalizedString.ResourceKey">
            <summary>
            Ключ ресурса.
            </summary>
        </member>
        <member name="P:CommonLibrary.LocalizedString.StringFormat">
            <summary>
            Формат строки.
            </summary>
        </member>
        <member name="P:CommonLibrary.LocalizedString.Parameters">
            <summary>
            Параметры формата строки.
            </summary>
        </member>
        <member name="P:CommonLibrary.LocalizedString.Messages">
            <summary>
            Закешированные сообщения в культурах клиента.
            </summary>
        </member>
        <member name="M:CommonLibrary.LocalizedString.CacheMessages(System.Globalization.CultureInfo[])">
            <summary>
            Закешировать сообщения в различных культурах.
            </summary>
            <param name="culturesInfo">Список культур, в которых надо закешировать строку.</param>
            <returns>Текущая строка локализации.</returns>
        </member>
        <member name="M:CommonLibrary.LocalizedString.CacheMessagesInAllAvailableCultures">
            <summary>
            Закэшировать сообщения во всех доступных культурах.
            </summary>
            <returns>Текущая строка локализации.</returns>
        </member>
        <member name="M:CommonLibrary.LocalizedString.GetMessage(System.Globalization.CultureInfo)">
            <summary>
            Получить сообщение в текущей культуре.
            </summary>
            <param name="cultureInfo">Культура.</param>
            <returns>Строка сообщения.</returns>
        </member>
        <member name="M:CommonLibrary.LocalizedString.Append(CommonLibrary.LocalizedString)">
            <summary>
            Объединить с локализованной строкой.
            </summary>
            <param name="localizedString">Локализованная строка которую необходимо добавить.</param>
            <returns>Локализованная строка.</returns>
        </member>
        <member name="M:CommonLibrary.LocalizedString.AppendLine(CommonLibrary.LocalizedString)">
            <summary>
            Объединить с локализованной строкой с переносом добавляемой строки на новую строчку.
            </summary>
            <param name="localizedString">Локализованная строка, которую необходимо добавить.</param>
            <returns>Локализованная строка.</returns>
        </member>
        <member name="M:CommonLibrary.LocalizedString.AppendFormat(System.String,System.Object[])">
            <summary>
            Объединить с форматом.
            </summary>
            <param name="format">Формат строки.</param>
            <param name="parameters">Параметры формата.</param>
            <returns>Локализованная строка.</returns>
        </member>
        <member name="M:CommonLibrary.LocalizedString.ToString">
            <summary>
            Получить строку.
            </summary>
            <returns>Строка.</returns>
        </member>
        <member name="M:CommonLibrary.LocalizedString.IsNullOrEmpty">
            <summary>
            Проверить, является ли строка пустой.
            </summary>
            <returns>True, если такая строка существует в ресурсах и она не пустая.</returns>
        </member>
        <member name="M:CommonLibrary.LocalizedString.IsNullOrEmpty(System.Globalization.CultureInfo)">
            <summary>
            Проверить, является ли строка пустой.
            </summary>
            <param name="cultureInfo">Культура, в которой происходит проверка.</param>
            <returns>True, если такая строка существует в ресурсах и она не пустая.</returns>
        </member>
        <member name="M:CommonLibrary.LocalizedString.IsNullOrWhiteSpace">
            <summary>
            Проверить, является ли строка пустой, или содержит только символы пробелов.
            </summary>
            <returns>True, если такая строка существует в ресурсах, она не пустая и содержит символы, отличные от пробелов.</returns>
        </member>
        <member name="M:CommonLibrary.LocalizedString.IsNullOrWhiteSpace(System.Globalization.CultureInfo)">
            <summary>
            Проверить, является ли строка пустой, или содержит только символы пробелов.
            </summary>
            <param name="cultureInfo">Культура, для которой происходит проверка.</param>
            <returns>True, если такая строка существует в ресурсах, она не пустая и содержит символы, отличные от пробелов.</returns>
        </member>
        <member name="M:CommonLibrary.LocalizedString.ToString(System.Globalization.CultureInfo)">
            <summary>
            Получить строку.
            </summary>
            <param name="cultureInfo">Необходимая культура строки.</param>
            <returns>Строка.</returns>
        </member>
        <member name="M:CommonLibrary.LocalizedString.NeedAppendSpace(System.Globalization.CultureInfo,System.String,System.String)">
            <summary>
            Нужно ли добавить пробел.
            </summary>
            <param name="cultureInfo">Культура.</param>
            <param name="previousString">Предыдущая строка.</param>
            <param name="currentString">Текущая строка.</param>
            <returns><c>true</c>, если нужно добавить пробел.</returns>
        </member>
        <member name="E:CommonLibrary.LocalizedString.Localized">
            <summary>
            Событие происходящее после получения локализованного значения строки.
            </summary>
        </member>
        <member name="M:CommonLibrary.LocalizedString.#ctor(System.Resources.ResourceManager,System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Конструктор.
            </summary>
            <param name="resourceManager">Менеджер ресурсов.</param>
            <param name="resourceKey">Ключ ресурса.</param>
            <param name="defaultCulture">Культура которую необходимо использовать при получении значения строки.</param>
            <param name="parameters">Параметры строки.</param>
        </member>
        <member name="M:CommonLibrary.LocalizedString.#ctor(System.String,System.Object[])">
            <summary>
            Конструктор.
            </summary>
            <param name="format">Формат строки.</param>
            <param name="parameters">Параметры строки.</param>
        </member>
        <member name="M:CommonLibrary.LocalizedString.#ctor(System.Resources.ResourceManager,System.String,System.Object[])">
            <summary>
            Конструктор.
            </summary>
            <param name="resourceManager">Менеджер ресурсов.</param>
            <param name="resourceKey">Ключ ресурса.</param>
            <param name="parameters">Параметры строки.</param>
        </member>
        <member name="M:CommonLibrary.LocalizedString.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:CommonLibrary.LocalizedString.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор десериализации.
            </summary>
            <param name="info">Информация сериализации.</param>
            <param name="context">Контекст.</param>
        </member>
        <member name="M:CommonLibrary.LocalizedString.op_Implicit(CommonLibrary.LocalizedString)~System.String">
            <summary>
            Перегрузку оператора приведения LocalizedString к строке.
            </summary>
            <param name="localizedString">Строка, которую нужно привести.</param>
            <returns><c>string</c>.</returns>
        </member>
        <member name="T:CommonLibrary.LocalizedStringExtensions">
            <summary>
            Расширение для строк локализаций.
            </summary>
        </member>
        <member name="M:CommonLibrary.LocalizedStringExtensions.ToStrings(System.Collections.Generic.IEnumerable{CommonLibrary.LocalizedString})">
            <summary>
            Преобразовать локализованные строки в обычные строки в текущей культуре.
            </summary>
            <param name="localizedStrings">Список локализованных строк.</param>
            <returns>Обычные строки в текущей культуре.</returns>
        </member>
        <member name="T:CommonLibrary.LocalizedStringComparer">
            <summary>
            Компарер локализованных строк.
            </summary>
        </member>
        <member name="P:CommonLibrary.LocalizedStringComparer.StringComparer">
            <summary>
            Компарер строк.
            </summary>
        </member>
        <member name="M:CommonLibrary.LocalizedStringComparer.#ctor(System.StringComparer)">
            <summary>
            Конструктор.
            </summary>
            <param name="stringComparer">Компарер строк.</param>
        </member>
        <member name="M:CommonLibrary.LocalizedStringComparer.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="T:CommonLibrary.LocalizedEventArgs">
            <summary>
            Параметры события на локализацию строки.
            </summary>
        </member>
        <member name="P:CommonLibrary.LocalizedEventArgs.Value">
            <summary>
            Локализованное значение строки.
            </summary>
        </member>
        <member name="P:CommonLibrary.LocalizedEventArgs.NewValue">
            <summary>
            Новое значение строки.
            </summary>
        </member>
        <member name="M:CommonLibrary.LocalizedEventArgs.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
            <param name="localizedValue">Значение локализованной строки.</param>
        </member>
        <member name="T:CommonLibrary.ResourceManagerInvalidator">
            <summary>
            Инвалидатор кешей для менеджеров ресурсов.
            </summary>
        </member>
        <member name="M:CommonLibrary.ResourceManagerInvalidator.Invalidate(System.Globalization.CultureInfo)">
            <summary>
            Инвалидировать кеш менеджера ресурсов.
            </summary>
            <param name="cultureInfo">Имя культуры.</param>
        </member>
        <member name="T:CommonLibrary.Logging.DomainUserNameLoggerExtension">
            <summary>
            Pасширение логирования для добавления имени текущего доменного пользователя.
            </summary>
        </member>
        <member name="T:CommonLibrary.Logging.ExtendedMemoryInfo">
            <summary>
            Расширенная информация о памяти.
            </summary>
        </member>
        <member name="F:CommonLibrary.Logging.ExtendedMemoryInfo.BytesInMB">
            <summary>
            Байт в мегабайте.
            </summary>
        </member>
        <member name="P:CommonLibrary.Logging.ExtendedMemoryInfo.PrivateMB">
            <summary>
            Приватная память текущего процесса.
            </summary>
        </member>
        <member name="P:CommonLibrary.Logging.ExtendedMemoryInfo.VirtualMB">
            <summary>
            Виртуальная память текущего процесса.
            </summary>
        </member>
        <member name="P:CommonLibrary.Logging.ExtendedMemoryInfo.FreeRamMB">
            <summary>
            Свободная физическая память.
            </summary>
        </member>
        <member name="P:CommonLibrary.Logging.ExtendedMemoryInfo.TotalRamMB">
            <summary>
            Общая физическая память.
            </summary>
        </member>
        <member name="P:CommonLibrary.Logging.ExtendedMemoryInfo.PageFileMB">
            <summary>
            Размер файла подкачки.
            </summary>
        </member>
        <member name="P:CommonLibrary.Logging.ExtendedMemoryInfo.Is64BitOS">
            <summary>
            Признак 64-хбитной ОС.
            </summary>
        </member>
        <member name="M:CommonLibrary.Logging.ExtendedMemoryInfo.#ctor(CommonLibrary.Utils.MemoryInfo,System.Diagnostics.Process)">
            <summary>
            Конструктор.
            </summary>
            <param name="memoryInfo">Информация о памяти.</param>
            <param name="process">Процесс.</param>
        </member>
        <member name="T:CommonLibrary.Logging.LocalizedStringAndPlatformExceptionExtension">
            <summary>
            Расширение для логирования LocalizedString и PlatformException.
            </summary>
        </member>
        <member name="M:CommonLibrary.Logging.LocalizedStringAndPlatformExceptionExtension.ConvertMessage(CommonLibrary.LocalizedString)">
            <summary>
            Сконвертировать сообщение.
            </summary>
            <param name="message">Сообщение.</param>
            <returns>Конвертированное сообщение.</returns>
        </member>
        <member name="M:CommonLibrary.Logging.LocalizedStringAndPlatformExceptionExtension.TransformLocalizedStringForLogging(CommonLibrary.LocalizedString)">
            <summary>
            Преобразовать локализованную строку в объект для логирования.
            </summary>
            <param name="localizedString">Локализованная строка.</param>
            <returns>Объект для логирования.</returns>
        </member>
        <member name="M:CommonLibrary.Logging.LocalizedStringAndPlatformExceptionExtension.TransformPlatformExceptionForLogging(CommonLibrary.Exceptions.PlatformException)">
            <summary>
            Преобразует платформенное исключение в объект для логирования.
            </summary>
            <param name="ex">Исключение платформы.</param>
            <returns>Объект для логирования.</returns>
        </member>
        <member name="T:CommonLibrary.Logging.LoggerConfigurationExtenstions">
            <summary>
            Методы расширения конфигурации логера.
            </summary>
        </member>
        <member name="M:CommonLibrary.Logging.LoggerConfigurationExtenstions.WithLocalizedStringAndPlatformException(Sungero.Logging.ILoggerConfiguration)">
            <summary>
            Добавить расширения логирования LocalizedString и PlatformException.
            </summary>
            <param name="configuration">Интерфейс конфигурации логера.</param>
            <returns>Интерфейс конфигурации логера.</returns>
        </member>
        <member name="M:CommonLibrary.Logging.LoggerConfigurationExtenstions.WithDomainUserName(Sungero.Logging.ILoggerConfiguration)">
            <summary>
            Добавить расширение логирования именем текущего доменного пользователя.
            </summary>
            <param name="configuration">Интерфейс конфигурации логера.</param>
            <returns>Интерфейс конфигурации логера.</returns>
        </member>
        <member name="T:CommonLibrary.Logging.MemoryUsageLogger">
            <summary>
            Класс для логирования потребляемой процессом памяти.
            </summary>
        </member>
        <member name="F:CommonLibrary.Logging.MemoryUsageLogger.LogOnlyChangedStepMB">
            <summary>
            Шаг, при котором логируется использование памяти приложения.
            </summary>
        </member>
        <member name="F:CommonLibrary.Logging.MemoryUsageLogger.memoryLoggingDefaultPeriod">
            <summary>
            Период между логированием состояния памяти по умолчанию.
            </summary>
        </member>
        <member name="F:CommonLibrary.Logging.MemoryUsageLogger.log">
            <summary>
            Логгер.
            </summary>
        </member>
        <member name="F:CommonLibrary.Logging.MemoryUsageLogger.logOnlyChanged">
            <summary>
            Признак необходимости логирования используемой памяти, если данные изменились с течением времени на размер <see cref="F:CommonLibrary.Logging.MemoryUsageLogger.LogOnlyChangedStepMB"/>.
            </summary>
        </member>
        <member name="F:CommonLibrary.Logging.MemoryUsageLogger.currentProcess">
            <summary>
            Текущий процесс.
            </summary>
        </member>
        <member name="F:CommonLibrary.Logging.MemoryUsageLogger.syncObject">
            <summary>
            Примитив ожидания срабатывания очередной итерации записи в лог.
            </summary>
        </member>
        <member name="F:CommonLibrary.Logging.MemoryUsageLogger.previousMemoryInfo">
            <summary>
            Предыдущие значения потребляемой памяти.
            </summary>
        </member>
        <member name="M:CommonLibrary.Logging.MemoryUsageLogger.GetMemoryInfo">
            <summary>
            Получить расширенную информацию об используемой памяти.
            </summary>
        </member>
        <member name="M:CommonLibrary.Logging.MemoryUsageLogger.WriteMemoryInfo">
            <summary>
            Записать в лог текущую информацию по памяти.
            </summary>
        </member>
        <member name="M:CommonLibrary.Logging.MemoryUsageLogger.RunPeriodicLoggingAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Запустить периодичное логирование информации по памяти асинхронно.
            </summary>
            <param name="period">Периодичность в миллисекундах.</param>
            <param name="ct">Токен отмены операции.</param>
        </member>
        <member name="M:CommonLibrary.Logging.MemoryUsageLogger.Start(System.TimeSpan)">
            <summary>
            Начать логирование. Первая запись в лог будет выполнена сразу.
            </summary>
            <param name="period">Период логирования.</param>
        </member>
        <member name="M:CommonLibrary.Logging.MemoryUsageLogger.Start(System.TimeSpan,System.Boolean)">
            <summary>
            Начать логирование. Первая запись в лог будет выполнена сразу.
            </summary>
            <param name="period">Период логирования.</param>
            <param name="logOnlyChangedValue">Признак необходимости логирования потребляемой памяти, если данные изменились с течением времени.</param>
        </member>
        <member name="M:CommonLibrary.Logging.MemoryUsageLogger.Start">
            <summary>
            Начать логирование. Первая запись в лог будет выполнена сразу.
            </summary>
        </member>
        <member name="M:CommonLibrary.Logging.MemoryUsageLogger.Stop">
            <summary>
            Остановить логирование. Перед остановкой будет выполнена запись в лог.
            </summary>
        </member>
        <member name="T:CommonLibrary.INotifyPropertyChangedExtended">
            <summary>
            Расширенный интерфейс для уведомления об изменении свойства.
            </summary>
        </member>
        <member name="M:CommonLibrary.INotifyPropertyChangedExtended.OnPropertyChanged(System.String)">
            <summary>
            Сгенерировать событие на изменение свойства.
            </summary>
            <param name="propertyName">Имя свойства.</param>
        </member>
        <member name="T:CommonLibrary.INotifyPropertyChangesLocker">
            <summary>
            Интерфейс для выполнения действий без уведомлений о промежуточных изменениях свойств.
            </summary>
        </member>
        <member name="M:CommonLibrary.INotifyPropertyChangesLocker.DoWithoutIntermediateChangeNotifications(System.Action)">
            <summary>
            Выполнить действие без уведомлений о промежуточных изменениях свойств.
            </summary>
            <param name="action">Действие.</param>
        </member>
        <member name="M:CommonLibrary.INotifyPropertyChangesLocker.DoWithoutPropertyChangeNotifications(System.Action)">
            <summary>
            Выполнить действие без уведомлений об изменениях.
            </summary>
            <param name="action">Действие.</param>
        </member>
        <member name="T:CommonLibrary.INotifyPropertyChangingExtended">
            <summary>
            Расширенный интерфейс для уведомления о начале изменения свойства.
            </summary>
        </member>
        <member name="M:CommonLibrary.INotifyPropertyChangingExtended.OnPropertyChanging(System.String)">
            <summary>
            Сгенерировать событие на изменение свойства.
            </summary>
            <param name="propertyName">Имя свойства.</param>
        </member>
        <member name="T:CommonLibrary.NotifyChangedExtension">
            <summary>
            Расширения для реализации статически типизированного INotifyPropertyChanged.
            </summary>
        </member>
        <member name="M:CommonLibrary.NotifyChangedExtension.OnPropertyChanged``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Уведомить об изменении свойства.
            </summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <typeparam name="TProperty">Тип свойства.</typeparam>
            <param name="notifiedObject">Объект.</param>
            <param name="expression">Выражение вида a => a.PropertyName, которое задает, об изменении какого свойства надо уведомить.</param>
        </member>
        <member name="M:CommonLibrary.NotifyChangedExtension.OnPropertyChanging``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Уведомить о начале изменения свойства.
            </summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <typeparam name="TProperty">Тип свойства.</typeparam>
            <param name="notifiedObject">Объект.</param>
            <param name="expression">Выражение вида a => a.PropertyName, которое задает, об изменении какого свойства надо уведомить.</param>
        </member>
        <member name="M:CommonLibrary.NotifyChangedExtension.GetPropertyName``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Пполучить имя свойства из варажения вида a => a.PropertyName.
            </summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <typeparam name="TProperty">Тип свойства.</typeparam>
            <param name="owner">Объект.</param>
            <param name="expression">Выражение.</param>
            <returns>Имя свойства.</returns>
        </member>
        <member name="T:CommonLibrary.NotifyPropertyChangedImplementation">
            <summary>
            Реализация интерфейса INotifyPropertyChanged.
            </summary>
        </member>
        <member name="E:CommonLibrary.NotifyPropertyChangedImplementation.PropertyChanged">
            <summary>
            Raised when a property on this object has a new value.
            </summary>
        </member>
        <member name="M:CommonLibrary.NotifyPropertyChangedImplementation.OnPropertyChanged(System.String)">
            <summary>
            Raises this object's PropertyChanged event.
            </summary>
            <param name="propertyName">The property that has a new value.</param>
        </member>
        <member name="T:CommonLibrary.NotifyPropertyChangedExtImplementation">
            <summary>
            Реализация интерфейса INotifyPropertyChanged.
            </summary>
        </member>
        <member name="F:CommonLibrary.NotifyPropertyChangedExtImplementation.lockCount">
            <summary>
            Текущее количество блокировок.
            </summary>
        </member>
        <member name="F:CommonLibrary.NotifyPropertyChangedExtImplementation.lockedChangedProperties">
            <summary>
            Измененные во время блокировки свойства.
            </summary>
        </member>
        <member name="M:CommonLibrary.NotifyPropertyChangedExtImplementation.OnPropertyChangedCore(System.String)">
            <summary>
            Вызывается при изменении значения свойства.
            </summary>
            <param name="propertyName">Имя свойства.</param>
        </member>
        <member name="M:CommonLibrary.NotifyPropertyChangedExtImplementation.OnPropertiesChanged">
            <summary>
            Вызывается при изменении значения свойства или свойств.
            </summary>
        </member>
        <member name="M:CommonLibrary.NotifyPropertyChangedExtImplementation.BeginUpdate">
            <summary>
            Начать обновление свойств.
            </summary>
        </member>
        <member name="M:CommonLibrary.NotifyPropertyChangedExtImplementation.EndUpdate(System.Boolean)">
            <summary>
            Закончить обновление свойств.
            </summary>
            <param name="needNotify">Признак необходимости уведомления об изменении свойств.</param>
        </member>
        <member name="T:CommonLibrary.OutFunc`3">
            <summary>
            Функция с последним out-параметром.
            </summary>
            <typeparam name="T1">Тип первого параметра.</typeparam>
            <typeparam name="T2">Тип второго параметра.</typeparam>
            <typeparam name="TResult">Тип результата.</typeparam>
            <param name="arg1">Первый параметр.</param>
            <param name="arg2">Второй параметр.</param>
            <returns>Результат.</returns>
        </member>
        <member name="T:CommonLibrary.IPoolEntryWrapper">
            <summary>
            Интерфейс элемента-обертки пула.
            </summary>
        </member>
        <member name="M:CommonLibrary.IPoolEntryWrapper.Release">
            <summary>
            Освободить ресурсы элемента пула.
            </summary>
        </member>
        <member name="P:CommonLibrary.IPoolEntryWrapper.TargetName">
            <summary>
            Имя запуленного объекта.
            </summary>
        </member>
        <member name="T:CommonLibrary.ObjectsPool`1">
            <summary>
            Пул объектов.
            </summary>
            <typeparam name="TEntry">Тип запуленных объектов.</typeparam>
        </member>
        <member name="F:CommonLibrary.ObjectsPool`1.syncRoot">
            <summary>
            Объект синхронизации, для потокобезопасного доступа.
            </summary>
        </member>
        <member name="F:CommonLibrary.ObjectsPool`1.mruEntries">
            <summary>
            Элементы пула в порядке использования (сначала редко используемые).
            </summary>
        </member>
        <member name="P:CommonLibrary.ObjectsPool`1.Entries">
            <summary>
            Элементы пула.
            </summary>
        </member>
        <member name="P:CommonLibrary.ObjectsPool`1.MaxCount">
            <summary>
            Максимальное количество объектов в пуле.
            </summary>
        </member>
        <member name="M:CommonLibrary.ObjectsPool`1.Push(`0)">
            <summary>
            Добавить элемент в пул.
            </summary>
            <param name="entry">Добавляемый элемент.</param>
            <returns>Список изъятых элементов.</returns>
        </member>
        <member name="M:CommonLibrary.ObjectsPool`1.Pop(System.Predicate{`0})">
            <summary>
            Изъять элемент из пула, соответствующий критерию.
            </summary>
            <param name="match">Критерий, которому должен соответствовать элемент.</param>
            <returns>Элемент пула (null если не найден).</returns>
        </member>
        <member name="M:CommonLibrary.ObjectsPool`1.Peek(System.Predicate{`0})">
            <summary>
            Получить элемент из пула, соответствующий критерию.
            </summary>
            <param name="match">Критерий, которому должен соответствовать элемент.</param>
            <returns>Элемент пула (null если не найден).</returns>
        </member>
        <member name="M:CommonLibrary.ObjectsPool`1.Clear">
            <summary>
            Очистить пул.
            </summary>
        </member>
        <member name="T:CommonLibrary.SearchableString">
            <summary>
            Строка поиска.
            </summary>
        </member>
        <member name="F:CommonLibrary.SearchableString.empty">
            <summary>
            Пустая строка.
            </summary>
        </member>
        <member name="F:CommonLibrary.SearchableString.parts">
            <summary>
            Все части строки.
            </summary>
        </member>
        <member name="F:CommonLibrary.SearchableString.length">
            <summary>
            Следующая позиция части строки, куда будет добавлена новая часть.
            Длина строки.
            </summary>
        </member>
        <member name="P:CommonLibrary.SearchableString.IsEmpty">
            <summary>
            Получить признак того, что строка пустая.
            </summary>
        </member>
        <member name="P:CommonLibrary.SearchableString.SearchableSubstrings">
            <summary>
            Получить все подстроки участвующие в поиске.
            </summary>
        </member>
        <member name="P:CommonLibrary.SearchableString.Parts">
            <summary>
            Получить все части строки.
            </summary>
        </member>
        <member name="M:CommonLibrary.SearchableString.Create(System.String)">
            <summary>
            Создать строку поиска.
            </summary>
            <param name="value">Строка.</param>
            <returns>Строка поиска.</returns>
        </member>
        <member name="M:CommonLibrary.SearchableString.Add(System.String)">
            <summary>
            Добавить часть строки.
            </summary>
            <param name="value">Строка.</param>
            <returns>Строка поиска.</returns>
        </member>
        <member name="M:CommonLibrary.SearchableString.AddIgnored(System.String)">
            <summary>
            Добавить игнорируемую поиском часть строки.
            </summary>
            <param name="value">Строка.</param>
            <returns>Строка поиска.</returns>
        </member>
        <member name="M:CommonLibrary.SearchableString.AddRange(CommonLibrary.SearchableString)">
            <summary>
            Добавить строку поиска.
            </summary>
            <param name="range">Строка поиска.</param>
            <returns>Объединенная строка поиска.</returns>
        </member>
        <member name="M:CommonLibrary.SearchableString.IndexesOfMatch(System.Text.RegularExpressions.Regex)">
            <summary>
            Получить индексы вхождения строки подходящей под регулярное выражение.
            </summary>
            <param name="regex">Регулярное выражение.</param>
            <returns>Индексы вхождения.</returns>
        </member>
        <member name="T:CommonLibrary.StringPart">
            <summary>
            Часть строки, которая может участвовать в поиске.
            </summary>
        </member>
        <member name="P:CommonLibrary.StringPart.Start">
            <summary>
            Получить позицию начала части.
            </summary>
        </member>
        <member name="P:CommonLibrary.StringPart.Value">
            <summary>
            Получить значение части строки.
            </summary>
        </member>
        <member name="P:CommonLibrary.StringPart.IsIgnored">
            <summary>
            Получить признак того, что часть строки не участвует в поиске.
            </summary>
        </member>
        <member name="M:CommonLibrary.StringPart.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Создает экземпляр части строки.
            </summary>
            <param name="position">Позиция.</param>
            <param name="value">Значение части строки.</param>
            <param name="ignored">Признак того, что часть не участвует в поиске.</param>
        </member>
        <member name="T:CommonLibrary.SearchCondition">
            <summary>
            Условие поиска.
            </summary>
        </member>
        <member name="F:CommonLibrary.SearchCondition.Contains">
            <summary>
            Содержит.
            </summary>
        </member>
        <member name="F:CommonLibrary.SearchCondition.WordStartingWith">
            <summary>
            Содержит слово начинающееся с.
            </summary>
        </member>
        <member name="T:CommonLibrary.Settings.BaseSetting">
            <summary>
            Базовая настройка.
            </summary>
        </member>
        <member name="P:CommonLibrary.Settings.BaseSetting.SettingName">
            <summary>
            Имя настройки.
            </summary>
        </member>
        <member name="T:CommonLibrary.Settings.LanguageManager">
            <summary>
            Настройка хранящая информацию о текущем языке.
            </summary>
        </member>
        <member name="P:CommonLibrary.Settings.LanguageManager.ConfigSettings">
            <summary>
            Получатель настроек.
            </summary>
        </member>
        <member name="M:CommonLibrary.Settings.LanguageManager.Create">
            <summary>
            Создание экземпляра LanguageManager.
            </summary>
            <returns>Экземпляр LanguageManager.</returns>
        </member>
        <member name="P:CommonLibrary.Settings.LanguageManager.SystemLanguage">
            <summary>
            Язык системы.
            </summary>
        </member>
        <member name="P:CommonLibrary.Settings.LanguageManager.LogLanguage">
            <summary>
            Язык для логирования.
            </summary>
        </member>
        <member name="P:CommonLibrary.Settings.LanguageManager.AllowedLanguages">
            <summary>
            Получить список доступных языков системы.
            </summary>
        </member>
        <member name="T:CommonLibrary.Settings.LanguageElement">
            <summary>
            Конфигурация языка системы.
            </summary>
        </member>
        <member name="P:CommonLibrary.Settings.LanguageElement.Code">
            <summary>
            Получить код языка системы.
            </summary>
        </member>
        <member name="T:CommonLibrary.Settings.SettingsManager">
            <summary>
            Менеджер настроек.
            </summary>
        </member>
        <member name="F:CommonLibrary.Settings.SettingsManager.configurationDictionary">
            <summary>
            Список загруженных настроек.
            </summary>
        </member>
        <member name="F:CommonLibrary.Settings.SettingsManager.instance">
            <summary>
            Одиночка менеджера настроек.
            </summary>
        </member>
        <member name="P:CommonLibrary.Settings.SettingsManager.Instance">
            <summary>
            Одиночка менеджера настроек.
            </summary>
        </member>
        <member name="M:CommonLibrary.Settings.SettingsManager.#ctor">
            <summary>
            Скрытый конструктор.
            </summary>
        </member>
        <member name="M:CommonLibrary.Settings.SettingsManager.GetConfig(System.String)">
            <summary>
            Получить конфигурацию. Если конфигурация уже была получена ранее, то конфигурация берется из кэша.
            </summary>
            <param name="configFileName">Имя файла конфигурации.</param>
            <returns>Конфигурация.</returns>
        </member>
        <member name="M:CommonLibrary.Settings.SettingsManager.GetSetting(System.String,System.String,System.Type)">
            <summary>
            Получить объект настройки. Если настройки в файле еще нет, настройка типа settingType будет создана и возвращена.
            </summary>
            <param name="configFileName">Имя файла конфигурации.</param>
            <param name="settingName">Имя настройки.</param>
            <param name="settingType">Тип настройки.</param>
            <returns>Настройка.</returns>
        </member>
        <member name="M:CommonLibrary.Settings.SettingsManager.GetSetting(System.String,System.String)">
            <summary>
            Получить объект настройки. Если настройки в файле нет, будет возвращен null.
            </summary>
            <param name="configFileName">Имя файла конфигурации.</param>
            <param name="settingName">Имя настройки.</param>
            <returns>Настройка.</returns>
        </member>
        <member name="M:CommonLibrary.Settings.SettingsManager.GetSetting(System.String)">
            <summary>
            Получить объект настройки из дефолтного конфига приложения. Если настройки в файле нет, будет возвращен null.
            </summary>
            <param name="settingName">Имя настройки.</param>
            <returns>Настройка.</returns>
        </member>
        <member name="M:CommonLibrary.Settings.SettingsManager.SaveSettings(System.String)">
            <summary>
            Сохранить настройки на диск.
            </summary>
            <param name="configFileName">Имя файла конфигурации.</param>
        </member>
        <member name="M:CommonLibrary.Settings.SettingsManager.ReleaseConfig(System.String)">
            <summary>
            Закрыть файл конфигурации. Настройки будут перечитаны из файла при следующем обращении к настройкам.
            </summary>
            <param name="configFileName">Имя файла конфигурации.</param>
        </member>
        <member name="M:CommonLibrary.Settings.SettingsManager.WrapSettingsException(System.Exception,System.String)">
            <summary>
            Обернуть исключение, возникшее при чтении конфига, в SettingsException.
            </summary>
            <param name="currentException">Имя файла конфигурации.</param>
            <param name="configFileName">Имя файла конфигурации.</param>
            <returns>Обернутое исключение.</returns>
        </member>
        <member name="T:CommonLibrary.Settings.SettingsException">
            <summary>
            Исключение работы с настройками.
            </summary>
        </member>
        <member name="M:CommonLibrary.Settings.SettingsException.#ctor(System.Boolean)">
            <summary>
            Конструктор.
            </summary>
            <param name="isInternal">Признак, что исключение является внутренним.</param>
        </member>
        <member name="M:CommonLibrary.Settings.SettingsException.#ctor(System.Boolean,CommonLibrary.LocalizedString)">
            <summary>
            Конструктор.
            </summary>
            <param name="isInternal">Признак, что исключение является внутренним.</param>
            <param name="message">Сообщение.</param>
        </member>
        <member name="M:CommonLibrary.Settings.SettingsException.#ctor(System.Boolean,CommonLibrary.LocalizedString,System.Exception)">
            <summary>
            Конструктор.
            </summary>
            <param name="isInternal">Признак, что исключение является внутренним.</param>
            <param name="message">Сообщение.</param>
            <param name="exception">Внутреннее исключение.</param>
        </member>
        <member name="M:CommonLibrary.Settings.SettingsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор.
            </summary>
            <param name="info">Сериализованные данные об исключении.</param>
            <param name="context">Информация о контексте.</param>
        </member>
        <member name="T:CommonLibrary.Settings.SpecialFolders">
            <summary>
            Класс предопределенных специальных папок платформы.
            </summary>
        </member>
        <member name="F:CommonLibrary.Settings.SpecialFolders.log">
            <summary>
            Логгер.
            </summary>
        </member>
        <member name="F:CommonLibrary.Settings.SpecialFolders.mainAssemblyProductInfo">
            <summary>
            Информация о продукте для главной сборки.
            </summary>
        </member>
        <member name="M:CommonLibrary.Settings.SpecialFolders.FixProductNameInAppDataWithSpaces">
            <summary>
            Переименовать папку в AppData с именем продукта с пробелом Directum RX в папку DirectumRX без пробела.
            Фикс баги #117553. 
            </summary>
        </member>
        <member name="M:CommonLibrary.Settings.SpecialFolders.ProductUserApplicationData(System.String[])">
            <summary>
            Создать и вернуть подпапку в папке продукта профиля пользователя.
            </summary>
            <param name="subpath">Путь к подпапкам.</param>
            <returns>Папка.</returns>
        </member>
        <member name="M:CommonLibrary.Settings.SpecialFolders.ProductCommonApplicationData(System.String[])">
            <summary>
            Создать и вернуть подпапку в папке продукта в общем репозитории.
            </summary>
            <param name="subpath">Путь к подпапкам.</param>
            <returns>Папка.</returns>
        </member>
        <member name="M:CommonLibrary.Settings.SpecialFolders.ProductUserApplicationData(System.Reflection.Assembly,System.String[])">
            <summary>
            Создать и вернуть подпапку в папке продукта профиля пользователя.
            </summary>
            <param name="assemblyWithInfo">Сборка содержащая информацию о продукте.</param>
            <param name="subpath">Путь к подпапкам.</param>
            <returns>Папка.</returns>
        </member>
        <member name="M:CommonLibrary.Settings.SpecialFolders.ProductApplicationData(CommonLibrary.Utils.AssemblyProductInfo,System.String,System.String[])">
            <summary>
            Создать и вернуть подпапку в папке продукта в AppData.
            </summary>
            <param name="productInfo">Информация о продукте.</param>
            <param name="applicationDataPath">Путь до папки AppData.</param>
            <param name="subpath">Путь к подпапкам.</param>
            <returns>Папка.</returns>
        </member>
        <member name="T:CommonLibrary.CommonJsonSerializer">
            <summary>
            Базовый Json сериализатор.
            </summary>
        </member>
        <member name="F:CommonLibrary.CommonJsonSerializer.DefaultBufferSize">
            <summary>
            Размер буфера по умолчанию (взят из исходников StreamWriter).
            </summary>
        </member>
        <member name="M:CommonLibrary.CommonJsonSerializer.DeserializeInternal``1(System.IO.Stream)">
            <summary>
            Десериализовать метаданные из потока.
            </summary>
            <typeparam name="T">Тип метаданных.</typeparam>
            <param name="stream">Поток.</param>
            <returns>Десериализованные метаданные.</returns>
        </member>
        <member name="M:CommonLibrary.CommonJsonSerializer.DeserializeInternal``1(System.String)">
            <summary>
            Десериализовать из строки.
            </summary>
            <typeparam name="T">Тип.</typeparam>
            <param name="value">Json строка.</param>
            <returns>Объект типа T.</returns>
        </member>
        <member name="M:CommonLibrary.CommonJsonSerializer.SerializeInternal``1(``0,System.IO.Stream)">
            <summary>
            Сериализовать объект в поток.
            </summary>
            <typeparam name="T">Сериализуемый тип объекта.</typeparam>
            <param name="obj">Сериализуемый объект.</param>
            <param name="stream">Поток.</param>
        </member>
        <member name="M:CommonLibrary.CommonJsonSerializer.FromObject(System.Object)">
            <summary>
            Получить JObject из типизированного объекта.
            </summary>
            <param name="value">Объект.</param>
            <returns>Объект JObject.</returns>
        </member>
        <member name="T:CommonLibrary.JsonSettingsLoader">
            <summary>
            Загрузчик списка настроек в формате Json.
            </summary>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoader.FromObject(System.Object)">
            <summary>
            Получить JObject из типизированного объекта.
            </summary>
            <param name="value">Объект.</param>
            <returns>Объект JObject.</returns>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoader.TryAddProperty(System.Object,Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Попробовать добавить свойство.
            </summary>
            <param name="obj">Объект.</param>
            <param name="jObject">Объект JObject.</param>
            <param name="propertyName">Имя свойства.</param>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoader.FromObject(System.Object,System.String)">
            <summary>
            Получить JObject из типизированного объекта.
            </summary>
            <param name="value">Объект.</param>
            <param name="settingsKey">Секция настроек.</param>
            <returns>Объект JObject.</returns>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoader.Save(System.String)">
            <summary>
            Записать настройки в файл.
            </summary>
            <param name="customSettingsPath">Произвольный путь к файлу.</param>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoader.Save">
            <summary>
            Сохранить настройки.
            </summary>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoader.Load">
            <summary>
            Загрузить настройки.
            </summary>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoader.TryLoad">
            <summary>
            Безопасно загрузить настройки.
            </summary>
            <returns>True, если удалось загрузить настройки.</returns>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoader.CreateNew">
            <summary>
            Создать пустой массив с настройками.
            </summary>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoader.GetToken(System.Type)">
            <summary>
            Получить токен.
            </summary>
            <param name="objType">Тип объекта.</param>
            <returns>JToken.</returns>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoader.GetSettings``1">
            <summary>
            Получить настройки.
            </summary>
            <typeparam name="T">Тип настроек.</typeparam>
            <returns>Экземпляр класса настроек.</returns>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoader.GetSettings``1(System.String)">
            <summary>
            Получить настройки.
            </summary>
            <typeparam name="T">Тип настроек.</typeparam>
            <param name="settingsKey">Секция настроек.</param>
            <returns>Экземпляр класса настроек.</returns>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoader.UpdateSettings``1(``0)">
            <summary>
            Обновить настройки.
            </summary>
            <typeparam name="T">Тип настроек.</typeparam>
            <param name="obj">Экземпляр настроек.</param>
            <returns>True, если настройки были в списке.</returns>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoader.UpdateSettings``1(``0,System.String)">
            <summary>
            Обновить настройки.
            </summary>
            <typeparam name="T">Тип настроек.</typeparam>
            <param name="obj">Экземпляр настроек.</param>
            <param name="settingsKey">Секция настроек.</param>
            <returns>True, если настройки были в списке.</returns>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoader.AddSettings``1(``0)">
            <summary>
            Добавить настройки.
            </summary>
            <typeparam name="T">Тип класса настроек.</typeparam>
            <param name="obj">Экземпляр класса настроек.</param>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoader.AddSettings``1(``0,System.String)">
            <summary>
            Добавить настройки.
            </summary>
            <typeparam name="T">Тип класса настроек.</typeparam>
            <param name="obj">Экземпляр класса настроек.</param>
            <param name="settingsKey">Секция настроек.</param>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoader.AddOrUpdateSettings``1(``0)">
            <summary>
            Добавить или обновить настройки.
            </summary>
            <typeparam name="T">Тип класса настроек.</typeparam>
            <param name="obj">Экземпляр класса настроек.</param>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoader.AddOrUpdateSettings``1(``0,System.String)">
            <summary>
            Добавить или обновить настройки.
            </summary>
            <typeparam name="T">Тип класса настроек.</typeparam>
            <param name="obj">Экземпляр класса настроек.</param>
            <param name="settingsKey">Секция настроек.</param>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoader.RemoveSettings``1(``0)">
            <summary>
            Удалить настройки.
            </summary>
            <typeparam name="T">Тип класса настроек.</typeparam>
            <param name="obj">Экземпляр класса настроек.</param>
            <returns>True, если настройки были в списке.</returns>
        </member>
        <member name="T:CommonLibrary.JsonSettingsLoaderFactory">
            <summary>
            Фабрика загрузчиков списка настроек в формате Json.
            </summary>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoaderFactory.Clear">
            <summary>
            Очистить кеш экземпляров.
            </summary>
        </member>
        <member name="M:CommonLibrary.JsonSettingsLoaderFactory.GetLoader(System.String)">
            <summary>
            Получить экземпляр JsonSettingsLoader.
            </summary>
            <param name="settingsPath">Путь к файлу с настройками.</param>
            <returns>JsonSettingsLoader.</returns>
        </member>
        <member name="T:CommonLibrary.Utils.AssemblyProductInfo">
            <summary>
            Информация о продукте.
            </summary>
        </member>
        <member name="P:CommonLibrary.Utils.AssemblyProductInfo.CompanyName">
            <summary>
            Имя компании.
            </summary>
        </member>
        <member name="P:CommonLibrary.Utils.AssemblyProductInfo.ProductName">
            <summary>
            Имя продукта.
            </summary>
        </member>
        <member name="P:CommonLibrary.Utils.AssemblyProductInfo.NormalizedProductName">
            <summary>
            Нормализованное (без пробелов) имя продукта.
            </summary>
        </member>
        <member name="M:CommonLibrary.Utils.AssemblyProductInfo.#ctor(System.Reflection.Assembly)">
            <summary>
            Конструктор по умолчанию.
            </summary>
            <param name="assemblyWithInfo">Сборка, содержащая информацию о продукте.</param>
        </member>
        <member name="M:CommonLibrary.Utils.AssemblyProductInfo.#ctor">
            <summary>
            Конструктор для тестирования.
            </summary>
        </member>
        <member name="T:CommonLibrary.Utils.MemoryInfo">
            <summary>
            Информация о досутпной памяти.
            </summary>
        </member>
        <member name="P:CommonLibrary.Utils.MemoryInfo.Free">
            <summary>
            Свободная физическая память.
            </summary>
        </member>
        <member name="P:CommonLibrary.Utils.MemoryInfo.Total">
            <summary>
            Общая физическая память.
            </summary>
        </member>
        <member name="P:CommonLibrary.Utils.MemoryInfo.PageFile">
            <summary>
            Размер файла подкачки.
            </summary>
        </member>
        <member name="T:CommonLibrary.Utils.MemoryInfoProvider">
            <summary>
            Провайдер информации о доступной памяти.
            </summary>
        </member>
        <member name="M:CommonLibrary.Utils.MemoryInfoProvider.GetMemoryInfo">
            <summary>
            Получить информацию о доступной памяти.
            </summary>
        </member>
        <member name="M:CommonLibrary.Utils.MemoryInfoProvider.GetLinuxMemoryInfo">
            <summary>
            Получить информацию о доступной памяти под Linux.
            </summary>
        </member>
        <member name="M:CommonLibrary.Utils.MemoryInfoProvider.GetWindowsMemoryInfo">
            <summary>
            Получить информацию о доступной памяти под Windows.
            </summary>
        </member>
        <member name="T:CommonLibrary.Utils.NativeMethods">
            <summary>
            Обертка для нативных вызовов.
            </summary>
        </member>
        <member name="T:CommonLibrary.Utils.RegexExtensions">
            <summary>
            Методы расщирения для Regex.
            </summary>
        </member>
        <member name="M:CommonLibrary.Utils.RegexExtensions.IsMatchNotNull(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Вызов IsMatch с проверкой строки на IsNullOrEmpty.
            </summary>
            <param name="regex">Регулярное выражение.</param>
            <param name="input">Строка для поиска соответствия.</param>
            <returns>true, если строка не нулевая и найдено соответствие.</returns>
        </member>
        <member name="T:CommonLibrary.Utils.Search.CommonLikeData">
            <summary>
            Портированный LikeData из DevExpress.
            </summary>
        </member>
        <member name="M:CommonLibrary.Utils.Search.CommonLikeData.ConvertToRegex(System.String)">
            <summary>
            Сконвертировать в regex строку.
            </summary>
            <param name="originalPattern">Шаблон.</param>
            <returns>Строка.</returns>
        </member>
        <member name="M:CommonLibrary.Utils.Search.CommonLikeData.ConvertToRegex(System.String,System.Boolean)">
            <summary>
            Сконвертировать в regex строку.
            </summary>
            <param name="originalPattern">Шаблон.</param>
            <param name="appendLineBounds">Добавить границы строк.</param>
            <returns>Строка.</returns>
        </member>
        <member name="T:CommonLibrary.Utils.Search.ComparePatternsResult">
            <summary>
            Результат сравнения шаблонов поиска.
            </summary>
        </member>
        <member name="F:CommonLibrary.Utils.Search.ComparePatternsResult.Stronger">
            <summary>
            Шаблон сильнее (результат применения шаблона полностью входит в результат того шаблона,
            с которым идет сравнение).
            </summary>
        </member>
        <member name="F:CommonLibrary.Utils.Search.ComparePatternsResult.Equal">
            <summary>
            Шаблоны равны.
            </summary>
        </member>
        <member name="F:CommonLibrary.Utils.Search.ComparePatternsResult.Different">
            <summary>
            Шаблоны отличаются.
            </summary>
        </member>
        <member name="T:CommonLibrary.Utils.Search.ISearchPatternRegexFactory">
            <summary>
            Интерфейс фабрики Regex для шаблонов поиска.
            </summary>
        </member>
        <member name="M:CommonLibrary.Utils.Search.ISearchPatternRegexFactory.ToRegex(System.String,CommonLibrary.SearchCondition)">
            <summary>
            Получить объект регулярного выражения для поиска по шаблону.
            </summary>
            <param name="pattern">Пользовательский шаблон.</param>
            <param name="searchCondition">Условие поиска.</param>
            <returns>Регулярное выражение.</returns>
        </member>
        <member name="T:CommonLibrary.Utils.Search.SearchPatternComparer">
            <summary>
            Сравниватель шаблонов поиска по строке.
            </summary>
        </member>
        <member name="M:CommonLibrary.Utils.Search.SearchPatternComparer.ComparePatterns(System.String,System.String,CommonLibrary.SearchCondition)">
            <summary>
            Сравнить шаблоны поиска.
            </summary>
            <param name="basePattern">Шаблон, с которым идет сравнение.</param>
            <param name="pattern">Шаблон, для которого возвращается результат сравнения.</param>
            <param name="searchCondition">Условие поиска, по которому применяются шаблоны.</param>
            <returns>Результат сравнения.</returns>
        </member>
        <member name="M:CommonLibrary.Utils.Search.SearchPatternComparer.IsStrongPatternPart(System.String,System.String,CommonLibrary.SearchCondition)">
            <summary>
            Проверить, является ли часть шаблона более сильной, чем другая часть шаблона.
            </summary>
            <param name="part">Часть шаблона, для которой выполняется проверка.</param>
            <param name="basePart">Часть шаблона, с которой идет сравнение.</param>
            <param name="searchCondition">Условие поиска, по которому применяются части шаблона.</param>
            <returns>True - часть шаблона более сильная.</returns>
        </member>
        <member name="T:CommonLibrary.Utils.Search.SearchPatternNormalizer">
            <summary>
            Нормализатор шаблонов поиска.
            </summary>
        </member>
        <member name="M:CommonLibrary.Utils.Search.SearchPatternNormalizer.Normalize(System.String)">
            <summary>
            Нормализовать шаблон (экранировать, расширить на "похожие" символы, ...).
            </summary>
            <param name="pattern">Шаблон.</param>
            <returns>Нормализованный шаблон.</returns>
        </member>
        <member name="M:CommonLibrary.Utils.Search.SearchPatternNormalizer.ReplaceSimilarCharacters(System.String)">
            <summary>
            Заменить похожие символы. Например, ё -> е.
            </summary>
            <param name="pattern">Шаблон.</param>
            <returns>Шаблон с замененными символами.</returns>
        </member>
        <member name="M:CommonLibrary.Utils.Search.SearchPatternNormalizer.ExpandSimilarCharacters(System.String)">
            <summary>
            Расширить шаблон на "похожие" символы (заменить символ на набор "похожих").
            </summary>
            <param name="pattern">Шаблон.</param>
            <returns>Шаблон, расширенный на "похожие" символы.</returns>
        </member>
        <member name="M:CommonLibrary.Utils.Search.SearchPatternNormalizer.Escape(System.String)">
            <summary>
            Экранировать спецсимволы шаблона.
            </summary>
            <param name="pattern">Шаблона.</param>
            <returns>Шаблон с экранированными спецсимволами.</returns>
        </member>
        <member name="T:CommonLibrary.Utils.Search.SearchPatternRegexCache">
            <summary>
            Кеш объектов регулярных выражений.
            </summary>
        </member>
        <member name="P:CommonLibrary.Utils.Search.SearchPatternRegexCache.Instance">
            <summary>
            Экземпляр-одиночка.
            </summary>
        </member>
        <member name="F:CommonLibrary.Utils.Search.SearchPatternRegexCache.items">
            <summary>
            Элементы кеша.
            </summary>
        </member>
        <member name="M:CommonLibrary.Utils.Search.SearchPatternRegexCache.Get(System.String)">
            <summary>
            Получить Regex по шаблону.
            </summary>
            <param name="pattern">Шаблон поиска.</param>
            <returns>Объект Regex по указанному шаблону.</returns>
        </member>
        <member name="T:CommonLibrary.Utils.Search.SearchPatternSplitter">
            <summary>
            Разбиватель шаблона поиска на составные части.
            </summary>
        </member>
        <member name="M:CommonLibrary.Utils.Search.SearchPatternSplitter.SplitPattern(System.String)">
            <summary>
            Получить составные части шаблона типа "Содержит по строке".
            </summary>
            <param name="pattern">Исходный шаблон типа "Содержит по строке".</param>
            <returns>Составные части шаблона.</returns>
        </member>
        <member name="M:CommonLibrary.Utils.Search.SearchPatternSplitter.SplitBySpecialCharactersToLower(System.String)">
            <summary>
            Разделить текст на слова в нижнем регистре, где разделителями являются символы, не относящиеся к буквам и цифрам.
            </summary>
            <param name="value">Текст.</param>
            <returns>Массив слов в нижнем регистре, содержащихся в тексте.</returns>
        </member>
        <member name="M:CommonLibrary.Utils.Search.SearchPatternSplitter.SplitBySpecialCharacters(System.String)">
            <summary>
            Разделить текст на слова, где разделителями являются символы, не относящиеся к буквам и цифрам.
            </summary>
            <param name="value">Текст.</param>
            <returns>Массив слов, содержащихся в тексте.</returns>
        </member>
        <member name="T:CommonLibrary.Utils.SearchPatternRegexFactory">
            <summary>
            Конвертер шаблонов поиска в Regex, использующий механизмы DevExpress.
            </summary>
        </member>
        <member name="T:CommonLibrary.DirectoryUtils">
            <summary>
            Класс-расширение для работы с каталогами.
            </summary>
        </member>
        <member name="F:CommonLibrary.DirectoryUtils.log">
            <summary>
            Логгер.
            </summary>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.CreateOrCleanDirectory(System.String,System.Predicate{System.IO.FileInfo})">
            <summary>
            Создать или очистить директорию.
            </summary>
            <param name="directoryPath">Путь к директории.</param>
            <param name="excludeFilePattern">Набор критериев для определения файлов, которые запрещено удалять.</param>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.TryCreateOrCleanDirectory(System.String)">
            <summary>
            Рекурсивное удаление каталога с обработкой исключения доступа.
            </summary>
            <param name="path">Имя каталога, который необходимо удалить.</param>
            <returns>True, если удаление прошло успешно.</returns>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.InternalTryCreateOrCleanDirectory(System.String,System.Boolean)">
            <summary>
            Внутренняя реализация рекурсивного удаления каталога с обработкой исключений при доступе к каталогу или его файлам.
            </summary>
            <param name="path">Имя каталога, который необходимо удалить.</param>
            <param name="isFirstAttempt">Признак того, что это первая попытка удаления каталога.</param>
            <returns>True, если удаление каталога прошло успешно.</returns>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.TryDeleteDirectory(System.String)">
            <summary>
            Рекурсивное удаление каталога с обработкой исключения доступа.
            </summary>
            <param name="path">Имя каталога, который необходимо удалить.</param>
            <returns>True, если удаление прошло успешно.</returns>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.InternalTryDeleteDirectory(System.String,System.Boolean)">
            <summary>
            Внутренняя реализация рекурсивного удаления каталога с обработкой исключений при доступе к каталогу или его файлам.
            </summary>
            <param name="path">Имя каталога, который необходимо удалить.</param>
            <param name="isFirstAttempt">Признак того, что это первая попытка удаления каталога.</param>
            <returns>True, если удаление каталога прошло успешно.</returns>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.SafeEnumerateFiles(System.String)">
            <summary>
            Безопасно перечислить все файлы в папке.
            </summary>
            <param name="sourceFolder">Папка, в которой перечисляются файлы.</param>
            <returns>Список файлов.</returns>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.SafeEnumerateFiles(System.String,System.String)">
            <summary>
            Безопасно перечислить файлы в папке (учитываются только файлы непосредственно в самой папке).
            </summary>
            <param name="sourceFolder">Папка, в которой перечисляются файлы.</param>
            <param name="searchPattern">Строка поиска.</param>
            <returns>Список файлов.</returns>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.SafeEnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Безопасно перечислить файлы в папке.
            </summary>
            <param name="sourceFolder">Папка, в которой перечисляются файлы.</param>
            <param name="searchPattern">Строка поиска.</param>
            <param name="searchOption">Область поиска (возможно искать рекурсивно по всему дереву папок).</param>
            <remarks>В случае ошибки доступа к файлу он просто пропускается.</remarks>
            <returns>Список файлов.</returns>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.SafeEnumerateDirectories(System.String)">
            <summary>
            Безопасно перечислить все подпапки в папке (учитываются только подпапки непосредственно в самой папке).
            </summary>
            <param name="sourceFolder">Папка, в которой перечисляются подпапки.</param>
            <returns>Список папок.</returns>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.SafeEnumerateDirectories(System.String,System.String)">
            <summary>
            Безопасно перечислить подпапки в папке (учитываются только подпапки непосредственно в самой папке).
            </summary>
            <param name="sourceFolder">Папка, в которой перечисляются подпапки.</param>
            <param name="searchPattern">Строка поиска.</param>
            <returns>Список папок.</returns>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.SafeEnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Безопасно перечислить подпапки в папке.
            </summary>
            <param name="sourceFolder">Папка, в которой перечисляются подпапки.</param>
            <param name="searchPattern">Строка поиска.</param>
            <param name="searchOption">Область поиска (возможно искать рекурсивно по всему дереву папок).</param>
            <remarks>В случае ошибки доступа к папке она просто пропускается.</remarks>
            <returns>Список папок.</returns>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.CopyFilesRecursively(System.String,System.String,System.Boolean,System.Action{System.String,System.Boolean})">
            <summary>
            Копирование папки с вложениями.
            </summary>
            <param name="sourcePath">Путь до источника.</param>
            <param name="destinationPath">Путь папки назначения.</param>
            <param name="overwrite">Перезаписывать ли файл.</param>
            <param name="copyFileCallback">Метод, который вызывается при копировании каждого файла.</param>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.CopyFilesRecursively(System.String,System.String,System.Boolean,System.Action{System.String,System.Boolean},System.Boolean)">
            <summary>
            Копирование папки с вложениями.
            </summary>
            <param name="sourcePath">Путь до источника.</param>
            <param name="destinationPath">Путь папки назначения.</param>
            <param name="overwrite">Перезаписывать ли файл.</param>
            <param name="copyFileCallback">Метод, который вызывается при копировании каждого файла.</param>
            <param name="ignoreTooLongPaths">Признак, игнорировать ли ошибки, связанные со слишком длинным путем.</param>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.RemoveDirectoryAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Убрать атрибут каталога.
            </summary>
            <param name="path">Имя каталога.</param>
            <param name="attributes">Атрибут, который необходимо удалить.</param>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.CopyDirectory(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Скопировать папку по указанному пути, создав ее, если ее не существует.
            </summary>
            <param name="sourcePath">Источник копирования.</param>
            <param name="destinationPath">Цель копирования.</param>
            <param name="copySubdirectories">Копировать подпапки.</param>
            <param name="overwriteExistingFiles">Заменить существующие файлы.</param>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.GetEmptySubdirectories(System.String)">
            <summary>
            Получить список пустых подпапок для указанной папки.
            </summary>
            <param name="directoryToSearch">Полный путь к папке для поиска пустых папок.</param>
            <returns>Список пустых подпапок.</returns>
            <remarks>
            Подпапка считается пустой, если не содержит файлов, в том числе в своих подпапках на любом уровне вложенности.
            </remarks>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.RemoveAllFileAttributeInDirectory(System.String,System.Boolean)">
            <summary>
            Удалить атрибуты у всех файлов в каталоге.
            </summary>
            <param name="path">Имя каталога.</param>
            <param name="recursive">Признак, нужно ли удалять атрибуты файлов во вложенных каталогах.</param>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.SafeEnumerateDirectoryItems(System.String,System.IO.SearchOption,System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Безопасно перечислить объекты в папке.
            </summary>
            <param name="sourceFolder">Папка, в которой нужно перечислить объекты.</param>
            <param name="searchOption">Область поиска.</param>
            <param name="getItems">Функция для получения конкретных объектов в папке.</param>
            <remarks>В случае ошибки доступа к объекту он просто пропускается.</remarks>
            <returns>Список объектов в папке.</returns>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.EnsureDirectory(System.String)">
            <summary>
            Проверить, что папка существует, и создать ее если нет.
            </summary>
            <param name="directoryPath">Путь к папке.</param>
        </member>
        <member name="M:CommonLibrary.DirectoryUtils.ResolvePath(System.String)">
            <summary>
            Резолв относительного пути в абсолютный.
            </summary>
            <param name="relativePath">Относительный путь.</param>
            <returns>Абсолютный путь.</returns>
        </member>
        <member name="T:CommonLibrary.FileUtils">
            <summary>
            Класс-расширение для работы с файлами.
            </summary>
        </member>
        <member name="M:CommonLibrary.FileUtils.TryDeleteFile(System.String)">
            <summary>
            Удаление файла с обработкой исключения доступа к файлу.
            </summary>
            <param name="fileName">Путь до файла.</param>
            <returns>true, если удаление файла прошло успешно.</returns>
        </member>
        <member name="M:CommonLibrary.FileUtils.TryDeleteFile(System.String,System.Boolean)">
            <summary>
            Удаление файла с игнорированием любых исключений при доступе к файлу.
            </summary>
            <param name="fileName">Путь до файла.</param>
            <param name="silentMode">Тихий режим без вывода сообщений в лог.</param>
            <returns>True, если удаление файла прошло успешно.</returns>
        </member>
        <member name="M:CommonLibrary.FileUtils.InternalTryDeleteFile(System.String,System.Boolean)">
            <summary>
            Внутренняя реализация удаления файла с обработкой исключений при доступе к файлу.
            </summary>
            <param name="fileName">Путь до файла.</param>
            <param name="isFirstAttempt">Признак того, что это первая попытка удаления файла.</param>
            <returns>True, если удаление файла прошло успешно.</returns>
        </member>
        <member name="M:CommonLibrary.FileUtils.SetFileAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Установить атрибут файла.
            </summary>
            <param name="filePath">Путь к файлу.</param>
            <param name="attributes">Атрибут, который необходимо установить.</param>
        </member>
        <member name="M:CommonLibrary.FileUtils.RemoveFileAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Убрать атрибут файла.
            </summary>
            <param name="filePath">Путь к файлу.</param>
            <param name="attributes">Атрибут, который необходимо удалить.</param>
        </member>
        <member name="M:CommonLibrary.FileUtils.NormalizeFileName(System.String)">
            <summary>
            Очищает некорректные символы в имени файла.
            </summary>
            <param name="fileName">Имя файла.</param>
            <returns>Корректное для файловой системы имя файла.</returns>
        </member>
        <member name="M:CommonLibrary.FileUtils.GetUniqueFilePath(System.String,System.String,System.Boolean)">
            <summary>
            Возвращает полное уникальное имя файла на основе пути к папке и имени файла. Если файл занят, то добавляет цифру в конце.
            </summary>
            <param name="directoryPath">Папка.</param>
            <param name="name">Имя.</param>
            <param name="useExistingFile">Использовать существующий файл.</param>
            <returns>Полное имя файла.</returns>
        </member>
        <member name="M:CommonLibrary.FileUtils.ReplaceXmlFile(System.Xml.Linq.XDocument,System.String)">
            <summary>
            Замена xml файла с простой проверкой на различие.
            </summary>
            <param name="config">Xml-файл.</param>
            <param name="configPath">Путь к файлу.</param>
        </member>
        <member name="M:CommonLibrary.FileUtils.ToBytes(System.Xml.Linq.XDocument)">
            <summary>
            Преобразовать xml-конфиг в набор байт.
            </summary>
            <param name="config">Xml-конфиг.</param>
            <returns>Набор байт.</returns>
        </member>
        <member name="M:CommonLibrary.FileUtils.GetFileContent(System.String)">
            <summary>
            Получить содержимое файла.
            </summary>
            <param name="newConfig">Путь к файлу.</param>
            <returns>Null, если файл не найден.</returns>
        </member>
        <member name="M:CommonLibrary.FileUtils.OpenRead(System.String)">
            <summary>
            Открыть и получить содержимое файла.
            </summary>
            <param name="path">Полное имя файла.</param>
            <returns>Поток данных из файла.</returns>
        </member>
        <member name="M:CommonLibrary.FileUtils.OpenEditableRead(System.String)">
            <summary>
            Открыть и получить содержимое редактируемого файла.
            </summary>
            <param name="path">Полное имя файла.</param>
            <returns>Поток данных из файла.</returns>
        </member>
        <member name="M:CommonLibrary.FileUtils.IsLockedForRead(System.String)">
            <summary>
            Проверить заблокированность файла на чтение.
            </summary>
            <param name="path">Путь к файлу.</param>
            <returns>Признак заблокированности файла для чтения.</returns>
        </member>
        <member name="M:CommonLibrary.FileUtils.HasIOExceptionError(System.Exception)">
            <summary>
            Проверить, содержит ли исключение ввода-вывода реальную ошибку.
            </summary>
            <param name="exception">Исключение.</param>
            <returns>True - если есть ошибка.</returns>
        </member>
        <member name="M:CommonLibrary.FileUtils.GetRelativePath(System.String,System.String)">
            <summary>
            Получить путь к файлу относительно указанной папки.
            </summary>
            <param name="filePath">Полный путь к файлу.</param>
            <param name="rootFolderPath">Путь к корневой папке, в которой лежит файл.</param>
            <returns>Относительный путь к файлу.</returns>
        </member>
        <member name="M:CommonLibrary.FileUtils.ForceCreate(System.String)">
            <summary>
            Принудительно создать файл.
            </summary>
            <param name="filePath">Путь к файлу.</param>
            <returns>Поток.</returns>
            <remarks>Создаёт подпапки в случае их отсутствия.</remarks>
        </member>
        <member name="M:CommonLibrary.FileUtils.CopyFile(System.String,System.String)">
            <summary>
            Скопировать файл с созданием папки, если ее еще нет.
            </summary>
            <param name="source">Источник.</param>
            <param name="destination">Назначение.</param>
        </member>
        <member name="T:CommonLibrary.ImageFormat">
            <summary>
            Формат изображения.
            </summary>
        </member>
        <member name="F:CommonLibrary.ImageFormat.Bmp">
            <summary>
            Bmp.
            </summary>
        </member>
        <member name="F:CommonLibrary.ImageFormat.Ico">
            <summary>
            Ico.
            </summary>
        </member>
        <member name="F:CommonLibrary.ImageFormat.Gif">
            <summary>
            Gif.
            </summary>
        </member>
        <member name="F:CommonLibrary.ImageFormat.Jpeg">
            <summary>
            Jpeg.
            </summary>
        </member>
        <member name="F:CommonLibrary.ImageFormat.Png">
            <summary>
            Png.
            </summary>
        </member>
        <member name="F:CommonLibrary.ImageFormat.Tiff">
            <summary>
            Tiff.
            </summary>
        </member>
        <member name="F:CommonLibrary.ImageFormat.Wmp">
            <summary>
            Wmp.
            </summary>
        </member>
        <member name="T:CommonLibrary.Interval">
            <summary>
            Интервал значений. Представляет собой полуинтервал [Begin; End), где End не включается в интервал.
            </summary>
        </member>
        <member name="P:CommonLibrary.Interval.Begin">
            <summary>
            Нижняя граница диапазона.
            </summary>
        </member>
        <member name="P:CommonLibrary.Interval.End">
            <summary>
            Верхняя граница диапазона (не включается в интервал).
            </summary>
        </member>
        <member name="P:CommonLibrary.Interval.Count">
            <summary>
            Количество записей.
            </summary>
        </member>
        <member name="M:CommonLibrary.Interval.Take(System.Int32)">
            <summary>
            Выбрать количество записей.
            </summary>
            <param name="count">Количество записей.</param>
            <returns>Интервал.</returns>
        </member>
        <member name="M:CommonLibrary.Interval.SkipTake(System.Int32,System.Int32)">
            <summary>
            Пропустить и выбрать количество записей.
            </summary>
            <param name="skip">Количество пропущенных.</param>
            <param name="count">Количество выбранных.</param>
            <returns>Интервал.</returns>
        </member>
        <member name="M:CommonLibrary.Interval.#ctor(System.Int32,System.Int32)">
            <summary>
            Конструктор.
            </summary>
            <param name="begin">Нижняя граница диапазона.</param>
            <param name="end">Верхняя граница диапазона (не включается в интервал).</param>
        </member>
        <member name="T:CommonLibrary.ProcessUtils">
            <summary>
            Утилиты для работы с просессами.
            </summary>
        </member>
        <member name="M:CommonLibrary.ProcessUtils.GetOtherProcesses(System.String,System.Int32)">
            <summary>
            Получить другие процессы.
            </summary>
            <param name="currentProcessPath">Текущий путь к просессу.</param>
            <param name="currentProcessId">Текущий ProcessId.</param>
            <returns>Список процессов, исключая текущий.</returns>
        </member>
        <member name="M:CommonLibrary.ProcessUtils.GetAllProcessesByPath(System.String,System.Boolean)">
            <summary>
            Получить все процессы с полным путём к процессу.
            </summary>
            <param name="currentProcessPath">Текущий путь к просессу.</param>
            <param name="includeExited">Включая exited.</param>
            <returns>Список процессов.</returns>
        </member>
        <member name="M:CommonLibrary.ProcessUtils.GetAllProcessesByNameInDirectory(System.String,System.String)">
            <summary>
            Получить все процессы с именем процесса в папке (включая подпапки).
            </summary>
            <param name="processFileName">Имя процесса (можно без расширения).</param>
            <param name="processDirectoryPath">Папка, в котрой искать процессы.</param>
            <returns>Список процессов.</returns>
        </member>
        <member name="M:CommonLibrary.ProcessUtils.GetAllProcessesInDirectory(System.String)">
            <summary>
             Получить все процессы в папке.
            </summary>
            <param name="processDirectoryPath">Папка, в котрой искать процессы.</param>
            <returns>Список процессов.</returns>
        </member>
        <member name="M:CommonLibrary.ProcessUtils.IncludeByEqualFilePath(System.String,System.String)">
            <summary>
            Равен ли полный путь к процессу текущему пути к процессу.
            </summary>
            <param name="processPath">Путь к процессу.</param>
            <param name="currentProcessPath">Текущий путь к процессу.</param>
            <returns><c>true</c>, если равны.</returns>
        </member>
        <member name="M:CommonLibrary.ProcessUtils.IncludeInProcessDirPath(System.String,System.String)">
            <summary>
            Включает ли в себя путь к процессу путь к директории процесса.
            </summary>
            <param name="processPath">Путь к процессу.</param>
            <param name="processDirPath">Путь к директории процесса.</param>
            <returns><c>true</c>, если включает.</returns>
        </member>
        <member name="M:CommonLibrary.ProcessUtils.GetLiveProcessesWithFilter(System.Collections.Generic.IEnumerable{System.Diagnostics.Process},System.Predicate{System.String},System.Boolean)">
            <summary>
            Получить отфильтрованную коллекцию процессов.
            </summary>
            <param name="processes">Коллекция процессов.</param>
            <param name="includePredicate">Метод, в котором задан набор критериев для фильтра процессов.</param>
            <param name="includeExited">Включить ли завершенные.</param>
            <returns>Отфильтрованная коллекция процессов.</returns>
        </member>
        <member name="M:CommonLibrary.ProcessUtils.KillOtherWithSkip(System.String,System.Int32,System.Int32)">
            <summary>
            Убить все остальные процессы, кроме текущего.
            </summary>
            <param name="currentProcessPath">Путь к текущему процессу.</param>
            <param name="currentProcessId">Текущий ProcessId.</param>
            <param name="skip">Сколько оставить текущих процессов.</param>
        </member>
        <member name="M:CommonLibrary.ProcessUtils.KillAndWaitForExit(System.Collections.Generic.IReadOnlyList{System.Diagnostics.Process})">
            <summary>
            Убить процессы и дождаться завершения.
            </summary>
            <param name="processes">Список процессов.</param>
        </member>
        <member name="T:CommonLibrary.ServiceUtils">
            <summary>
            Сервисные утилиты.
            </summary>
        </member>
        <member name="M:CommonLibrary.ServiceUtils.Debounce``1(System.Action{``0},System.Int32)">
            <summary>
            Функция Debounce.
            </summary>
            <typeparam name="T">Тип результата действия.</typeparam>
            <param name="func">Функция, которую надо сделать debonce.</param>
            <param name="milliseconds">Debounce timer.</param>
            <returns>Действие.</returns>
            <remarks>Взято тут: https://stackoverflow.com/questions/28472205/c-sharp-event-debounce. </remarks> 
        </member>
        <member name="M:CommonLibrary.ServiceUtils.WaitFor(System.Func{System.Boolean},System.Int32)">
            <summary>
            Подождать выполнения действия.
            </summary>
            <param name="action">Действие. Возвращает true, если успешно выполнилось.</param>
            <param name="timeoutMilliseconds">Время ожидания.</param>
            <returns>True, если дождались.</returns>
        </member>
        <member name="T:CommonLibrary.SimilarStringEqualityComparer">
            <summary>
            Сравнение строк на похожесть.
            </summary>
        </member>
        <member name="F:CommonLibrary.SimilarStringEqualityComparer.InstanceIgnoreCase">
            <summary>
            Синглтон.
            </summary>
        </member>
        <member name="T:CommonLibrary.StreamUtils">
            <summary>
            Класс-расширение для работы с потоками.
            </summary>
        </member>
        <member name="M:CommonLibrary.StreamUtils.GetHashString(System.Byte[])">
            <summary>
            Получить строковое представление MD5-хеша.
            </summary>
            <param name="hash">MD5-хеш.</param>
            <returns>Строковое представление MD5-хеша.</returns>
        </member>
        <member name="M:CommonLibrary.StreamUtils.GetMD5Hash(System.IO.Stream)">
            <summary>
            Метод-расширение для получение MD5-хэша потока.
            </summary>
            <param name="stream">Поток.</param>
            <returns>MD5-хэш потока.</returns>
        </member>
        <member name="M:CommonLibrary.StreamUtils.GetMD5Hash(System.Byte[])">
            <summary>
            Метод-расширение для получения MD5-хеша массива байт.
            </summary>
            <param name="data">Массив байт.</param>
            <returns>MD5-хеш массива байт.</returns>
        </member>
        <member name="M:CommonLibrary.StreamUtils.ReadToEnd(System.IO.Stream,System.Int32)">
            <summary>
            Считать поток от начала до конца.
            </summary>
            <param name="stream">Экземпляр потока.</param>
            <param name="bufferSize">Размер буфера.</param>
            <returns>Массив байт потока.</returns>
        </member>
        <member name="M:CommonLibrary.StreamUtils.ReadStreamByChunks(System.IO.Stream,System.Int32)">
            <summary>
            Прочитать поток порциями заданной длины.
            </summary>
            <param name="stream">Поток.</param>
            <param name="chunkSize">Размер одной порции данных, на которые будет разбит поток во время чтения.</param>
            <returns>Массив байт из потока.</returns>
        </member>
        <member name="M:CommonLibrary.StreamUtils.AggregateChunksToArray(System.Collections.Generic.IList{System.Byte[]},System.Int32)">
            <summary>
            Собрать список кусочков в один массив.
            </summary>
            <param name="list">Список мелких массивов.</param>
            <param name="fullDataSize">Полный размер результирующих данных.</param>
            <returns>Массив.</returns>
        </member>
        <member name="M:CommonLibrary.StreamUtils.AggregateChunksToLargeArray(System.Collections.Generic.IList{System.Byte[]},System.Int64)">
            <summary>
            Собрать список кусочков в один большой массив.
            </summary>
            <param name="list">Список мелких массивов.</param>
            <param name="fullDataSize">Полный размер результирующих данных.</param>
            <returns>Массив.</returns>
            <remarks>Для массивов более 2ГБ.</remarks>
        </member>
        <member name="T:CommonLibrary.StringConverter">
            <summary>
            Конвертер строки в значение заданного типа (поддерживает так же конвертацию в Nullable).
            </summary>
        </member>
        <member name="M:CommonLibrary.StringConverter.TryParse``1(System.String,``0)">
            <summary>
            Конвертировать строку в значение заданного типа.
            </summary>
            <typeparam name="T">Тип, значение которого требуется получить.</typeparam>
            <param name="value">Строка.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Конвертированное значение, либо значение по умолчанию, если не удалось конвертировать.</returns>
        </member>
        <member name="M:CommonLibrary.StringConverter.TryParse(System.String,System.Type)">
            <summary>
            Конвертировать строку в значение заданного типа.
            </summary>
            <param name="value">Строка.</param>
            <param name="type">Тип, значение которого требуется получить.</param>
            <returns>Конвертированное значение, либо null, если не удалось конвертировать.</returns>
        </member>
        <member name="M:CommonLibrary.StringConverter.InternalParse(System.String,System.Type)">
            <summary>
            Конвертировать строку в значение заданного типа.
            </summary>
            <param name="value">Строка.</param>
            <param name="type">Тип, значение которого требуется получить.</param>
            <returns>Конвертированное значение, либо null, если не удалось конвертировать.</returns>
        </member>
        <member name="T:CommonLibrary.DateTimeParseResult">
            <summary>
            Результат разбора строки даты-времени.
            </summary>
        </member>
        <member name="F:CommonLibrary.DateTimeParseResult.datePartTypes">
            <summary>
            Типы частей даты.
            </summary>
        </member>
        <member name="F:CommonLibrary.DateTimeParseResult.timePartTypes">
            <summary>
            Типы частей времени.
            </summary>
        </member>
        <member name="F:CommonLibrary.DateTimeParseResult.partsDictionary">
            <summary>
            Словарь с частями даты-времени.
            </summary>
        </member>
        <member name="P:CommonLibrary.DateTimeParseResult.DateParts">
            <summary>
            Части даты.
            </summary>
        </member>
        <member name="P:CommonLibrary.DateTimeParseResult.TimeParts">
            <summary>
            Части времени.
            </summary>
        </member>
        <member name="P:CommonLibrary.DateTimeParseResult.IsValid">
            <summary>
            Признак того, что данный результат валиден.
            </summary>
        </member>
        <member name="M:CommonLibrary.DateTimeParseResult.Append(CommonLibrary.DateTimeParseResult)">
            <summary>
            Заполнить отсутствующие значения частей данного результата значениями частей другого результата.
            </summary>
            <param name="other">Другой результат.</param>
        </member>
        <member name="M:CommonLibrary.DateTimeParseResult.ClearOptionalPartsValues">
            <summary>
            Очистить значения необязательных частей даты-времени.
            </summary>
        </member>
        <member name="M:CommonLibrary.DateTimeParseResult.ToDateTime">
            <summary>
            Сконвертировать данный результат в дату.
            </summary>
            <returns>Дата.</returns>
        </member>
        <member name="M:CommonLibrary.DateTimeParseResult.#ctor(System.String,System.Collections.Generic.ICollection{CommonLibrary.DateTimePartType})">
            <summary>
            Конструктор по-умолчанию.
            </summary>
            <param name="format">Строка формата.</param>
            <param name="mandatoryPartTypes">Список типов обязательных частей даты-времени.</param>
        </member>
        <member name="T:CommonLibrary.DateTimePart">
            <summary>
            Часть даты-времени.
            </summary>
        </member>
        <member name="P:CommonLibrary.DateTimePart.PartType">
            <summary>
            Тип части.
            </summary>
        </member>
        <member name="P:CommonLibrary.DateTimePart.Index">
            <summary>
            Относительная позиция.
            </summary>
        </member>
        <member name="P:CommonLibrary.DateTimePart.IsMandatory">
            <summary>
            Признак того, что часть даты-времени является обязательной.
            </summary>
        </member>
        <member name="P:CommonLibrary.DateTimePart.Value">
            <summary>
            Значение.
            </summary>
        </member>
        <member name="M:CommonLibrary.DateTimePart.GetFormatSpecifiers">
            <summary>
            Получить список идентификаторов, по которым можно идентифицировать данную часть в строке формата.
            </summary>
            <returns>Список идентификаторов.</returns>
        </member>
        <member name="M:CommonLibrary.DateTimePart.#ctor(CommonLibrary.DateTimePartType)">
            <summary>
            Конструктор по-умолчанию.
            </summary>
            <param name="type">Тип части.</param>
        </member>
        <member name="T:CommonLibrary.DateTimePartType">
            <summary>
            Типы частей даты-времени.
            </summary>
        </member>
        <member name="F:CommonLibrary.DateTimePartType.Year">
            <summary>
            Год.
            </summary>
        </member>
        <member name="F:CommonLibrary.DateTimePartType.Month">
            <summary>
            Месяц.
            </summary>
        </member>
        <member name="F:CommonLibrary.DateTimePartType.Day">
            <summary>
            День.
            </summary>
        </member>
        <member name="F:CommonLibrary.DateTimePartType.Hour">
            <summary>
            Час.
            </summary>
        </member>
        <member name="F:CommonLibrary.DateTimePartType.Minute">
            <summary>
            Минута.
            </summary>
        </member>
        <member name="F:CommonLibrary.DateTimePartType.Second">
            <summary>
            Секунда.
            </summary>
        </member>
        <member name="T:CommonLibrary.StringToDateTimeConverter">
            <summary>
            Класс конвертера строки в дату.
            </summary>
        </member>
        <member name="F:CommonLibrary.StringToDateTimeConverter.LineEndPattern">
            <summary>
            Шаблон конца строки.
            </summary>
        </member>
        <member name="F:CommonLibrary.StringToDateTimeConverter.YearLineEndPattern">
            <summary>
            Шаблон конца строки заканчивающейся годом.
            </summary>
        </member>
        <member name="F:CommonLibrary.StringToDateTimeConverter.NumberPattern">
            <summary>
            Шаблон числа.
            </summary>
        </member>
        <member name="F:CommonLibrary.StringToDateTimeConverter.PatternGroupNameTemplate">
            <summary>
            Шаблон имени группы шаблона.
            </summary>
        </member>
        <member name="F:CommonLibrary.StringToDateTimeConverter.DatePatternTemplateBegining">
            <summary>
            Шаблон начала шаблона даты.
            </summary>
        </member>
        <member name="F:CommonLibrary.StringToDateTimeConverter.DatePatternTemplatePart">
            <summary>
            Шаблон части шаблона даты.
            </summary>
        </member>
        <member name="F:CommonLibrary.StringToDateTimeConverter.TimePatternTemplate">
            <summary>
            Шаблон шаблона времени.
            </summary>
        </member>
        <member name="F:CommonLibrary.StringToDateTimeConverter.TimeDesignatorPatternTemplate">
            <summary>
            Шаблон шаблона обозначения AM/PM.
            </summary>
        </member>
        <member name="P:CommonLibrary.StringToDateTimeConverter.CurrentDateTimeFormat">
            <summary>
            Информация о текущем формате даты-времени.
            </summary>
        </member>
        <member name="F:CommonLibrary.StringToDateTimeConverter.monthNamesForCultures">
            <summary>
            Допустимые для используемых культур имена месяцев и их номера.
            </summary>
        </member>
        <member name="P:CommonLibrary.StringToDateTimeConverter.MonthNames">
            <summary>
            Допустимые для текущей культуры имена месяцев и их номера.
            </summary>
        </member>
        <member name="M:CommonLibrary.StringToDateTimeConverter.TryConvert(System.String,CommonLibrary.DateTimeFormat,System.DateTime@)">
            <summary>
            Попытаться конвертировать строку в дату.
            </summary>
            <param name="value">Строка, конвертируемая в дату.</param>
            <param name="format">Формат, на который следует ориентироваться при разборе строки.</param>
            <param name="result">Результат конвертации.</param>
            <returns>Признак того, что конвертация прошла успешно.</returns>
        </member>
        <member name="M:CommonLibrary.StringToDateTimeConverter.GetMandatoryPartTypesByFormat(CommonLibrary.DateTimeFormat)">
            <summary>
            Получить список типов обязательных частей даты-времени по формату.
            </summary>
            <param name="format">Формат даты-времени.</param>
            <returns>Список типов обязательных частей даты-времени.</returns>
        </member>
        <member name="M:CommonLibrary.StringToDateTimeConverter.GetFullFormat(System.String)">
            <summary>
            Получить полную строку формата.
            </summary>
            <param name="formatString">Формат даты-времени.</param>
            <returns>Строка с развернутым форматом.</returns>
        </member>
        <member name="M:CommonLibrary.StringToDateTimeConverter.TryFillPartsFromMatch(System.Text.RegularExpressions.Match,System.Collections.Generic.IEnumerable{CommonLibrary.DateTimePart})">
            <summary>
            Попытаться заполнить части даты-времени значениями из совпадения в строке.
            </summary>
            <param name="match">Совпадение.</param>
            <param name="parts">Список частей.</param>
            <returns>True, если конвертация всех вхождений совпадения успешна, иначе false.</returns>
        </member>
        <member name="M:CommonLibrary.StringToDateTimeConverter.TryParseValue(System.String,CommonLibrary.DateTimePart,System.Int32@,System.Boolean@)">
            <summary>
            Попытаться распарсить значение.
            </summary>
            <param name="value">Значение.</param>
            <param name="dateTimePart">Часть даты-времени.</param>
            <param name="parsedValue">Распарсенное значение.</param>
            <param name="isMonthDefinedByName">Признак того, что месяц был получен по имени.</param>
            <returns>True, если получилось распарсить значение, в противном случае false.</returns>
        </member>
        <member name="M:CommonLibrary.StringToDateTimeConverter.TryGetTimeFromString(System.String,CommonLibrary.DateTimeParseResult,System.Int32@)">
            <summary>
            Попытаться получить время из строки в результат.
            </summary>
            <param name="str">Строка.</param>
            <param name="parsedDateTime">Результат.</param>
            <param name="matchPosition">Позиция подстроки с временем.</param>
            <returns>False, если подстрока с временем не найдена или при ее разборе возникли ошибки, иначе true.</returns>
        </member>
        <member name="M:CommonLibrary.StringToDateTimeConverter.TryGetDateFromString(System.String,CommonLibrary.DateTimeParseResult)">
            <summary>
            Попытаться получить дату из строки в результат.
            </summary>
            <remarks>
            При успешном выполнении из строки будет удалена дата.
            </remarks>
            <param name="str">Строка.</param>
            <param name="parsedDateTime">Результат.</param>
            <returns>False, если подстрока с датой не найдена или при ее разборе возникли ошибки, иначе true.</returns>
        </member>
        <member name="M:CommonLibrary.StringToDateTimeConverter.GetMonthNamesForCurrentCulture">
            <summary>
            Получить допустимые для текущей культуры имена месяцев и их номера.
            </summary>
            <returns>Возвращает допустимые для текущей культуры имена месяцев и их номера.</returns>
        </member>
        <member name="T:CommonLibrary.StringUtils">
            <summary>
            Хэлпер для обработки строк.
            </summary>
        </member>
        <member name="F:CommonLibrary.StringUtils.Space">
            <summary>
            Символ пробела.
            </summary>
        </member>
        <member name="F:CommonLibrary.StringUtils.TrimmingEndValue">
            <summary>
            Значение, которое добавляется в конец строки при её тримминге.
            </summary>
        </member>
        <member name="F:CommonLibrary.StringUtils.Quotes">
            <summary>
            Символ кавычек.
            </summary>
        </member>
        <member name="M:CommonLibrary.StringUtils.ToTitleCase(System.String)">
            <summary>
            Капитализировать строку.
            </summary>
            <param name="value">Строка.</param>
            <returns>Капитализированная строка.</returns>
        </member>
        <member name="M:CommonLibrary.StringUtils.ToTitleCase(CommonLibrary.LocalizedString)">
            <summary>
            Капитализировать строку.
            </summary>
            <param name="value">Строка.</param>
            <returns>Капитализированная строка.</returns>
        </member>
        <member name="M:CommonLibrary.StringUtils.UppercaseFirst(System.String)">
            <summary>
            Перевести первую букву строки в верхний регистр.
            </summary>
            <param name="value">Строка.</param>
            <returns>Строка с первой буквой в верхнем регистре.</returns>
        </member>
        <member name="M:CommonLibrary.StringUtils.LowercaseFirst(System.String)">
            <summary>
            Перевести первую букву строки в нижний регистр.
            </summary>
            <param name="value">Строка.</param>
            <returns>Строка с первой буквой в нижнем регистре.</returns>
        </member>
        <member name="M:CommonLibrary.StringUtils.Parameters(System.String,System.Object[])">
            <summary>
            Расширенный метод который применяется к строке-шаблону и подставляет в него аргументы.
            </summary>
            <param name="format">Строка-шаблон.</param>
            <param name="args">Аргументы которые нужно подставить в строку.</param>
        </member>
        <member name="M:CommonLibrary.StringUtils.EndWithPeriod(System.String)">
            <summary>
            Закончить строку точкой, если она не оканчивается на какой-либо знак конца предложения.
            </summary>
            <param name="value">Исходная строка.</param>
            <returns>Строка с точкой на конце.</returns>
        </member>
        <member name="M:CommonLibrary.StringUtils.ToSecureString(System.String)">
            <summary>
            Преобразование строки в SecureString.
            </summary>
            <param name="value">Строка для преобразования.</param>
            <returns>Преобразованная SecureString.</returns>
        </member>
        <member name="M:CommonLibrary.StringUtils.ToUnsecuredString(System.Security.SecureString)">
            <summary>
            Преобразование SecureString в небезопасную строку.
            </summary>
            <param name="value">Безопасная строка.</param>
            <returns>Небезопасная строка.</returns>
        </member>
        <member name="M:CommonLibrary.StringUtils.GetMD5Hash(System.String)">
            <summary>
            Вычислить MD5-хеш для строки.
            </summary>
            <param name="value">Строка.</param>
            <returns>Хеш.</returns>
        </member>
        <member name="M:CommonLibrary.StringUtils.GetCollectionHash``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Хеш коллекции элементов.
            </summary>
            <typeparam name="T">Тип элементов коллекции.</typeparam>
            <param name="collection">Коллекция элементов.</param>
            <param name="hashProperties">Свойства элемента для вычисления хэша.</param>
            <returns>MD5Hash в виде строки.</returns>
        </member>
        <member name="M:CommonLibrary.StringUtils.RemoveEnd(System.String,System.String)">
            <summary>
            Удалить конец строки.
            </summary>
            <param name="originalValue">Исходное значение.</param>
            <param name="entryValue">Значение вхождения.</param>
            <returns>Строка без вхождения.</returns>
            <remarks>Используется сравнение строк OrdinalIgnoreCase.</remarks>
        </member>
        <member name="M:CommonLibrary.StringUtils.NumberDeclension(System.Int64,System.String,System.String,System.String)">
            <summary>
            Вычисление склонения существительного, идущего после числительного.
            </summary>
            <param name="number">Число.</param>
            <param name="nominative">Именительный падеж существительного.</param>
            <param name="genitiveSingular">Родительный падеж единственного числа существительного.</param>
            <param name="genitivePlural">Родительный падеж множественного числа существительного.</param>
            <returns>Существительное в нужной форме.</returns>
            <example>
            NumberDeclension(1, "час", "часа", "часов") // час.
            NumberDeclension(2, "час", "часа", "часов") // часа.
            NumberDeclension(5, "час", "часа", "часов") // часов.
            </example>
        </member>
        <member name="M:CommonLibrary.StringUtils.RemoveNonLetters(System.String)">
            <summary>
            Удалить из строки все символы не являющиеся буквами.
            </summary>
            <param name="value">Строка.</param>
            <returns>Строка содержащая только буквы.</returns>
        </member>
        <member name="M:CommonLibrary.StringUtils.TrimEnd(System.String,System.Int32)">
            <summary>
            Обрезать строку многоточием, если её длина превышает заданное максимальное количество символов.
            </summary>
            <param name="value">Строка.</param>
            <param name="maxLength">Ограничение по количеству символов в строке.</param>
            <returns>Строка, ограниченная заданным количеством символов.</returns>
        </member>
        <member name="M:CommonLibrary.StringUtils.NumberToWords(System.Int64)">
            <summary>
            Число прописью.
            </summary>
            <param name="number">Целое число.</param>
            <returns>Число, записанное словами.</returns>
        </member>
        <member name="M:CommonLibrary.StringUtils.CountSubstringOccurrences(System.String,System.String)">
            <summary>
            Посчитать количество вхождений подстроки в заданную строку.
            </summary>
            <param name="value">Строка.</param>
            <param name="substring">Подстрока.</param>
            <returns>Количество вхождений подстроки в заданную строку.</returns>
        </member>
        <member name="M:CommonLibrary.StringUtils.PositiveNumberToWords(System.Int64)">
            <summary>
            Записать целое положительное число словами.
            </summary>
            <param name="number">Целое положительное число.</param>
            <returns>Число, записанное словами.</returns>
        </member>
        <member name="M:CommonLibrary.StringUtils.EndThousands(System.Int64,System.Int64)">
            <summary>
            Вернуть окончание для цифры, разбивающей число на тысячи (например, тысяча, миллион, миллиард).
            </summary>
            <param name="thousandOrder">Порядковый номер тысячного разряда.</param>
            <param name="thousandDigit">Цифра из класса тысяч.</param>
            <returns>Окончание для цифры.</returns>
        </member>
        <member name="M:CommonLibrary.StringUtils.EndDigit(System.Int32,System.Boolean)">
            <summary>
            Вернуть окончание для одиночной цифры.
            </summary>
            <param name="digit">Цифра.</param>
            <param name="isMale">Признак того, что числительное должно быть мужского рода.</param>
            <returns>Окончание для цифры.</returns>
        </member>
        <member name="M:CommonLibrary.StringUtils.AddQuotes(System.String)">
            <summary>
            Обернуть строку в кавычки.
            </summary>
            <param name="value">Строка.</param>
            <returns>Строку обернутая в кавычки.</returns>
        </member>
        <member name="M:CommonLibrary.StringUtils.RemoveEmailAddress(System.String)">
            <summary>
            Удалить из строки email адрес (вместе с мусором).
            </summary>
            <param name="value">Строка с email.</param>
            <returns>Строка без email.</returns>
        </member>
        <member name="M:CommonLibrary.StringUtils.ReplaceWhiteSpaces(System.String,System.String)">
            <summary>
            Заменить пробельные символы.
            </summary>
            <param name="value">Строка.</param>
            <param name="replaceValue">На что заменить.</param>
            <returns>Строка без символов перевода строк.</returns>
        </member>
        <member name="M:CommonLibrary.StringUtils.IsRussian(System.String)">
            <summary>
            Проверить, что строка является русскоязычной.
            </summary>
            <param name="value">Строка.</param>
        </member>
        <member name="M:CommonLibrary.StringUtils.IsRussian(System.Char)">
            <summary>
            Проверить, что символ является русским.
            </summary>
            <param name="character">Символ.</param>
        </member>
        <member name="M:CommonLibrary.StringUtils.SplitToLines(System.String)">
            <summary>
            Разбить текст на строки.
            </summary>
            <param name="text">Разбиваемый текст.</param>
            <returns>Список строк.</returns>
            <remarks>Использовать вместо Split(new[] { Environment.NewLine }), чтобы обрабатывать различные маркеры конца строк.</remarks>
        </member>
        <member name="M:CommonLibrary.StringUtils.ReplaceIgnoreCase(System.String,System.String,System.String)">
            <summary>
            Заменить подстроку без учёта регистра.
            </summary>
            <param name="input">Исходная строка.</param>
            <param name="search">Что заменить.</param>
            <param name="replacement">На что заменить.</param>
            <returns>Строка.</returns>
        </member>
        <member name="T:CommonLibrary.TitleCapitalizer">
            <summary>
            Капитализатор заголовков.
            </summary>
        </member>
        <member name="F:CommonLibrary.TitleCapitalizer.Space">
            <summary>
            Символ пробела.
            </summary>
        </member>
        <member name="F:CommonLibrary.TitleCapitalizer.RussianAlphabet">
            <summary>
            Русский алфавит.
            </summary>
        </member>
        <member name="F:CommonLibrary.TitleCapitalizer.SupportedCultureName">
            <summary>
            Имя культуры, для которой поддерживается капитализация.
            </summary>
        </member>
        <member name="F:CommonLibrary.TitleCapitalizer.nonCapitalizedWords">
            <summary>
            Слова которые нельзя капитализировать. Заранее исключены слова длиной более 4-х символов.
            </summary>
        </member>
        <member name="M:CommonLibrary.TitleCapitalizer.Capitalize(System.String,System.Globalization.CultureInfo)">
            <summary>
            Капитализировать строку.
            </summary>
            <param name="value">Строка.</param>
            <param name="culture">Культура.</param>
            <returns>Капитализированная строка.</returns>
            <remarks>
            Правила:
            1. Первое и последнее английское слово фразы капитализируется всегда.
            2. Не капитализируются слова из списка исключений (предлоги, артикли и союзы), кроме ситуации из правила №1.
            3. Слова из списка исключений длиной более 4 символов капитализируются всегда.
            4. Слова с русскими буквами не капитализируются.
            </remarks>
        </member>
        <member name="T:CommonLibrary.TypeUtils">
            <summary>
            Вспомогательные функции для работы с типами.
            </summary>
        </member>
        <member name="M:CommonLibrary.TypeUtils.GetQualifiedTypeName(System.String,System.String)">
            <summary>
            Получить квалифицированное имя типа (без сборки).
            </summary>
            <param name="namespaceName">Пространство имен.</param>
            <param name="typeName">Имя типа.</param>
            <returns>Квалифицированное имя типа (без сборки).</returns>
        </member>
        <member name="M:CommonLibrary.TypeUtils.GetAssemblyQualifiedTypeName(System.String,System.String,System.String)">
            <summary>
            Получить квалифицированное имя типа с указанием сборки.
            </summary>
            <param name="namespaceName">Пространство имен.</param>
            <param name="typeName">Имя типа.</param>
            <param name="assemblyName">Имя сборки.</param>
            <returns>Квалифицированное имя типа с указанием сборки.</returns>
        </member>
        <member name="M:CommonLibrary.TypeUtils.GetAssemblyQualifiedTypeName(System.Type)">
            <summary>
            Получить квалифицированное имя типа с указанием сборки.
            </summary>
            <param name="type">Тип.</param>
            <returns>Квалифицированное имя типа с указанием сборки.</returns>
        </member>
        <member name="M:CommonLibrary.TypeUtils.IsQualifiedTypeName(System.String)">
            <summary>
            Проверить, является ли переданное имя типа кавлифицированным.
            </summary>
            <param name="typeName">Имя типа.</param>
            <returns>Резальтат проверки.</returns>
        </member>
        <member name="T:CommonLibrary.UnicodeUtils">
            <summary>
            Вспомогательные функции для работы с Unicode.
            </summary>
        </member>
        <member name="F:CommonLibrary.UnicodeUtils.RegexBracketEscapedCharacters">
            <summary>
            Символы, которые должны быть экранированы внутри [] в регулярном выражении.
            </summary>
        </member>
        <member name="F:CommonLibrary.UnicodeUtils.SimilarCharacterSeries">
            <summary>
            Набор "похожих" символов (двухсимвольные строки используются для левых/правых элементов, например кавычек).
            </summary>
        </member>
        <member name="F:CommonLibrary.UnicodeUtils.SimilarCharacters">
            <summary>
            Словарь соответствий "символ" - "похожие символы" (сам "символ" тоже включен в "похожие").
            </summary>
        </member>
        <member name="P:CommonLibrary.UnicodeUtils.WordDelimiters">
            <summary>
            Набор символов - разделителей слов.
            </summary>
            <remarks>В виде строки, чтобы удовлетворить Code Analyze.</remarks>
        </member>
        <member name="P:CommonLibrary.UnicodeUtils.WordStartRegexPattern">
            <summary>
            Регулярка для границы начала слова. Явное перечисление символов для будущей унификации с sql-реализацией.
            </summary>
        </member>
        <member name="M:CommonLibrary.UnicodeUtils.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Проверить, входит ли подстрока в строку (с учетом похожих символов).
            </summary>
            <param name="value">Строка.</param>
            <param name="find">Искомая подстрока.</param>
            <param name="ignoreCase">Искать без учета регистра.</param>
            <returns>True - входит.</returns>
        </member>
        <member name="M:CommonLibrary.UnicodeUtils.StartWith(System.String,System.String,System.Boolean)">
            <summary>
            Проверить, начинается ли строка с заданного префикса (с учетом похожих символов).
            </summary>
            <param name="value">Строка.</param>
            <param name="prefix">Префикс.</param>
            <param name="ignoreCase">Сравнивать без учета регистра.</param>
            <returns>True - строка начинается с заданного префикса.</returns>
        </member>
        <member name="M:CommonLibrary.UnicodeUtils.Similar(System.String,System.String,System.Boolean)">
            <summary>
            Проверить похожи ли строки.
            </summary>
            <param name="value1">Первая строка.</param>
            <param name="value2">Вторая строка.</param>
            <param name="ignoreCase">Сравнивать без учета регистра.</param>
            <returns>True - похожи.</returns>
        </member>
        <member name="M:CommonLibrary.UnicodeUtils.Similar(System.Char,System.Char,System.Boolean)">
            <summary>
            Проверить похожи ли символы.
            </summary>
            <param name="value1">Первый символ.</param>
            <param name="value2">Второй символ.</param>
            <param name="ignoreCase">Сравнивать без учета регистра.</param>
            <returns>True - похожи.</returns>
        </member>
        <member name="M:CommonLibrary.UnicodeUtils.GetSimilarCharacters(System.Char)">
            <summary>
            Получить по символу "похожие" символы.
            </summary>
            <param name="original">Оригинальный символ.</param>
            <returns>Null - если для символов нет "похожих", иначе "похожие" символы с включением оригинального.</returns>
            <remarks>Пока учитываются только некоторые пунктуационные символы.</remarks>
        </member>
        <member name="M:CommonLibrary.UnicodeUtils.IsWordDelimiter(System.Char)">
            <summary>
            Проверить что символ является разделителем слова.
            </summary>
            <param name="symbol">Символ.</param>
            <returns>True если разделитель.</returns>
        </member>
        <member name="M:CommonLibrary.UnicodeUtils.GetWordsCount(System.String)">
            <summary>
            Получить количество слов в строке.
            </summary>
            <param name="value">Строка.</param>
            <returns>Количество слов.</returns>
        </member>
        <member name="M:CommonLibrary.UnicodeUtils.SplitWords(System.String)">
            <summary>
            Разбить строку на слова.
            </summary>
            <param name="value">Строка.</param>
            <returns>Слова строки.</returns>
        </member>
        <member name="M:CommonLibrary.UnicodeUtils.SplitIntoPhrases(System.String)">
            <summary>
            Разбить строку на фразы.
            </summary>
            <param name="value">Строка.</param>
            <returns>Фразы.</returns>
        </member>
        <member name="M:CommonLibrary.UnicodeUtils.FillSimilarCharacters">
            <summary>
            Заполнить словарь соответствий "символ" - "похожие символы".
            </summary>
        </member>
        <member name="M:CommonLibrary.UnicodeUtils.Similar(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Проверить похожи ли части строк.
            </summary>
            <param name="value1">Первая строка.</param>
            <param name="pos1">Позиция в первой строке, начиная с которой выполнять сравнение.</param>
            <param name="value2">Вторая строка.</param>
            <param name="pos2">Позиция во второй строке, начиная с которой выполнять сравнение.</param>
            <param name="length">До какой длины сравнивать строки.</param>
            <param name="ignoreCase">Сравнивать без учета регистра.</param>
            <returns>True - похожи.</returns>
        </member>
        <member name="T:CommonLibrary.XmlUtils">
            <summary>
            Методы расширения для работы с LINQ-XML.
            </summary>
        </member>
        <member name="M:CommonLibrary.XmlUtils.AttributeValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            Получить значение атрибута.
            </summary>
            <param name="element">Элемент, содержащий атрибут.</param>
            <param name="attributeName">Имя атрибута.</param>
            <returns>Значение атрибута в виде строки, либо пусто.</returns>
        </member>
        <member name="M:CommonLibrary.XmlUtils.AttributeValue``1(System.Xml.Linq.XElement,System.String,``0)">
            <summary>
            Конвертировать значение атрибута в значение заданного типа.
            </summary>
            <typeparam name="T">Тип, значение которого требуется получить.</typeparam>
            <param name="element">Элемент, содержащий атрибут.</param>
            <param name="attributeName">Имя атрибута.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Конвертированное значение, либо значение по умолчанию, если не удалось конвертировать.</returns>
        </member>
        <member name="M:CommonLibrary.XmlUtils.Value``1(System.Xml.Linq.XElement,``0)">
            <summary>
            Конвертировать содержимое элемента в значение заданного типа.
            </summary>
            <typeparam name="T">Тип, значение которого требуется получить.</typeparam>
            <param name="element">Элемент.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Конвертированное значение, либо значение по умолчанию, если не удалось конвертировать.</returns>
        </member>
        <member name="M:CommonLibrary.XmlUtils.Value``1(System.Xml.Linq.XContainer,System.String,``0)">
            <summary>
            Конвертировать содержимое дочернего элемента в значение заданного типа.
            </summary>
            <typeparam name="T">Тип, значение которого требуется получить.</typeparam>
            <param name="container">Родительский контейнер.</param>
            <param name="name">Имя дочернего элемента.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Конвертированное значение, либо значение по умолчанию, если не удалось конвертировать.</returns>
        </member>
        <member name="M:CommonLibrary.XmlUtils.ElementOrEmpty(System.Xml.Linq.XContainer,System.String)">
            <summary>
            Получить дочерний элемент по имени, если элемента нет, вернуть фейковый элемент.
            </summary>
            <param name="container">Родительский контейнер.</param>
            <param name="name">Имя дочернего элемента.</param>
            <returns>Дочерний элемент, либо фейковый элемент.</returns>
        </member>
        <member name="M:CommonLibrary.XmlUtils.AddElement(System.Xml.Linq.XContainer,System.String)">
            <summary>
            Добавить дочерний элемент.
            </summary>
            <param name="container">Родительский контейнер.</param>
            <param name="name">Имя дочернего элемента.</param>
            <returns>Добавленный элемент.</returns>
        </member>
        <member name="M:CommonLibrary.XmlUtils.AddElement(System.Xml.Linq.XContainer,System.String,System.Object)">
            <summary>
            Добавить дочерний элемент.
            </summary>
            <param name="container">Родительский контейнер.</param>
            <param name="name">Имя дочернего элемента.</param>
            <param name="value">Содержимое дочернего элемента.</param>
            <returns>Добавленный элемент.</returns>
        </member>
        <member name="T:CommonLibrary.ValidationMessage">
            <summary>
            Класс сообщений валидации.
            </summary>
        </member>
        <member name="P:CommonLibrary.ValidationMessage.MessageType">
            <summary>
            Получить или установить тип сообщения.
            </summary>
        </member>
        <member name="P:CommonLibrary.ValidationMessage.Body">
            <summary>
            Получить или установить текст сообщения.
            </summary>
        </member>
        <member name="M:CommonLibrary.ValidationMessage.#ctor(System.String,CommonLibrary.ValidationMessageType)">
            <summary>
            Конструктор.
            </summary>
            <param name="message">Текст сообщения.</param>
            <param name="messageType">Тип сообщения.</param>
        </member>
        <member name="M:CommonLibrary.ValidationMessage.#ctor(CommonLibrary.LocalizedString,CommonLibrary.ValidationMessageType)">
            <summary>
            Конструктор.
            </summary>
            <param name="message">Текст сообщения.</param>
            <param name="messageType">Тип сообщения.</param>
        </member>
        <member name="T:CommonLibrary.ValidationMessageBodyComparer">
            <summary>
            Компаратор сообщений валидации.
            </summary>
            <remarks>
            Сравнивает сообщения только по тексту, не учитывая тип сущности, id сущности и тип сообщения.
            </remarks>
        </member>
        <member name="F:CommonLibrary.ValidationMessageBodyComparer.localizedStringComparer">
            <summary>
            Компаратор локализованных строк.
            </summary>
        </member>
        <member name="P:CommonLibrary.ValidationMessageBodyComparer.Instance">
            <summary>
            Экземпляр-одиночка.
            </summary>
        </member>
        <member name="M:CommonLibrary.ValidationMessageBodyComparer.#ctor">
            <summary>
            Конструктор по-умолчанию.
            </summary>
        </member>
        <member name="T:CommonLibrary.ValidationMessageType">
            <summary>
            Перечисление типов сообщений валидации.
            </summary>
        </member>
        <member name="F:CommonLibrary.ValidationMessageType.Error">
            <summary>
            Ошибка.
            </summary>
        </member>
        <member name="F:CommonLibrary.ValidationMessageType.Warning">
            <summary>
            Предупреждение.
            </summary>
        </member>
        <member name="F:CommonLibrary.ValidationMessageType.Information">
            <summary>
            Информация.
            </summary>
        </member>
        <member name="F:CommonLibrary.ValidationMessageType.MinorException">
            <summary>
            Второстепенное исключение.
            </summary>
        </member>
        <member name="T:CommonLibrary.ViewSettings.ControlSettingsXmlSerializerBase`1">
            <summary>
            Базовый класс сериализатора настроек контрола в xml.
            </summary>
            <typeparam name="TSettings">Тип настроек.</typeparam>
        </member>
        <member name="M:CommonLibrary.ViewSettings.ControlSettingsXmlSerializerBase`1.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Десериализовать настройки контрола.
            </summary>
            <param name="element">Корневой элемент настроек.</param>
            <returns>Настройки контрола.</returns>
        </member>
        <member name="M:CommonLibrary.ViewSettings.ControlSettingsXmlSerializerBase`1.Serialize(`0)">
            <summary>
            Сериализовать настройки контрола.
            </summary>
            <param name="settings">Настройки контрола.</param>
            <returns>Корневой элемент настроек.</returns>
        </member>
        <member name="T:CommonLibrary.ViewSettings.IControlSettings">
            <summary>
            Настройки контрола.
            </summary>
        </member>
        <member name="P:CommonLibrary.ViewSettings.IControlSettings.SettingsName">
            <summary>
            Имя настроек.
            </summary>
        </member>
        <member name="T:CommonLibrary.ViewSettings.IControlSettingsXmlSerializer">
            <summary>
            Интерфейс сериализатора настроек контрола в xml.
            </summary>
        </member>
        <member name="M:CommonLibrary.ViewSettings.IControlSettingsXmlSerializer.CanSerialize(CommonLibrary.ViewSettings.IControlSettings)">
            <summary>
            Может ли сериализатор сериализовать настройки.
            </summary>
            <param name="settings">Настройки.</param>
            <returns>True - может сериализовать.</returns>
        </member>
        <member name="M:CommonLibrary.ViewSettings.IControlSettingsXmlSerializer.CanDeserialize(System.Xml.Linq.XElement)">
            <summary>
            Может ли сериализатор десериализовать настройки.
            </summary>
            <param name="element">Корневой элемент настроек.</param>
            <returns>True - может десериализовать.</returns>
        </member>
        <member name="M:CommonLibrary.ViewSettings.IControlSettingsXmlSerializer.Serialize(CommonLibrary.ViewSettings.IControlSettings)">
            <summary>
            Сериализовать настройки контрола.
            </summary>
            <param name="settings">Настройки контрола.</param>
            <returns>Корневой элемент настроек.</returns>
        </member>
        <member name="M:CommonLibrary.ViewSettings.IControlSettingsXmlSerializer.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Десериализовать настройки контрола.
            </summary>
            <param name="element">Корневой элемент настроек.</param>
            <returns>Настройки контрола.</returns>
        </member>
        <member name="T:CommonLibrary.ViewSettings.StoredView">
            <summary>
            Внешний вид, который хранит настройки контролов.
            </summary>
        </member>
        <member name="P:CommonLibrary.ViewSettings.StoredView.ViewName">
            <summary>
            Имя вида.
            </summary>
        </member>
        <member name="P:CommonLibrary.ViewSettings.StoredView.ControlSettings">
            <summary>
            Настройки контролов.
            </summary>
        </member>
        <member name="T:CommonLibrary.ViewSettings.StoredViewLoader">
            <summary>
            Загрузчик внешнего вида.
            </summary>
        </member>
        <member name="M:CommonLibrary.ViewSettings.StoredViewLoader.TryLoad(System.Reflection.Assembly,System.String)">
            <summary>
            Загрузить внешний вид из сборки.
            </summary>
            <param name="assembly">Сборка.</param>
            <param name="resourceKey">Имя ресурса.</param>
            <returns>Внешний вид.</returns>
        </member>
        <member name="M:CommonLibrary.ViewSettings.StoredViewLoader.TryLoad(System.String)">
            <summary>
            Загрузить внешний вид из файла.
            </summary>
            <param name="path">Путь к файлу.</param>
            <returns>Внешний вид.</returns>
        </member>
        <member name="T:CommonLibrary.ViewSettings.StoredViewXmlSerializer">
            <summary>
            Сериализатор в xml.
            </summary>
        </member>
        <member name="P:CommonLibrary.ViewSettings.StoredViewXmlSerializer.Instance">
            <summary>
            Синглтон.
            </summary>
        </member>
        <member name="P:CommonLibrary.ViewSettings.StoredViewXmlSerializer.SettingsSerializers">
            <summary>
            Сериализаторы настроек контролов.
            </summary>
        </member>
        <member name="M:CommonLibrary.ViewSettings.StoredViewXmlSerializer.Deserialize(System.String)">
            <summary>
            Десериализовать внешний вид.
            </summary>
            <param name="text">Текст в формате xml.</param>
            <returns>Внешний вид.</returns>
        </member>
        <member name="T:CommonLibrary.LinesPerRowMode">
            <summary>
            Высота строки грида.
            </summary>
        </member>
        <member name="F:CommonLibrary.LinesPerRowMode.None">
            <summary>
            Режим не установлен явно (должен использоваться режим отображения по-умолчанию).
            </summary>
        </member>
        <member name="F:CommonLibrary.LinesPerRowMode.OneLineMode">
            <summary>
            Однострочный режим.
            </summary>
        </member>
        <member name="F:CommonLibrary.LinesPerRowMode.TwoLinesMode">
            <summary>
            Двустрочный режим.
            </summary>
        </member>
    </members>
</doc>
